.版本 2

.程序集 快速生成图形

.子程序 开启或关闭文字标签, , 公开, 开启或者关闭文字标签，适用于：折线、饼图、柱形图等
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空则翻转状态，开始改关闭，关闭改开始。
.参数 指定某条折线, 整数型, 可空, 位置从0开始，为空时操作全部折线。
.局部变量 计数器, 整数型

.如果 (是否为空 (指定某条折线))
    .计次循环首 (json.数组_取长度 (“series”), 计数器)
        .如果 (是否为空 (开启还是关闭))
            json.置新值 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].label.normal.show”, , , , 取反 (json.取逻辑 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].label.normal.show”)))
        .否则
            json.置新值 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].label.normal.show”, , , , 开启还是关闭)
        .如果结束

    .计次循环尾 ()
.否则
    .如果 (是否为空 (开启还是关闭))
        json.置新值 (“series[” ＋ 到文本 (指定某条折线) ＋ “].label.normal.show”, , , , 取反 (json.取逻辑 (“series[” ＋ 到文本 (指定某条折线) ＋ “].label.normal.show”)))
    .否则
        json.置新值 (“series[” ＋ 到文本 (指定某条折线) ＋ “].label.normal.show”, , , , 开启还是关闭)
    .如果结束

.如果结束


.子程序 设置图例组件, , 公开, 设置图例组件，参数留空将保持原设定。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空保持原状态，设真为开启，设假为关闭。
.参数 图例数据, 文本型, 可空, 为空时将自动获取（必须先设置图形数据才能自动获取）。图例数据组。格式为：“['数据1','数据2'...]”，强烈建议由“创建JSON数组()”生成。
.参数 图例布局朝向, 逻辑型, 可空, 默认为：假=水平排列，设真=垂直排列，设假=水平排列。
.局部变量 计数器, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 名称组, 文本型, , "0"

.如果 (json.数组_取长度 (“legend”) ≥ 1)
    .计次循环首 (json.数组_取长度 (“legend”), 计数器)
        .如果真 (是否为空 (开启还是关闭) ＝ 假)
            json.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭)
        .如果真结束
        .如果真 (是否为空 (图例布局朝向) ＝ 假)
            json.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].orient”, , , , 图例布局朝向)
        .如果真结束
        .如果 (是否为空 (图例数据))
            清除数组 (名称组)
            .计次循环首 (json.数组_取长度 (“series”), 计数器1)
                .判断开始 (json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “graph”)
                    .计次循环首 (json.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories”), 计数器2)
                        加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                    .计次循环尾 ()
                .判断 (json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “radar”)
                    .计次循环首 (json.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data”), 计数器2)
                        加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                    .计次循环尾 ()
                    加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].name”))
                .默认

                .判断结束

            .计次循环尾 ()
            json.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].data”, 创建JSON数组 (名称组))
        .否则
            json.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].data”, 图例数据)
        .如果结束

    .计次循环尾 ()
.否则
    .如果真 (是否为空 (开启还是关闭) ＝ 假)
        json.置新值 (“legend.show”, , , , 开启还是关闭)
    .如果真结束
    .如果真 (是否为空 (图例布局朝向) ＝ 假)
        json.置新值 (“legend.orient”, , , , 图例布局朝向)
    .如果真结束
    .如果 (是否为空 (图例数据))
        清除数组 (名称组)
        .计次循环首 (json.数组_取长度 (“series”), 计数器1)
            .判断开始 (json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “graph”)
                .计次循环首 (json.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories”), 计数器2)
                    加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                .计次循环尾 ()
            .判断 (json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “radar”)
                .计次循环首 (json.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data”), 计数器2)
                    加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                .计次循环尾 ()
                加入成员 (名称组, json.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].name”))
            .默认

            .判断结束

        .计次循环尾 ()
        json.置新值 (“legend.data”, 创建JSON数组 (名称组))
    .否则
        json.置新值 (“legend.data”, 图例数据)
    .如果结束

.如果结束


.子程序 设置标题组件, , 公开, 设置标题组件，参数留空将保持原设定。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空保持原状态，设真为开启，设假为关闭。
.参数 新标题, 文本型, 可空
.参数 新副标题, 文本型, 可空
.参数 背景颜色, 文本型, 可空, 默认为：'transparent'透明无色，也可设置为颜色值如：“#FFF”或“#FFFFFF”
.参数 主标题_文字颜色, 文本型, 可空, 默认为：“#333”
.参数 主标题_文字大小, 整数型, 可空, 默认为：18
.参数 副标题_文字颜色, 文本型, 可空, 默认为：“#aaa”
.参数 副标题_文字大小, 整数型, 可空, 默认为：12
.局部变量 计数器, 整数型

.如果真 (是否为空 (开启还是关闭) ＝ 假)
    json.置新值 (“title.show”, , , , 开启还是关闭)
.如果真结束
.如果真 (是否为空 (新标题) ＝ 假)
    json.置新值 (“title.text”, , 新标题)
.如果真结束
.如果真 (是否为空 (新副标题) ＝ 假)
    json.置新值 (“title.subtext”, , 新副标题)
.如果真结束
.如果真 (是否为空 (背景颜色) ＝ 假)
    json.置新值 (“title.backgroundColor”, , 背景颜色)
.如果真结束
.如果真 (是否为空 (主标题_文字颜色) ＝ 假)
    json.置新值 (“title.textStyle.color”, , 主标题_文字颜色)
.如果真结束
.如果真 (是否为空 (主标题_文字大小) ＝ 假)
    json.置新值 (“title.textStyle.fontSize”, , , 主标题_文字大小)
.如果真结束
.如果真 (是否为空 (副标题_文字颜色) ＝ 假)
    json.置新值 (“title.subtextStyle.color”, , 副标题_文字颜色)
.如果真结束
.如果真 (是否为空 (副标题_文字大小) ＝ 假)
    json.置新值 (“title.subtextStyle.fontSize”, , , 副标题_文字大小)
.如果真结束


.子程序 设置X轴, , 公开, 设置X轴组件，参数留空将保持原设定。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空保持原状态，设真为开启，设假为关闭。
.参数 X轴数据, 文本型, 可空, X轴数据组。格式为：“['一月','二月'...]”，强烈建议由“创建JSON数组()”生成。
.参数 位置, 逻辑型, 可空, 默认为：假=底部。为真=顶部，为假=底部。
.参数 是否两侧留空, 逻辑型, 可空, 是否两侧留空。默认为真，为真留空，为假不留空。
.参数 刻度最大值, 文本型, 可空, 默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为“dataMax”将自动取数据在该轴上最大值。
.参数 刻度最小值, 文本型, 可空, 默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为“dataMin”将自动取数据在该轴上最小值。
.参数 刻度分段数, 整数型, 可空, 默认为：5
.参数 坐标轴类型, 文本型, 可空, 默认为：类目轴“category”。可选常量：#坐标轴类型_**轴。
.局部变量 计数器, 整数型

.如果 (json.数组_取长度 (“xAxis”) ≥ 1)
    .计次循环首 (json.数组_取长度 (“xAxis”), 计数器)
        .如果真 (是否为空 (开启还是关闭) ＝ 假)
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭)
        .如果真结束
        .如果真 (是否为空 (X轴数据) ＝ 假)
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”, X轴数据)
        .如果真结束
        .如果真 (是否为空 (是否两侧留空) ＝ 假)
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].boundaryGap”, , , , 是否两侧留空)
        .如果真结束
        .如果真 (是否为空 (刻度最大值) ＝ 假)
            .如果 (刻度最大值 ＝ “dataMax”)
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].max”, , “dataMax”)
            .否则
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].max”, , , 到数值 (刻度最大值))
            .如果结束

        .如果真结束
        .如果真 (是否为空 (刻度最小值) ＝ 假)
            .如果 (刻度最小值 ＝ “dataMin”)
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].min”, , “dataMin”)
            .否则
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].min”, , , 到数值 (刻度最小值))
            .如果结束

        .如果真结束
        .如果真 (是否为空 (刻度分段数) ＝ 假)
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].splitNumber”, , , 刻度分段数)
        .如果真结束
        .如果真 (是否为空 (位置) ＝ 假)
            .如果 (位置)
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].position”, , “top”)
            .否则
                json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].position”, , “bottom”)
            .如果结束

        .如果真结束
        .如果 (是否为空 (坐标轴类型))
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].type”, , “category”)
        .否则
            json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].type”, , 坐标轴类型)
        .如果结束


    .计次循环尾 ()
.否则
    .如果真 (是否为空 (开启还是关闭) ＝ 假)
        json.置新值 (“xAxis.show”, , , , 开启还是关闭)
    .如果真结束
    .如果真 (是否为空 (X轴数据) ＝ 假)
        json.置新值 (“xAxis.data”, X轴数据)
    .如果真结束
    .如果真 (是否为空 (是否两侧留空) ＝ 假)
        json.置新值 (“xAxis.boundaryGap”, , , , 是否两侧留空)
    .如果真结束
    .如果真 (是否为空 (刻度最大值) ＝ 假)
        .如果 (刻度最大值 ＝ “dataMax”)
            json.置新值 (“xAxis.max”, , “dataMax”)
        .否则
            json.置新值 (“xAxis.max”, , , 到数值 (刻度最大值))
        .如果结束

    .如果真结束
    .如果真 (是否为空 (刻度最小值) ＝ 假)
        .如果 (刻度最小值 ＝ “dataMin”)
            json.置新值 (“xAxis.min”, , “dataMin”)
        .否则
            json.置新值 (“xAxis.min”, , , 到数值 (刻度最小值))
        .如果结束

    .如果真结束
    .如果真 (是否为空 (刻度分段数) ＝ 假)
        json.置新值 (“xAxis.splitNumber”, , , 刻度分段数)
    .如果真结束
    .如果真 (是否为空 (位置) ＝ 假)
        .如果 (位置)
            json.置新值 (“xAxis.position”, , “top”)
        .否则
            json.置新值 (“xAxis.position”, , “bottom”)
        .如果结束

    .如果真结束
    .如果 (是否为空 (坐标轴类型))
        json.置新值 (“xAxis.type”, , “category”)
    .否则
        json.置新值 (“xAxis.type”, , 坐标轴类型)
    .如果结束

.如果结束


.子程序 设置Y轴, , 公开, 设置Y轴组件，参数留空将保持原设定。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空则翻转状态，真为开启，假为关闭。
.参数 位置, 逻辑型, 可空, 默认为：假=左边。为真=右边，为假=左边。
.参数 刻度最大值, 文本型, 可空, 默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为“dataMax”将自动取数据在该轴上最大值。
.参数 刻度最小值, 文本型, 可空, 默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为“dataMin”将自动取数据在该轴上最小值。
.参数 刻度分段数, 整数型, 可空, 默认为：5
.局部变量 计数器, 整数型

.如果 (json.数组_取长度 (“yAxis”) ≥ 1)
    .计次循环首 (json.数组_取长度 (“yAxis”), 计数器)
        .如果真 (是否为空 (开启还是关闭) ＝ 假)
            json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭)
        .如果真结束
        .如果真 (是否为空 (刻度最大值) ＝ 假)
            .如果 (刻度最大值 ＝ “dataMax”)
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].max”, , “dataMax”)
            .否则
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].max”, , , 到数值 (刻度最大值))
            .如果结束

        .如果真结束
        .如果真 (是否为空 (刻度最小值) ＝ 假)
            .如果 (刻度最小值 ＝ “dataMin”)
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].min”, , “dataMin”)
            .否则
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].min”, , , 到数值 (刻度最小值))
            .如果结束

        .如果真结束
        .如果真 (是否为空 (刻度分段数) ＝ 假)
            json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].splitNumber”, , , 刻度分段数)
        .如果真结束
        .如果真 (是否为空 (位置) ＝ 假)
            .如果 (位置)
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].position”, , “right”)
            .否则
                json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].position”, , “left”)
            .如果结束

        .如果真结束

    .计次循环尾 ()
.否则
    .如果真 (是否为空 (开启还是关闭) ＝ 假)
        json.置新值 (“yAxis.show”, , , , 开启还是关闭)
    .如果真结束
    .如果真 (是否为空 (刻度最大值) ＝ 假)
        .如果 (刻度最大值 ＝ “dataMax”)
            json.置新值 (“yAxis.max”, , “dataMax”)
        .否则
            json.置新值 (“yAxis.max”, , , 到数值 (刻度最大值))
        .如果结束

    .如果真结束
    .如果真 (是否为空 (刻度最小值) ＝ 假)
        .如果 (刻度最小值 ＝ “dataMin”)
            json.置新值 (“yAxis.min”, , “dataMin”)
        .否则
            json.置新值 (“yAxis.min”, , , 到数值 (刻度最小值))
        .如果结束

    .如果真结束
    .如果真 (是否为空 (刻度分段数) ＝ 假)
        json.置新值 (“yAxis.splitNumber”, , , 刻度分段数)
    .如果真结束
    .如果真 (是否为空 (位置) ＝ 假)
        .如果 (位置)
            json.置新值 (“yAxis.position”, , “right”)
        .否则
            json.置新值 (“yAxis.position”, , “left”)
        .如果结束

    .如果真结束

.如果结束


.子程序 开启或关闭缩放组件, , 公开, 开启或关闭缩放组件。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭, 逻辑型, 可空, 为空则翻转状态，真为开启，假为关闭。
.局部变量 计数器, 整数型

.如果 (是否为空 (开启还是关闭))
    .如果 (json.数组_取长度 (“dataZoom”) ≥ 1)
        .计次循环首 (json.数组_取长度 (“dataZoom”), 计数器)
            json.置新值 (“dataZoom[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 取反 (json.取逻辑 (“dataZoom[” ＋ 到文本 (计数器 － 1) ＋ “].show”)))
        .计次循环尾 ()
    .否则
        json.置新值 (“dataZoom.show”, , , , 取反 (json.取逻辑 (“dataZoom.show”)))
    .如果结束

.否则
    .如果 (json.数组_取长度 (“dataZoom”) ≥ 1)
        .计次循环首 (json.数组_取长度 (“dataZoom”), 计数器)
            json.置新值 (“dataZoom[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭)
        .计次循环尾 ()
    .否则
        json.置新值 (“dataZoom.show”, , , , 开启还是关闭)
    .如果结束

.如果结束


.子程序 添加缩放组件, , 公开, 添加X轴或Y轴缩放组件，同时覆盖原有缩放组件设置。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启X轴缩放, 逻辑型, , 真为开启，假为不开启。
.参数 开启Y轴缩放, 逻辑型, 可空, 为空将不开启。
.参数 开启后自动启用, 逻辑型, 可空, 默认会自动启用。
.参数 X轴开始位置, 整数型, 可空, 默认为0（范围：0-100)
.参数 X轴结束位置, 整数型, 可空, 默认为100（范围：0-100）
.参数 Y轴开始位置, 整数型, 可空, 默认为0（范围：0-100）
.参数 Y轴结束位置, 整数型, 可空, 默认为100（范围：0-100）
.局部变量 临时数组, 整数型, , "0"
.局部变量 是否启用, 逻辑型
.局部变量 计数器, 整数型
.局部变量 x_start, 整数型
.局部变量 x_end, 整数型
.局部变量 y_start, 整数型
.局部变量 y_end, 整数型

json.置新值 (“dataZoom”, “[]”)
.如果 (是否为空 (开启后自动启用) 或 开启后自动启用)
    是否启用 ＝ 真
.否则
    是否启用 ＝ 假
.如果结束
.如果 (是否为空 (X轴开始位置))
    x_start ＝ 0
.否则
    x_start ＝ X轴开始位置
.如果结束
.如果 (是否为空 (X轴结束位置))
    x_end ＝ 100
.否则
    x_end ＝ X轴结束位置
.如果结束
.如果 (是否为空 (Y轴开始位置))
    y_start ＝ 0
.否则
    y_start ＝ Y轴开始位置
.如果结束
.如果 (是否为空 (Y轴结束位置))
    y_end ＝ 100
.否则
    y_end ＝ Y轴结束位置
.如果结束
.如果真 (开启X轴缩放)
    json.数组_加入成员 (“dataZoom”, “{}”)
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].show”, , , , 是否启用)
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , x_start)
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , x_end)
.如果真结束
.如果真 (开启Y轴缩放)
    json.数组_加入成员 (“dataZoom”, “{}”)
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].show”, , , , 是否启用)
    .如果 (json.数组_取长度 (“yAxis”) ＞ 1)
        .计次循环首 (json.数组_取长度 (“yAxis”), 计数器)
            加入成员 (临时数组, 计数器 － 1)
        .计次循环尾 ()
        json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, 创建JSON数组 (, , 临时数组))
    .否则
        json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, , , 0)
    .如果结束
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , y_start)
    json.置新值 (“dataZoom[” ＋ 到文本 (json.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , y_end)
.如果真结束


.子程序 开启或关闭工具组件, , 公开, 开启或关闭工具栏组件。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 开启还是关闭工具组件, 逻辑型, , 开启或关闭工具栏组件。
.参数 开启还是关闭_保存图片工具, 逻辑型, 可空, 开启或关闭保存图片工具，显示需开启工具栏组件。
.参数 开启还是关闭_配置项还原工具, 逻辑型, 可空, 开启或关闭配置项还原工具，显示需开启工具栏组件。
.参数 开启还是关闭_数据视图工具, 逻辑型, 可空, 开启或关闭数据视图工具，显示需开启工具栏组件。
.参数 开启还是关闭_区域缩放工具, 逻辑型, 可空, 开启或关闭区域缩放工具，显示需开启工具栏组件。
.参数 开启还是关闭_动态类型切换工具, 逻辑型, 可空, 开启或关闭动态类型切换工具，显示需开启工具栏组件。
.参数 开启还是关闭_选框组件工具, 逻辑型, 可空, 开启或关闭选框组件工具，显示需开启工具栏组件。
.局部变量 计数器, 整数型

.如果 (json.数组_取长度 (“toolbox”) ≥ 1)
    .计次循环首 (json.数组_取长度 (“toolbox”), 计数器)
        json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭工具组件)
        .如果真 (是否为空 (开启还是关闭_保存图片工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.saveAsImage.show”, , , , 开启还是关闭_保存图片工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_配置项还原工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.restore.show”, , , , 开启还是关闭_配置项还原工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_数据视图工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.dataView.show”, , , , 开启还是关闭_数据视图工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_区域缩放工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.dataZoom.show”, , , , 开启还是关闭_区域缩放工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_动态类型切换工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.magicType.show”, , , , 开启还是关闭_动态类型切换工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_选框组件工具) ＝ 假)
            json.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.brush.show”, , , , 开启还是关闭_选框组件工具)
        .如果真结束

    .计次循环尾 ()
.否则
    json.置新值 (“toolbox.show”, , , , 开启还是关闭工具组件)
    .如果真 (是否为空 (开启还是关闭_保存图片工具) ＝ 假)
        json.置新值 (“toolbox.feature.saveAsImage.show”, , , , 开启还是关闭_保存图片工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_配置项还原工具) ＝ 假)
        json.置新值 (“toolbox.feature.restore.show”, , , , 开启还是关闭_配置项还原工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_数据视图工具) ＝ 假)
        json.置新值 (“toolbox.feature.dataView.show”, , , , 开启还是关闭_数据视图工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_区域缩放工具) ＝ 假)
        json.置新值 (“toolbox.feature.dataZoom.show”, , , , 开启还是关闭_区域缩放工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_动态类型切换工具) ＝ 假)
        json.置新值 (“toolbox.feature.magicType.show”, , , , 开启还是关闭_动态类型切换工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_选框组件工具) ＝ 假)
        json.置新值 (“toolbox.feature.brush.show”, , , , 开启还是关闭_选框组件工具)
    .如果真结束

.如果结束


.子程序 设置或读取全局颜色, , 公开, echart将内置11种颜色，图形颜色将依次循环调用，写入颜色组将覆盖原有颜色组。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 修改颜色_位置, 整数型, 可空, 修养颜色数组指定位置的颜色，位置从0开始。
.参数 修改颜色_颜色值, 文本型, 可空, 修养颜色数组指定位置的颜色，颜色格式例如："#FFF"或"#FFFFFF"。
.参数 写入颜色组, 文本型, 参考 可空 数组, 写入颜色数组，图形颜色将依次循环调用，将覆盖原有颜色组，设置本参数将忽略前边修改指定位置颜色参数。
.参数 还原默认颜色组, 逻辑型, 可空, 为真时还原默认颜色组，将忽略上边所有设置颜色的参数。
.参数 读取颜色组, 文本型, 参考 可空 数组, 读取颜色数组。
.局部变量 计数器, 整数型

.如果真 (json.数组_取长度 (“color”) ＝ 0 或 还原默认颜色组)
    json.置新值 (“color”, “['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3']”)
.如果真结束
.如果 (是否为空 (写入颜色组))
    .如果真 (是否为空 (修改颜色_位置) ＝ 假 且 是否为空 (修改颜色_颜色值) ＝ 假)
        json.置新值 (“color[” ＋ 到文本 (修改颜色_位置) ＋ “]”, , 修改颜色_颜色值)
    .如果真结束

.否则
    json.置新值 (“color”, 创建JSON数组 (写入颜色组))
.如果结束
清除数组 (读取颜色组)
.计次循环首 (json.数组_取长度 (“color”), 计数器)
    加入成员 (读取颜色组, json.数组_取出成员 (“color[” ＋ 到文本 (计数器 － 1) ＋ “]”))
.计次循环尾 ()


.子程序 设置背景颜色, , 公开, 设置背景颜色（渐变或纹理背景请参考官方api后手动设置）。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 颜色值, 文本型, , 颜色格式例如："#FFF"或"#FFFFFF"

json.置新值 (“backgroundColor”, , 颜色值)


.子程序 添加图形数据_折线, , 公开, 添加一条折线。多条折线时请重复调用添加。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 名称, 文本型
.参数 数据组, 文本型, , 数据组。格式为：“[10,15,64,24...]”，强烈建议由“创建JSON数组()”生成。
.参数 是否显示为散点, 逻辑型, 可空, 默认为假
.参数 是否平滑折线, 逻辑型, 可空, 默认为真
.参数 是否阶梯线图, 逻辑型, 可空, 默认为假
.参数 是否区域填充, 逻辑型, 可空, 默认为假
.参数 是否显示文字标签, 逻辑型, 可空, 默认为假
.参数 添加标注点_最小值, 逻辑型, 可空
.参数 添加标注点_最大值, 逻辑型, 可空
.参数 添加标注点_平均值, 逻辑型, 可空
.参数 添加标线_最小值, 逻辑型, 可空
.参数 添加标线_最大值, 逻辑型, 可空
.参数 添加标线_平均值, 逻辑型, 可空
.局部变量 索引, 整数型
.局部变量 计数器, 整数型

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 名称)
.如果 (是否为空 (是否显示为散点) ＝ 假 且 是否显示为散点)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “scatter”)
.否则
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “line”)
.如果结束
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.如果 (是否为空 (是否平滑折线))
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 真)
.否则
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 是否平滑折线)
.如果结束
.如果真 (是否为空 (是否阶梯线图) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].step”, , , , 是否阶梯线图)
.如果真结束
.如果真 (是否为空 (是否区域填充) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle.normal”, “”)
.如果真结束
.如果真 (添加标注点_最小值 或 添加标注点_最大值 或 添加标注点_平均值)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data”, “{}”)
    计数器 ＝ json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data”) － 1
    .如果真 (是否为空 (添加标注点_最大值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “max”)
    .如果真结束
    .如果真 (是否为空 (添加标注点_最小值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “min”)
    .如果真结束
    .如果真 (是否为空 (添加标注点_平均值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “average”)
    .如果真结束

.如果真结束
.如果真 (添加标线_最小值 或 添加标线_最大值 或 添加标线_平均值)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data”, “{}”)
    计数器 ＝ json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data”) － 1
    .如果真 (是否为空 (添加标线_最大值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “max”)
    .如果真结束
    .如果真 (是否为空 (添加标线_最小值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “min”)
    .如果真结束
    .如果真 (是否为空 (添加标线_平均值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “average”)
    .如果真结束

.如果真结束
.如果真 (是否为空 (是否显示文字标签) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 是否显示文字标签)
.如果真结束


.子程序 添加图形数据_柱图, , 公开, 添加一组柱图。多组柱图时请重复调用添加。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 名称, 文本型
.参数 数据组, 文本型, , 数据组。格式为：“[10,15,64,24...]”，强烈建议由“创建JSON数组()”生成。
.参数 是否显示文字标签, 逻辑型, 可空
.参数 添加标注点_最小值, 逻辑型, 可空
.参数 添加标注点_最大值, 逻辑型, 可空
.参数 添加标注点_平均值, 逻辑型, 可空
.参数 添加标线_最小值, 逻辑型, 可空
.参数 添加标线_最大值, 逻辑型, 可空
.参数 添加标线_平均值, 逻辑型, 可空
.局部变量 索引, 整数型
.局部变量 计数器, 整数型

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 名称)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “bar”)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.如果真 (添加标注点_最小值 或 添加标注点_最大值 或 添加标注点_平均值)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data”, “{}”)
    计数器 ＝ json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data”) － 1
    .如果真 (是否为空 (添加标注点_最大值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “max”)
    .如果真结束
    .如果真 (是否为空 (添加标注点_最小值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “min”)
    .如果真结束
    .如果真 (是否为空 (添加标注点_平均值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markPoint.data[” ＋ 到文本 (计数器) ＋ “].type”, , “average”)
    .如果真结束

.如果真结束
.如果真 (添加标线_最小值 或 添加标线_最大值 或 添加标线_平均值)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data”, “{}”)
    计数器 ＝ json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data”) － 1
    .如果真 (是否为空 (添加标线_最大值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “max”)
    .如果真结束
    .如果真 (是否为空 (添加标线_最小值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “min”)
    .如果真结束
    .如果真 (是否为空 (添加标线_平均值) ＝ 假)
        json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].markLine.data[” ＋ 到文本 (计数器) ＋ “].type”, , “average”)
    .如果真结束

.如果真结束
.如果真 (是否为空 (是否显示文字标签) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 是否显示文字标签)
.如果真结束


.子程序 添加图形数据_饼图, , 公开, 添加一组饼图。多组饼图时请重复调用添加。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 名称组, 文本型, 数组, 名称组。注意：名称组内容顺序与个数请与数据组一一对应。
.参数 数据组, 双精度小数型, 数组, 数据组。注意：数据组内容顺序与个数请与名称组一一对应。
.参数 是否显示文字标签, 逻辑型, 可空
.参数 是否显示引导标线, 逻辑型, 可空
.参数 是否南丁格尔图, 文本型, 可空, 默认为不显示：false，可选“radius”/“area”。“radius”：圆心角展示数据百分比，半径展现数据大小；“area”：圆心角相同，仅通过半径展现数据大小。
.参数 圆心坐标_横, 文本型, 可空, 默认为：“50%”。可选像素值或百分比，例如："350"或"25%"。注意：请与纵坐标同时设置，否则将忽略。
.参数 圆心坐标_纵, 文本型, 可空, 默认为：“50%”。可选像素值或百分比，例如："350"或"25%"。注意：请与横坐标同时设置，否则将忽略。
.参数 饼图半径_内半径, 文本型, 可空, 默认为：“0”。可选像素值或百分比，例如："50"或"50%"。注意：请与外半径同时设置，否则将忽略。
.参数 饼图半径_外半径, 文本型, 可空, 默认为：“75%”。可选像素值或百分比，例如：“80”或“90%”。注意：请与内半径同时设置，否则将忽略。
.局部变量 索引, 整数型
.局部变量 参数, 文本型
.局部变量 计数器, 整数型

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “pie”)
.计次循环首 (取数组成员数 (名称组), 计数器)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 名称组 [计数器])
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, , , 数据组 [计数器])
.计次循环尾 ()
.如果真 (是否为空 (是否显示文字标签) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 是否显示文字标签)
.如果真结束
.如果真 (是否为空 (是否显示引导标线) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].labelLine.normal.show”, , , , 是否显示引导标线)
.如果真结束
.如果真 (是否为空 (是否南丁格尔图) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].roseType”, , 是否南丁格尔图)
.如果真结束
.如果真 (是否为空 (圆心坐标_横) ＝ 假 且 是否为空 (圆心坐标_纵) ＝ 假)
    参数 ＝ “[参数1,参数2]”
    .如果 (寻找文本 (圆心坐标_横, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数1”, “'” ＋ 圆心坐标_横 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数1”, 圆心坐标_横, , , 真)
    .如果结束
    .如果 (寻找文本 (圆心坐标_纵, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数2”, “'” ＋ 圆心坐标_纵 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数2”, 圆心坐标_纵, , , 真)
    .如果结束
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].center”, 参数)
.如果真结束
.如果真 (是否为空 (饼图半径_内半径) ＝ 假 且 是否为空 (饼图半径_外半径) ＝ 假)
    参数 ＝ “[参数1,参数2]”
    .如果 (寻找文本 (饼图半径_内半径, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数1”, “'” ＋ 饼图半径_内半径 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数1”, 饼图半径_内半径, , , 真)
    .如果结束
    .如果 (寻找文本 (饼图半径_外半径, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数2”, “'” ＋ 饼图半径_外半径 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数2”, 饼图半径_外半径, , , 真)
    .如果结束
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].radius”, 参数)
.如果真结束


.子程序 添加图形数据_雷达图, , 公开, 添加雷达图数据。默认支持添加三组数据，请不要重复调用本参数，如需添加更多数据请使用json类手动创建。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 坐标系_名称组, 文本型, 数组, 坐标系各维度名称组。数据组实际显示维度将由坐标系名称组成员数限制。注意：本参数成员数需与最大值组成员数相同。
.参数 坐标系_最大值组, 双精度小数型, 数组, 坐标系的最大值组。数据组实际显示维度将由坐标系名称组成员数限制。注意：本参数成员数需与名称组成员数相同。
.参数 数据组1_名称, 文本型, , 名称
.参数 数据组1_数据, 双精度小数型, 数组, 实际数组组。数据组实际显示维度将由坐标系名称组成员数限制。
.参数 数据组2_名称, 文本型, 可空, 可选。
.参数 数据组2_数据, 双精度小数型, 可空 数组, 可选。格式参考数据组1.
.参数 数据组3_名称, 文本型, 可空, 可选。
.参数 数据组3_数据, 双精度小数型, 可空 数组, 可选。格式参考数据组1.
.参数 坐标系类型_多边形或圆形, 逻辑型, 可空, 默认为假=自适应多边形。为真=圆形。
.参数 是否开启区域填充, 逻辑型, 可空, 开启全部区域填充。
.局部变量 索引, 整数型
.局部变量 计数器, 整数型
.局部变量 参数, 文本型

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
.如果真 (坐标系类型_多边形或圆形)
    json.置新值 (“radar.shape”, , “circle”)
.如果真结束
.如果 (取数组成员数 (坐标系_名称组) ≥ 取数组成员数 (坐标系_最大值组))
    .计次循环首 (取数组成员数 (坐标系_名称组), 计数器)
        json.数组_加入成员 (“radar.indicator”, “{}”)
        json.置新值 (“radar.indicator[” ＋ 到文本 (json.数组_取长度 (“radar.indicator”) － 1) ＋ “].name”, , 坐标系_名称组 [计数器])
        json.置新值 (“radar.indicator[” ＋ 到文本 (json.数组_取长度 (“radar.indicator”) － 1) ＋ “].max”, , , 坐标系_最大值组 [计数器])
    .计次循环尾 ()
.否则
    .计次循环首 (取数组成员数 (坐标系_最大值组), 计数器)
        json.数组_加入成员 (“radar.indicator”, “{}”)
        json.置新值 (“radar.indicator[” ＋ 到文本 (json.数组_取长度 (“radar.indicator”) － 1) ＋ “].name”, , 坐标系_名称组 [计数器])
        json.置新值 (“radar.indicator[” ＋ 到文本 (json.数组_取长度 (“radar.indicator”) － 1) ＋ “].max”, , , 坐标系_最大值组 [计数器])
    .计次循环尾 ()
.如果结束
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “radar”)
.如果真 (是否开启区域填充)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle.normal”, “{}”)
.如果真结束
json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 数据组1_名称)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, 创建JSON数组 (, 数据组1_数据))
.如果真 (是否为空 (数据组2_名称) ＝ 假 且 是否为空 (数据组2_数据) ＝ 假)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 数据组2_名称)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, 创建JSON数组 (, 数据组2_数据))
.如果真结束
.如果真 (是否为空 (数据组3_名称) ＝ 假 且 是否为空 (数据组3_数据) ＝ 假)
    json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 数据组3_名称)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, 创建JSON数组 (, 数据组3_数据))
.如果真结束


.子程序 开启或关闭鼠标提示组件, , 公开
.参数 json, eCharts_JSON类, 参考
.参数 开启还是关闭, 逻辑型
.参数 触发类型_数据项或坐标轴, 逻辑型, 可空, 默认为假=数据项"tiem"，真=坐标轴"axis"。数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。
.参数 坐标指示器类型, 文本型, 可空, 默认为直线指示器"line"，可选常量：#坐标指示器类型_***。

json.置新值 (“tooltip.show”, , , , 开启还是关闭)
.如果 (触发类型_数据项或坐标轴)
    json.置新值 (“tooltip.trigger”, , “axis”)
.否则
    json.置新值 (“tooltip.trigger”, , “item”)
.如果结束
.如果真 (是否为空 (坐标指示器类型) ＝ 假)
    json.置新值 (“tooltip.axisPointer.type”, , 坐标指示器类型)
.如果真结束


.子程序 添加图形数据_仪表盘, , 公开, 添加一组仪表盘。多个仪表盘时请重复调用添加。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 名称, 文本型, 可空
.参数 数值, 双精度小数型
.参数 单位, 文本型, 可空
.参数 半径百分比, 整数型, 可空, 仪表盘半径，可以是相对于容器高宽中较小的一项的一半的百分比。
.参数 位置横坐标百分比, 整数型, 可空, 默认50，必须与纵坐标同时设置。
.参数 位置纵坐标百分比, 整数型, 可空, 默认50，必须与横坐标同时设置。
.参数 刻度盘起始角度, 整数型, 可空, 默认为225，圆心正右手侧为0度，正上方为90度，正左手侧为180度。
.参数 刻度盘结束角度, 整数型, 可空, 默认为-45，圆心 正右手侧为0度，正上方为90度，正左手侧为180度。
.参数 刻度盘最小值, 双精度小数型, 可空, 默认为0
.参数 刻度盘最大值, 双精度小数型, 可空, 默认为100
.参数 刻度盘分段, 双精度小数型, 可空, 默认为10
.参数 是否显示实际数值, 逻辑型, 可空, 默认真=显示，假=隐藏。
.参数 刻度盘分段颜色, 分段颜色, 可空 数组, 手动指定分段颜色。
.局部变量 索引, 整数型
.局部变量 参数, 文本型
.局部变量 计数器, 整数型
.局部变量 temp, eCharts_JSON类

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “gauge”)
.如果真 (是否为空 (单位) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].detail.formatter”, , “{value}” ＋ 单位)
.如果真结束
json.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, , , 数值)
.如果真 (是否为空 (名称) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (json.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 名称)
.如果真结束
.如果真 (是否为空 (半径百分比) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].radius”, , 到文本 (半径百分比) ＋ “%”)
.如果真结束
.如果真 (是否为空 (位置横坐标百分比) ＝ 假 且 是否为空 (位置纵坐标百分比) ＝ 假)
    参数 ＝ “['” ＋ 到文本 (位置横坐标百分比) ＋ “%','” ＋ 到文本 (位置纵坐标百分比) ＋ “%']”
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].center”, 参数)
.如果真结束
.如果真 (是否为空 (刻度盘起始角度) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].startAngle”, , , 刻度盘起始角度)
.如果真结束
.如果真 (是否为空 (刻度盘结束角度) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].endAngle”, , , 刻度盘结束角度)
.如果真结束
.如果真 (是否为空 (刻度盘最小值) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].min”, , , 刻度盘最小值)
.如果真结束
.如果真 (是否为空 (刻度盘最大值) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].max”, , , 刻度盘最大值)
.如果真结束
.如果真 (是否为空 (刻度盘分段) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 刻度盘分段)
.如果真结束
.如果真 (是否为空 (是否显示实际数值) ＝ 假)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].detail.show”, , , , 是否显示实际数值)
.如果真结束
' json.置新值 (“series[0].axisLine.lineStyle.color”, “[[0.2, '#E43F3D'],[0.4, '#E98E2C'],[0.6, '#DDBD4D'],[0.8, '#7CBB55'],[1, '#9CD6CE']]”)
.如果真 (是否为空 (刻度盘分段颜色) ＝ 假)
    temp.解析 (“[]”)
    .计次循环首 (取数组成员数 (刻度盘分段颜色), 计数器)
        temp.数组_加入成员 (“”, “[” ＋ 到文本 (刻度盘分段颜色 [计数器].分段位置 ÷ 100) ＋ “,'” ＋ 刻度盘分段颜色 [计数器].颜色 ＋ “']”)
    .计次循环尾 ()
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”, temp.取代码 ())
.如果真结束


.子程序 添加图形数据_K线, , 公开, 添加股票K线图形。
.参数 json, eCharts_JSON类, 参考, 如果使用其他方式生成的json请先使用模块内置json类.解析()
.参数 数据组, K线数据格式, 数组, K线数据组。
.参数 均线天数MA, 文本型, 可空, 为空则不显示，也支持多个，以符号“+”分割，例如：“5+10+20+30”，计算价格均线将影响K线生成时间（大约增加10%~30%）
.局部变量 临时小数数组, 双精度小数型, , "0"
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 MA数组, 整数型, , "0"
.局部变量 索引, 整数型
.局部变量 计数器, 整数型
.局部变量 temp, eCharts_JSON类

.如果真 (是否为空 (均线天数MA) ＝ 假)
    临时文本数组 ＝ 分割文本 (均线天数MA, “+”, )
    .计次循环首 (取数组成员数 (临时文本数组), 计数器)
        .如果真 (到整数 (临时文本数组 [计数器]) ＞ 0)
            加入成员 (MA数组, 到整数 (临时文本数组 [计数器]))
        .如果真结束

    .计次循环尾 ()
.如果真结束

temp.解析 (“[]”)
.计次循环首 (取数组成员数 (数据组), 计数器)
    清除数组 (临时小数数组)
    加入成员 (临时小数数组, 数据组 [计数器].开盘open)
    加入成员 (临时小数数组, 数据组 [计数器].收盘close)
    加入成员 (临时小数数组, 数据组 [计数器].最低lowest)
    加入成员 (临时小数数组, 数据组 [计数器].最高highest)
    temp.数组_加入成员 (“”, 创建JSON数组 (, 临时小数数组))

.计次循环尾 ()

json.数组_加入成员 (“series”, “{}”)
索引 ＝ json.数组_取长度 (“series”) － 1
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , “日K”)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “candlestick”)
json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, temp.取代码 ())

.计次循环首 (取数组成员数 (MA数组), 计数器)
    json.数组_加入成员 (“series”, “{}”)
    索引 ＝ json.数组_取长度 (“series”) － 1
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , “MA” ＋ 到文本 (MA数组 [计数器]))
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “line”)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 计算_K线图价格均线MA (数据组, MA数组 [计数器]))
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 真)
    json.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.opacity”, , , 0.5)
.计次循环尾 ()

.子程序 添加图形数据_词云图, , 公开, 添加词云图。
.参数 json, eCharts_JSON类, 参考
.参数 词条名称组, 文本型, 数组, 名称组内容与数据组必须一一对应。
.参数 词条数据组, 整数型, 数组, 名称组内容与数据组必须一一对应。
.参数 词条随机颜色, 逻辑型, 可空, 可空，默认开启。
.参数 词条阴影, 逻辑型, 可空, 可空，默认开启
.参数 词条间隔大小, 整数型, 可空, 可空，默认20。
.参数 词条尺寸范围_最小, 整数型, 可空, 可空，默认12。词条随机尺寸的范围最小值。
.参数 词条尺寸范围_最大, 整数型, 可空, 可空，默认50。词条随机尺寸的范围最大值。
.参数 词条旋转角度范围_最小, 整数型, 可空, 可空，默认0（不旋转）。词条随机旋转角度的范围最小值。
.参数 词条旋转角度范围_最大, 整数型, 可空, 可空，默认0（不旋转）。词条随机旋转角度的范围最大值。
.局部变量 i, 整数型
.局部变量 次数, 整数型
.局部变量 temp_json, eCharts_JSON类

json.解析 ()
json.置新值 (“series[0].type”, , “wordCloud”)
.如果 (是否为空 (词条间隔大小))
    json.置新值 (“series[0].gridSize”, , , 20)
.否则
    json.置新值 (“series[0].gridSize”, , , 词条间隔大小)
.如果结束
.如果 (是否为空 (词条尺寸范围_最小))
    json.置新值 (“series[0].sizeRange[0]”, , , 12)
.否则
    json.置新值 (“series[0].sizeRange[0]”, , , 词条尺寸范围_最小)
.如果结束
.如果 (是否为空 (词条尺寸范围_最大))
    json.置新值 (“series[0].sizeRange[1]”, , , 50)
.否则
    json.置新值 (“series[0].sizeRange[1]”, , , 词条尺寸范围_最大)
.如果结束
.如果 (是否为空 (词条旋转角度范围_最小))
    json.置新值 (“series[0].rotationRange[0]”, , , 0)
.否则
    json.置新值 (“series[0].rotationRange[0]”, , , 词条旋转角度范围_最小)
.如果结束
.如果 (是否为空 (词条旋转角度范围_最大))
    json.置新值 (“series[0].rotationRange[1]”, , , 0)
.否则
    json.置新值 (“series[0].rotationRange[1]”, , , 词条旋转角度范围_最大)
.如果结束
.如果 (取数组成员数 (词条数据组) ＜ 取数组成员数 (词条名称组))
    次数 ＝ 取数组成员数 (词条数据组)
.否则
    次数 ＝ 取数组成员数 (词条名称组)
.如果结束
.如果真 (是否为空 (词条阴影) 或 词条阴影)
    json.置新值 (“series[0].textStyle.emphasis.shadowBlur”, , , 10)
    json.置新值 (“series[0].textStyle.emphasis.shadowColor”, , “#333”)
.如果真结束
置随机数种子 (取小时 (取现行时间 ()) × 取秒 (取现行时间 ()))
.计次循环首 (次数, i)
    temp_json.解析 ()
    temp_json.置新值 (“name”, , 词条名称组 [i])
    temp_json.置新值 (“value”, , , 词条数据组 [i])
    temp_json.置新值 (“textStyle.emphasis.color”, , “red”)
    .如果真 (是否为空 (词条随机颜色) 或 词条随机颜色)
        temp_json.置新值 (“textStyle.normal.color”, , “rgb(” ＋ 到文本 (取随机数 (0, 255)) ＋ “,” ＋ 到文本 (取随机数 (0, 255)) ＋ “,” ＋ 到文本 (取随机数 (0, 255)) ＋ “)”)
    .如果真结束
    json.数组_加入成员 (“series[0].data”, temp_json.取代码 ())
.计次循环尾 ()


.子程序 添加图形数据_关系图, , 公开, 添加关系图。
.参数 json, eCharts_JSON类, 参考
.参数 关系节点组, 关系节点, 数组
.参数 对应关系组, 对应关系, 数组
.局部变量 分类组, 文本型, , "0"
.局部变量 分类编号, 文本型, , "0"
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 是否存在, 逻辑型

json.解析 ()
json.置新值 (“series”, “[]”)
json.置新值 (“series[0].type”, , “graph”)
json.置新值 (“series[0].layout”, , “force”)
json.置新值 (“series[0].symbolSize”, , , 45)
json.置新值 (“series[0].focusNodeAdjacency”, , , , 真)
json.置新值 (“series[0].roam”, , , , 真)
json.置新值 (“series[0].draggable”, , , , 真)
json.置新值 (“series[0].label.normal.show”, , , , 真)
json.置新值 (“series[0].label.normal.textStyle.fontSize”, , , 12)
json.置新值 (“series[0].force.repulsion”, , , 1000)
json.置新值 (“series[0].edgeSymbolSize[0]”, , , 4)
json.置新值 (“series[0].edgeSymbolSize[1]”, , , 50)
json.置新值 (“series[0].edgeLabel.normal.show”, , , , 真)
json.置新值 (“series[0].edgeLabel.normal.textStyle.fontSize”, , , 10)
json.置新值 (“series[0].edgeLabel.normal.formatter”, , “{c}”)
json.置新值 (“series[0].lineStyle.normal.opacity”, , , 0.9)
json.置新值 (“series[0].lineStyle.normal.width”, , , 1)
json.置新值 (“series[0].lineStyle.normal.curveness”, , , 0)
.计次循环首 (取数组成员数 (关系节点组), 计数器1)
    是否存在 ＝ 假
    .计次循环首 (取数组成员数 (分类组), 计数器2)
        .如果真 (分类组 [计数器2] ＝ 关系节点组 [计数器1].节点名称)
            是否存在 ＝ 真
        .如果真结束

    .计次循环尾 ()
    .如果真 (是否存在 ＝ 假)
        加入成员 (分类组, 关系节点组 [计数器1].节点名称)
    .如果真结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分类组), 计数器1)
    json.置新值 (“series[0].categories[” ＋ 到文本 (计数器1 － 1) ＋ “].name”, , 分类组 [计数器1])
.计次循环尾 ()
.计次循环首 (取数组成员数 (关系节点组), 计数器1)
    json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].name”, , 关系节点组 [计数器1].节点名称)
    .如果真 (关系节点组 [计数器1].节点数值 ≠ “”)
        json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].value”, , , 到数值 (关系节点组 [计数器1].节点名称))
    .如果真结束
    .如果真 (关系节点组 [计数器1].节点样式 ≠ “”)
        .判断开始 (关系节点组 [计数器1].节点样式 ＝ “1”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “circle”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “2”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “rect”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “3”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “roundRect”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “4”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “triangle”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “5”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “diamond”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “6”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “pin”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “7”)
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “arrow”)
        .默认
            json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , 关系节点组 [计数器1].节点样式)
        .判断结束

    .如果真结束
    .如果 (关系节点组 [计数器1].节点图标大小 ＝ “”)
        json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbolSize”, , , 50)
    .否则
        json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbolSize”, , , 到数值 (关系节点组 [计数器1].节点图标大小))
    .如果结束
    .如果真 (关系节点组 [计数器1].节点是否固定 ＝ “1”)
        json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].fixed”, , , , 真)
    .如果真结束
    .计次循环首 (取数组成员数 (分类组), 计数器2)
        .如果真 (分类组 [计数器2] ＝ 关系节点组 [计数器1].节点名称)
            跳出循环 ()
        .如果真结束

    .计次循环尾 ()
    json.置新值 (“series[0].data[” ＋ 到文本 (计数器1 － 1) ＋ “].category”, , , 计数器2 － 1)
.计次循环尾 ()
.计次循环首 (取数组成员数 (对应关系组), 计数器1)
    json.置新值 (“series[0].links[” ＋ 到文本 (计数器1 － 1) ＋ “].value”, , 对应关系组 [计数器1].关系名称)
    json.置新值 (“series[0].links[” ＋ 到文本 (计数器1 － 1) ＋ “].source”, , , 对应关系组 [计数器1].关系节点成员编号1 － 1)
    json.置新值 (“series[0].links[” ＋ 到文本 (计数器1 － 1) ＋ “].target”, , , 对应关系组 [计数器1].关系节点成员编号2 － 1)
.计次循环尾 ()

.子程序 添加图形数据_树图, , 公开, 添加树图。
.参数 json, eCharts_JSON类, 参考
.参数 树图json, eCharts_JSON类, , 数据json必须照固定格式，格式请参考示例。

json.解析 (“{}”)
json.置新值 (“series[0].type”, , “tree”)
json.置新值 (“series[0].data”, “[” ＋ 树图json.取代码 () ＋ “]”)  ' 数据json必须照固定格式
json.置新值 (“series[0].top”, , “1%”)
json.置新值 (“series[0].left”, , “7%”)
json.置新值 (“series[0].bottom”, , “1%”)
json.置新值 (“series[0].right”, , “20%”)
json.置新值 (“series[0].symbolSize”, , , 7)
json.置新值 (“series[0].label.normal.position”, , “left”)
json.置新值 (“series[0].label.normal.verticalAlign”, , “middle”)
json.置新值 (“series[0].label.normal.align”, , “right”)
json.置新值 (“series[0].label.normal.fontSize”, , , 9)
json.置新值 (“series[0].leaves.label.normal.position”, , “right”)
json.置新值 (“series[0].leaves.label.normal.verticalAlign”, , “middle”)
json.置新值 (“series[0].leaves.label.normal.align”, , “left”)
json.置新值 (“series[0].expandAndCollapse”, , , , 真)
json.置新值 (“series[0].animationDuration”, , , 550)
json.置新值 (“series[0].animationDurationUpdate”, , , 750)

