.版本 2

.程序集 Echarts

.子程序 页面代码_生成, 文本型, 公开
.参数 CSS代码, 文本型, 可空
.参数 页面主体代码, 文本型, , 可以使用“折线图_创建（）”等生成图形代码。
.参数 引用JS文件, 文本型, 可空, 引用外部JS文件，多个文件用“|”分隔开。（请注意文件路径）
.参数 引用CSS文件, 文本型, 可空, 引用外部CSS文件，多个文件用“|”分隔开。（请注意文件路径）
.参数 编码, 整数型, 可空, 默认为1（utf8），编码：1=utf8，2=GBK。假如使用IE内核浏览框（浏览器）则建议使用GBK编码，如使用其他内核浏览框（如chrome内核，例如wke、CEF等）则建议使用utf8编码（写出文件时也需要转换文件编码为UTF8）
.局部变量 临时文本, 文本型
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 i, 整数型

临时文本 ＝ #HTML_页面初始框架
临时文本 ＝ 子文本替换 (临时文本, “%CSS代码%”, CSS代码, , , 真)
.判断开始 (编码 ＝ 1)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断 (编码 ＝ 2)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “gbk”, , , 真)
.默认
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断结束

临时文本 ＝ 子文本替换 (临时文本, “%主体代码%”, 页面主体代码, , , 真)
临时文本 ＝ 子文本替换 (临时文本, “%Echart代码%”, 编码转换_Utf8到Ansi (#echarts_min), , , 真)
.如果真 (是否为空 (引用JS文件) ＝ 假)
    .如果 (寻找文本 (引用JS文件, “|”, , 假) ＝ -1)
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 引用JS文件, , , 真), , , 真)
    .否则
        临时文本数组 ＝ 分割文本 (引用JS文件, “|”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 临时文本数组 [i], , , 真), , , 真)
        .计次循环尾 ()
    .如果结束

.如果真结束
清除数组 (临时文本数组)
.如果真 (是否为空 (引用CSS文件) ＝ 假)
    .如果 (寻找文本 (引用CSS文件, “|”, , 假) ＝ -1)
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 引用CSS文件, , , 真), , , 真)
    .否则
        临时文本数组 ＝ 分割文本 (引用CSS文件, “|”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 临时文本数组 [i], , , 真), , , 真)
        .计次循环尾 ()
    .如果结束

.如果真结束

.' 如果真 (文件是否存在 (取运行目录 () ＋ “\js\echarts.min.js”) ＝ 假)
    .' 如果真 (文件是否存在 (取运行目录 () ＋ “\js”) ＝ 假)
        ' 创建目录 (取运行目录 () ＋ “\js”)
    .如果真结束
    ' 写到文件 (取运行目录 () ＋ “\js\echarts.min.js”, #echarts_min)
.如果真结束
返回 (临时文本)

.子程序 创建图形, 文本型, 公开, 根据参数‘配置信息’创建指定的图形。
.参数 宽度, 文本型, 可空, 例：300px/100%，默认：100%
.参数 高度, 文本型, 可空, 例：300px/100%，默认：500px
.参数 折线图div块名称, 文本型, 可空, 默认：container1 ，方便使用css布局。
.参数 折线图对象名称, 文本型, 可空, 默认：myChart ，注意：同个页面显示多个折线图且需要用js操作数据，则这个名称必须不能重复，不需要js操作数据的请无视。
.参数 配置信息, 文本型, 可空, 请使用“标准配置_***()”自动创建或者“增改json()”手动创建。留空时将创建空白图形，数据使用js后期加载。
.参数 是否要显示loading等待, 逻辑型, 可空, 默认：假。数据比较多加载慢时可设置显示loading，数据使用js后期加载。
.局部变量 临时文本, 文本型

.如果真 (是否为空 (宽度) 或 删首尾空 (宽度) ＝ “”)
    宽度 ＝ “100%”
.如果真结束
.如果真 (是否为空 (高度) 或 删首尾空 (高度) ＝ “”)
    高度 ＝ “400px”
.如果真结束
.如果真 (是否为空 (折线图div块名称) 或 删首尾空 (折线图div块名称) ＝ “”)
    折线图div块名称 ＝ “container1”
.如果真结束
.如果真 (是否为空 (折线图对象名称) 或 删首尾空 (折线图对象名称) ＝ “”)
    折线图对象名称 ＝ “myChart”
.如果真结束
临时文本 ＝ #HTML_折线图
临时文本 ＝ 子文本替换 (临时文本, “%高度%”, 高度, , , 真)
临时文本 ＝ 子文本替换 (临时文本, “%宽度%”, 宽度, , , 真)
临时文本 ＝ 子文本替换 (临时文本, “%折线图div名称%”, 折线图div块名称, , , 真)
' %折线图对象名称%
临时文本 ＝ 子文本替换 (临时文本, “%折线图对象名称%”, 折线图对象名称, , , 真)
.如果 (是否为空 (配置信息))
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, #Echart空白配置, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, 配置信息, , , 真)
.如果结束
.如果 (是否要显示loading等待)
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, 折线图对象名称 ＋ “.showLoading();”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, “”, , , 真)
.如果结束
返回 (临时文本)


.子程序 标准配置_折线图, 文本型, 公开, 生成标准折线图，返回值的配置内容可使用“增改json（）”详细修改。
.参数 图表主标题, 文本型, 可空, 留空则不显示。
.参数 图表副标题, 文本型, 可空, 留空则不显示。
.参数 X轴数据组, 文本型, 可空 数组, 此为X轴的标尺，此数组内容应与Y轴数据对应
.参数 Y轴数据组, Y轴数据类型, 可空 数组, 为空时可快速显示空坐标轴（提升使用体验），然后可以使用js后期异步加载数据。
.局部变量 json, STJson
.局部变量 root, STJsonValue
.局部变量 标题, STJsonValue
.局部变量 X轴, STJsonValue
.局部变量 Y轴, STJsonValue
.局部变量 鼠标提示, STJsonValue
.局部变量 图例, STJsonValue
.局部变量 Y数据值, STJsonValue
.局部变量 Y数据_单, STJsonValue
.局部变量 Y数据_根, STJsonValue
.局部变量 临时, STJsonValue, , "0"
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 temp, 文本型, , "0"

.如果真 (是否为空 (图表主标题) ＝ 假 且 删首尾空 (图表主标题) ≠ “”)
    标题.Put (“text”, json.CreateStringValue (图表主标题))
.如果真结束
.如果真 (是否为空 (图表副标题) ＝ 假 且 删首尾空 (图表副标题) ≠ “”)
    标题.Put (“subtext”, json.CreateStringValue (图表副标题))
.如果真结束

X轴.Put (“type”, json.CreateStringValue (“category”))  ' category为类目轴，必须通过data设置类目数据，可选：value/category/time/log（数值轴/类目轴/时间轴/对数轴）
X轴.Put (“boundaryGap”, json.CreateBoolValue (真))  ' 两边是否留空白
.计次循环首 (取数组成员数 (X轴数据组), 计数器1)
    Y数据值.Add (json.CreateStringValue (X轴数据组 [计数器1]))
.计次循环尾 ()
X轴.Put (“data”, Y数据值)

Y轴.Put (“type”, json.CreateStringValue (“value”))  ' 等同于X轴的type，可选：value/category/time/log（数值轴/类目轴/时间轴/对数轴）

Y数据_根.Clear ()
.计次循环首 (取数组成员数 (Y轴数据组), 计数器1)
    Y数据值.Clear ()
    Y数据_单.Clear ()
    .计次循环首 (取数组成员数 (Y轴数据组 [计数器1].数据组), 计数器2)
        Y数据值.Add (json.CreateDoubleValue (到数值 (Y轴数据组 [计数器1].数据组 [计数器2])))
    .计次循环尾 ()
    Y数据_单.Put (“data”, Y数据值)
    Y数据_单.Put (“name”, json.CreateStringValue (Y轴数据组 [计数器1].名称))
    Y数据_单.Put (“type”, json.CreateStringValue (Y轴数据组 [计数器1].类型))
    Y数据_单.Put (“smooth”, json.CreateBoolValue (Y轴数据组 [计数器1].是否平滑曲线))
    重定义数组 (临时, 假, 2)
    临时 [2].Add (json.CreateNullValue ())
    临时 [1].Put (“normal”, 临时 [2])
    ' Y数据_单.Put (“areaStyle”, 临时 [1])
    Y数据_根.Add (Y数据_单)
.计次循环尾 ()

鼠标提示.Put (“show”, json.CreateBoolValue (真))
鼠标提示.Put (“trigger”, json.CreateStringValue (“item”))

图例.Put (“show”, json.CreateBoolValue (真))
Y数据值.Clear ()
.计次循环首 (Y数据_根.Size (), 计数器1)
    Y数据值.Add (json.CreateStringValue (Y数据_根.GetAt (计数器1).Get (“name”).AsString ()))
.计次循环尾 ()
图例.Put (“data”, Y数据值)

.如果真 (删首尾空 (图表主标题 ＋ 图表副标题) ≠ “”)
    root.Put (“title”, 标题)
.如果真结束
root.Put (“xAxis”, X轴)
root.Put (“yAxis”, Y轴)
root.Put (“series”, Y数据_根)
root.Put (“legend”, 图例)
root.Put (“tooltip”, 鼠标提示)

返回 (json.ToJsonString (root))


.子程序 标准配置_K线图, 文本型, 公开, 生成标准K线图，返回值的配置内容可使用“增改json（）”详细修改。
.参数 图表主标题, 文本型, 可空, 留空则不显示。
.参数 图表副标题, 文本型, 可空, 留空则不显示。
.参数 数据组, K线数据格式, 数组, 数据格式：日期，开盘(open)，收盘(close)，最低(lowest)，最高(highest)
.参数 均线天数MA, 文本型, 可空, 为空则不显示，也支持多个，以符号“+”分割，例如：“5+10+20+30”
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 temp1, 文本型, , "0"
.局部变量 temp2, 文本型
.局部变量 temp3, 双精度小数型, , "0"
.局部变量 option, 文本型
.局部变量 MA数组, 整数型, , "0"

.如果真 (是否为空 (均线天数MA) ＝ 假)
    temp1 ＝ 分割文本 (均线天数MA, “+”, )
    .计次循环首 (取数组成员数 (temp1), 计数器1)
        .如果真 (到整数 (temp1 [计数器1]) ＞ 0)
            加入成员 (MA数组, 到整数 (temp1 [计数器1]))
        .如果真结束

    .计次循环尾 ()
    清除数组 (temp1)
    加入成员 (temp1, “日K”)
    .计次循环首 (取数组成员数 (MA数组), 计数器1)
        加入成员 (temp1, “MA” ＋ 到文本 (MA数组 [计数器1]))
    .计次循环尾 ()
.如果真结束
' == 标题组件
.如果真 (是否为空 (图表主标题) ＝ 假 且 删首尾空 (图表主标题) ≠ “”)
    option ＝ 增改json (option, “title.text”, 图表主标题, , , , , )
.如果真结束
.如果真 (是否为空 (图表副标题) ＝ 假 且 删首尾空 (图表副标题) ≠ “”)
    option ＝ 增改json (option, “title.subtext”, 图表副标题, , , , , )
.如果真结束

' == 鼠标提示
option ＝ 增改json (option, “tooltip.trigger”, “axis”, , , , , )
option ＝ 增改json (option, “tooltip.axisPointer”, , , , , 增改json (“”, “type”, “line”, , , , , ), )

' == 图例
option ＝ 增改json (option, “legend.data”, , , , 创建json数组 (temp1, , ), , )

' == 网格
option ＝ 增改json (option, “grid.left”, “10%”, , , , , )
option ＝ 增改json (option, “grid.right”, “10%”, , , , , )
option ＝ 增改json (option, “grid.bottom”, “15%”, , , , , )

' == X轴
option ＝ 增改json (option, “xAxis.type”, “category”, , , , , )
option ＝ 增改json (option, “xAxis.scale”, , 真, , , , )
option ＝ 增改json (option, “xAxis.boundaryGap”, , 假, , , , )
option ＝ 增改json (option, “xAxis.axisLine”, , , , , 增改json (“”, “onZero”, , 假, , , , ), )
option ＝ 增改json (option, “xAxis.splitLine”, , , , , 增改json (“”, “show”, , 假, , , , ), )
option ＝ 增改json (option, “xAxis.splitNumber”, , , 20, , , )
option ＝ 增改json (option, “xAxis.min”, “dataMin”, , , , , )
option ＝ 增改json (option, “xAxis.max”, “dataMax”, , , , , )
清除数组 (temp1)
.计次循环首 (取数组成员数 (数据组), 计数器1)
    加入成员 (temp1, 数据组 [计数器1].日期)
.计次循环尾 ()
option ＝ 增改json (option, “xAxis.data”, , , , 创建json数组 (temp1, , ), , )

' == Y轴
option ＝ 增改json (option, “yAxis.scale”, , 真, , , , )
option ＝ 增改json (option, “yAxis.splitArea”, , , , , 增改json (“”, “show”, , 真, , , , ), )

' == 缩放控制条
重定义数组 (temp1, 假, 2)
temp1 [1] ＝ 增改json (temp1 [1], “type”, “inside”, , , , , )
temp1 [1] ＝ 增改json (temp1 [1], “start”, , , 50, , , )
temp1 [1] ＝ 增改json (temp1 [1], “end”, , , 100, , , )
temp1 [2] ＝ 增改json (temp1 [2], “show”, , 真, , , , )
temp1 [2] ＝ 增改json (temp1 [2], “type”, “slider”, , , , , )
temp1 [2] ＝ 增改json (temp1 [2], “y”, “80%”, , , , , )
temp1 [2] ＝ 增改json (temp1 [2], “start”, , , 50, , , )
temp1 [2] ＝ 增改json (temp1 [2], “end”, , , 100, , , )
option ＝ 增改json (option, “dataZoom”, , , , 创建json数组 (temp1, , ), , )

' == 数据组
' 重定义数组 (temp1, 假, 2)
' temp1 [1] ＝ 增改json (temp1 [1], “label.normal.show”, , 假, , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “label.emphasis.show”, , 假, , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “name”, “from lowest to highest”, , , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “type”, “min”, , , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “valueDim”, “lowest”, , , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “symbol”, “circle”, , , , , )
' temp1 [1] ＝ 增改json (temp1 [1], “symbolSize”, , , 10, , , )
' temp1 [2] ＝ 增改json (temp1 [2], “label.normal.show”, , 假, , , , )
' temp1 [2] ＝ 增改json (temp1 [2], “label.emphasis.show”, , 假, , , , )
' temp1 [2] ＝ 增改json (temp1 [2], “type”, “max”, , , , , )
' temp1 [2] ＝ 增改json (temp1 [2], “valueDim”, “highest”, , , , , )
' temp1 [2] ＝ 增改json (temp1 [2], “symbol”, “circle”, , , , , )
' temp1 [2] ＝ 增改json (temp1 [2], “symbolSize”, , , 10, , , )

' == 数据组
清除数组 (temp1)
.计次循环首 (取数组成员数 (数据组), 计数器1)
    清除数组 (temp3)
    加入成员 (temp3, 数据组 [计数器1].开盘open)
    加入成员 (temp3, 数据组 [计数器1].收盘close)
    加入成员 (temp3, 数据组 [计数器1].最低lowest)
    加入成员 (temp3, 数据组 [计数器1].最高highest)
    加入成员 (temp1, 创建json数组 (, temp3, ))
.计次循环尾 ()
temp2 ＝ 增改json (“”, “data”, , , , 创建json数组 (temp1, , ), , )  ' ?????????
重定义数组 (temp1, 假, 取数组成员数 (MA数组))
temp1 [1] ＝ 增改json (temp2, “name”, “日K”, , , , , )
temp1 [1] ＝ 增改json (temp1 [1], “type”, “candlestick”, , , , , )

.计次循环首 (取数组成员数 (MA数组), 计数器1)
    temp2 ＝ “”
    temp2 ＝ 增改json (temp2, “name”, “MA” ＋ 到文本 (MA数组 [计数器1]), , , , , )
    temp2 ＝ 增改json (temp2, “type”, “line”, , , , , )
    temp2 ＝ 增改json (temp2, “data”, , , , 计算价格均线MA (数据组, MA数组 [计数器1]), , )  ' ?????????
    temp2 ＝ 增改json (temp2, “smooth”, , 真, , , , )
    temp2 ＝ 增改json (temp2, “lineStyle.normal.opacity”, , , 0.5, , , )
    加入成员 (temp1, temp2)
.计次循环尾 ()
option ＝ 增改json (option, “series”, , , , 创建json数组 (temp1, , ), , )


返回 (option)


.子程序 计算价格均线MA, 文本型
.参数 数据组, K线数据格式, 数组
.参数 天数, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 计数器3, 双精度小数型
.局部变量 结果数组, 双精度小数型, , "0"
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 临时文本, 文本型

.计次循环首 (取数组成员数 (数据组), 计数器1)
    .如果真 (计数器1 ＜ 天数 ＋ 1)
        加入成员 (临时文本数组, “-”)
        到循环尾 ()
    .如果真结束
    计数器3 ＝ 0
    .计次循环首 (天数, 计数器2)
        计数器3 ＝ 计数器3 ＋ 数据组 [计数器1 － 计数器2 ＋ 1].收盘close
    .计次循环尾 ()
    加入成员 (结果数组, 计数器3 ÷ 天数)
.计次循环尾 ()
临时文本 ＝ 创建json数组 (临时文本数组, , )
临时文本 ＝ 取文本左边 (临时文本, 取文本长度 (临时文本) － 1) ＋ “,” ＋ 取文本右边 (创建json数组 (, 结果数组, ), 取文本长度 (创建json数组 (, 结果数组, )) － 1)
返回 (临时文本)

.子程序 增改json, 文本型, 公开, 增加或修改json中的内容。
.参数 原json, 文本型, 可空, json
.参数 操作路径, 文本型, , 类似“a.b.c"，英文句点隔开
.参数 文本值, 文本型, 可空, 多选一；...
.参数 逻辑值, 逻辑型, 可空, 多选一；真/假
.参数 数值, 双精度小数型, 可空, 多选一；数字
.参数 数组内容, 文本型, 可空, 多选一；中括号“[ ]”，可用 创建json数组（） 生成。
.参数 对象内容, 文本型, 可空, 多选一；大括号“{ }”，可用 增改json（） 生成
.参数 空NULL, 整数型, 可空, 多选一；1 = null
.局部变量 json, STJson
.局部变量 root, STJsonValue
.局部变量 path, STJsonValue, , "0"
.局部变量 resule, STJsonParseResult
.局部变量 路径, 文本型, , "0"
.局部变量 i, 整数型
.局部变量 位置, 整数型
.局部变量 是否存在, 逻辑型
.局部变量 数组json, STJsonValue
.局部变量 对象json, STJsonValue

' 调试输出 (“path = ”, 操作路径, 文本值, 逻辑值)
.判断开始 (是否为空 (数组内容) ＝ 假)
    数组json ＝ json.Parse (数组内容, resule)
    .如果真 (resule.stat ＝ 假)
        信息框 (“函数：增改json（）” ＋ #换行符 ＋ “参数：数组内容，参数内容无效。”, 0, , )
        返回 (“”)
    .如果真结束

.判断 (是否为空 (对象内容) ＝ 假)
    对象json ＝ json.Parse (对象内容, resule)
    .如果真 (resule.stat ＝ 假)
        信息框 (“函数：增改json（）” ＋ #换行符 ＋ “参数：对象内容，参数内容无效。”, 0, , )
        返回 (“”)
    .如果真结束

.默认

.判断结束
root ＝ json.Parse (原json, resule)
路径 ＝ 分割文本 (操作路径, “.”, )
.如果真 (取数组成员数 (路径) ＝ 0)
    返回 (原json)
.如果真结束
重定义数组 (path, 假, 取数组成员数 (路径))
是否存在 ＝ 真
path [1] ＝ root.Get (路径 [1])
.如果真 (path [1].IsNull () ＝ 假)  ' 判断第一级是否存在，=假为已存在
    位置 ＝ 1
    .变量循环首 (2, 取数组成员数 (路径), 1, i)  ' 从第二级开始，将已经存在的数据分级保存到数组中，如果有某一级不存在，则跳出（i为路径的级别，例如：hello.world，world为第2级）
        path [i] ＝ path [i － 1].Get (路径 [i])
        .如果真 (path [i].IsNull ())
            位置 ＝ i － 1
            是否存在 ＝ 假
            跳出循环 ()
        .如果真结束

    .变量循环尾 ()
    .如果真 (是否存在)  ' 所有路径都存在，此处修改现有数据
        ' 调试输出 (取数组成员数 (path), i, json.ToJsonString (path [1], , , ))

        .如果 (i ＝ 2)
            .判断开始 (是否为空 (文本值) ＝ 假)
                root.Put (路径 [1], json.CreateStringValue (文本值))
            .判断 (是否为空 (逻辑值) ＝ 假)
                root.Put (路径 [1], json.CreateBoolValue (逻辑值))
            .判断 (是否为空 (数值) ＝ 假)
                root.Put (路径 [1], json.CreateDoubleValue (数值))
            .判断 (是否为空 (数组内容) ＝ 假)
                root.Put (路径 [1], 数组json)
            .判断 (是否为空 (对象内容) ＝ 假)
                root.Put (路径 [1], 对象json)
            .判断 (是否为空 (空NULL) ＝ 假)
                root.Put (路径 [1], json.CreateNullValue ())
            .默认

            .判断结束

        .否则
            .判断开始 (是否为空 (文本值) ＝ 假)
                path [i － 2].Put (路径 [i － 1], json.CreateStringValue (文本值))
            .判断 (是否为空 (逻辑值) ＝ 假)
                path [i － 2].Put (路径 [i － 1], json.CreateBoolValue (逻辑值))
            .判断 (是否为空 (数值) ＝ 假)
                path [i － 2].Put (路径 [i － 1], json.CreateDoubleValue (数值))
                path [1].SetDouble (数值)
            .判断 (是否为空 (数组内容) ＝ 假)
                path [i － 2].Put (路径 [i － 1], 数组json)
            .判断 (是否为空 (对象内容) ＝ 假)
                path [i － 2].Put (路径 [i － 1], 对象json)
            .判断 (是否为空 (空NULL) ＝ 假)
                path [i － 2].Put (路径 [i － 1], json.CreateNullValue ())
            .默认

            .判断结束

            .变量循环首 (i － 3, 1, -1, i)  ' 循环将修改好的数据一级一级还原回去
                path [i].Put (路径 [i ＋ 1], path [i ＋ 1])
            .变量循环尾 ()
            root.Put (路径 [1], path [1])
        .如果结束

        返回 (json.ToJsonString (root))
    .如果真结束

.如果真结束

' 测试用
.' 计次循环首 (取数组成员数 (path), i)
    ' 输出调试文本 (“当前：” ＋ 到文本 (i) ＋ “，总数：” ＋ 到文本 (取数组成员数 (path)) ＋ #换行符 ＋ #换行符 ＋ json.ToJsonString (path [i], , , ))
.' 计次循环尾 ()

' 路径中第一级或者其中某一级不存在，在此处开始创建
.如果 (取数组成员数 (路径) ＝ 2)
    .判断开始 (是否为空 (文本值) ＝ 假)
        path [1].Put (路径 [2], json.CreateStringValue (文本值))
    .判断 (是否为空 (逻辑值) ＝ 假)
        path [1].Put (路径 [2], json.CreateBoolValue (逻辑值))
    .判断 (是否为空 (数值) ＝ 假)
        path [1].Put (路径 [2], json.CreateDoubleValue (数值))
    .判断 (是否为空 (数组内容) ＝ 假)
        path [1].Put (路径 [2], 数组json)
    .判断 (是否为空 (对象内容) ＝ 假)
        path [1].Put (路径 [2], 对象json)
    .判断 (是否为空 (空NULL) ＝ 假)
        path [1].Put (路径 [2], json.CreateNullValue ())
    .默认

    .判断结束

    root.Put (路径 [1], path [1])

.否则
    位置 ＝ 取数组成员数 (路径)
    .如果 (位置 ＝ 1)
        .判断开始 (是否为空 (文本值) ＝ 假)
            root.Put (路径 [1], json.CreateStringValue (文本值))
        .判断 (是否为空 (逻辑值) ＝ 假)
            root.Put (路径 [1], json.CreateBoolValue (逻辑值))
        .判断 (是否为空 (数值) ＝ 假)
            root.Put (路径 [1], json.CreateDoubleValue (数值))
        .判断 (是否为空 (数组内容) ＝ 假)
            root.Put (路径 [1], 数组json)
        .判断 (是否为空 (对象内容) ＝ 假)
            root.Put (路径 [1], 对象json)
        .判断 (是否为空 (空NULL) ＝ 假)
            root.Put (路径 [1], json.CreateNullValue ())
        .默认

        .判断结束

    .否则
        .判断开始 (是否为空 (文本值) ＝ 假)
            path [位置 － 1].Put (路径 [位置], json.CreateStringValue (文本值))
        .判断 (是否为空 (逻辑值) ＝ 假)
            path [位置 － 1].Put (路径 [位置], json.CreateBoolValue (逻辑值))
        .判断 (是否为空 (数值) ＝ 假)
            path [位置 － 1].Put (路径 [位置], json.CreateDoubleValue (数值))
        .判断 (是否为空 (数组内容) ＝ 假)
            path [位置 － 1].Put (路径 [位置], 数组json)
        .判断 (是否为空 (对象内容) ＝ 假)
            path [位置 － 1].Put (路径 [位置], 对象json)
        .判断 (是否为空 (空NULL) ＝ 假)
            path [位置 － 1].Put (路径 [位置], json.CreateNullValue ())
        .默认

        .判断结束

        ' 测试用
        .' 计次循环首 (取数组成员数 (path), i)
            ' 输出调试文本 (“当前：” ＋ 到文本 (i) ＋ “，总数：” ＋ 到文本 (取数组成员数 (path)) ＋ #换行符 ＋ #换行符 ＋ json.ToJsonString (path [i], , , ))
        .' 计次循环尾 ()

        path [位置 － 2].Put (路径 [位置 － 1], path [位置 － 1])
        .变量循环首 (位置 － 3, 1, -1, i)
            path [i].Put (路径 [i ＋ 1], path [i ＋ 1])
        .变量循环尾 ()
        root.Put (路径 [1], path [1])

    .如果结束

.如果结束

返回 (json.ToJsonString (root))

.子程序 创建json数组, 文本型, 公开
.参数 文本数组, 文本型, 可空 数组
.参数 小数数组, 双精度小数型, 可空 数组
.参数 整数数组, 整数型, 可空 数组
.局部变量 json, STJson
.局部变量 temp, STJsonValue
.局部变量 temp1, STJsonValue
.局部变量 jsonr, STJsonParseResult
.局部变量 i, 整数型

.判断开始 (是否为空 (文本数组) ＝ 假)
    .计次循环首 (取数组成员数 (文本数组), i)
        temp1 ＝ json.Parse (文本数组 [i], jsonr)
        .如果 (jsonr.stat ＝ 真)
            temp.Add (temp1)
        .否则
            temp.Add (json.CreateStringValue (文本数组 [i]))
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (小数数组) ＝ 假)
    .计次循环首 (取数组成员数 (小数数组), i)
        temp.Add (json.CreateDoubleValue (小数数组 [i]))
    .计次循环尾 ()
.判断 (是否为空 (整数数组) ＝ 假)
    .计次循环首 (取数组成员数 (整数数组), i)
        temp.Add (json.CreateLongValue (整数数组 [i]))
    .计次循环尾 ()
.默认

.判断结束
返回 (json.ToJsonString (temp, , , ))

