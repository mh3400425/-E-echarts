.版本 2
.支持库 HtmlView

.程序集 Echarts
.程序集变量 集_图形对象名称, 文本型

.子程序 页面代码_生成, 文本型, 公开
.参数 页面主体代码, 文本型, , 可以使用“折线图_创建（）”等生成图形代码。
.参数 JS代码, 文本型, 可空, 文本js代码。
.参数 CSS代码, 文本型, 可空, 文本css代码。
.参数 引用JS文件, 文本型, 可空, 引用外部JS文件，多个文件用“++”分隔开。例如：“http://www.abc.com/one.js ++ http://www.abc.com/two.js” 或者 “http://www.abc.com/one.js”+ “++” +“http://www.abc.com/two.js”
.参数 引用CSS文件, 文本型, 可空, 引用外部CSS文件，多个文件用“++”分隔开。
.参数 编码, 整数型, 可空, 默认为1（utf8），编码：1=utf8，2=GBK。假如使用IE内核浏览框（浏览器）则建议使用GBK编码，如使用其他内核浏览框（如chrome内核，例如wke、CEF等）则建议使用utf8编码（写出文件时也需要转换文件编码为UTF8）
.局部变量 临时文本, 文本型
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 i, 整数型
.局部变量 临时文本1, 文本型

临时文本 ＝ #HTML_页面初始框架
临时文本 ＝ 子文本替换 (临时文本, “%CSS代码%”, CSS代码, , , 真)
.判断开始 (编码 ＝ 1)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断 (编码 ＝ 2)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “gbk”, , , 真)
.默认
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断结束

临时文本 ＝ 子文本替换 (临时文本, “%主体代码%”, 页面主体代码, , , 真)
.如果真 (是否为空 (JS代码) ＝ 假)
    临时文本 ＝ 子文本替换 (临时文本, “%Echart代码%”, “%Echart代码%</script><script>” ＋ JS代码, , , 真)
.如果真结束

临时文本 ＝ 子文本替换 (临时文本, “%Echart代码%”, 编码转换_Utf8到Ansi (#echarts_min), , , 真)
.如果真 (是否为空 (引用JS文件) ＝ 假)
    .判断开始 (取文本长度 (引用JS文件) ＞ 100 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1)  ' js源代码
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, “<script>” ＋ 引用JS文件 ＋ “</script></head>”, , , 真)
    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “http”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ＝ -1)  ' 引用单个web端js文件
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 引用JS文件, , , 真), , , 真)
    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “http://”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ≠ -1)  ' 引用多个web端js文件
        临时文本数组 ＝ 分割文本 (引用JS文件, “++”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            .如果 (i ＝ 取数组成员数 (临时文本数组))
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i]
            .否则
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i] ＋ #引号 ＋ “charset ='utf-8'></script><script src=” ＋ #引号
            .如果结束

        .计次循环尾 ()
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 临时文本1, , , 真), , , 真)

    .默认
        信息框 (“引用js文件参数不合法！”, 0, , )
    .判断结束

.如果真结束
清除数组 (临时文本数组)
.如果真 (是否为空 (引用CSS文件) ＝ 假)
    .如果 (寻找文本 (引用CSS文件, “++”, , 假) ＝ -1)  ' 引用单个web端js文件
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 引用CSS文件, , , 真), , , 真)

    .否则
        临时文本数组 ＝ 分割文本 (引用CSS文件, “++”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            .如果 (i ＝ 取数组成员数 (临时文本数组))
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i]
            .否则
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i] ＋ #引号 ＋ “><link rel='stylesheet' type='text/css' href=” ＋ #引号
            .如果结束

        .计次循环尾 ()
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 临时文本1, , , 真), , , 真)

    .如果结束

.如果真结束
返回 (临时文本)

.子程序 创建图形, 文本型, 公开, 根据参数‘配置信息’创建指定的图形。
.参数 宽度, 文本型, 可空, 例：300px/100%，默认：100%
.参数 高度, 文本型, 可空, 例：300px/100%，默认：500px
.参数 图形div块名称, 文本型, 可空, 默认：container1 ，方便使用css布局。
.参数 图形对象名称, 文本型, 可空, 默认：myChart ，注意：同个页面显示多个图形且需要用js操作数据，则这个名称必须不能重复，不需要js操作数据的请无视。
.参数 配置信息, 文本型, 可空, 请使用“标准配置_***()”自动创建或者“增改json()”手动创建。留空时将创建空白图形，数据使用js后期加载。
.参数 是否要显示loading等待, 逻辑型, 可空, 默认：假。数据比较多加载慢时可设置显示loading，数据使用js后期加载。
.参数 使用主题, 文本型, 可空, 留空将使用默认主题。可选常量“主题_”开头的6套官方主题，也支持通过官网在线构建主题：http://echarts.baidu.com/theme-builder/ （复制导入生成的js版本主题代码即可）。
.参数 渲染器, 文本型, 可空, 默认：canvas。可选canvas/svg。（SVG渲染器在移动端或者环境稍差时效果可能更好，数据量很大较多交互时可以选用CANVAS渲染器，但不绝对，请根据情况自行测试。）
.局部变量 临时文本, 文本型
.局部变量 主题名, 文本型
.局部变量 x, 整数型

.如果真 (是否为空 (宽度) 或 删首尾空 (宽度) ＝ “”)
    宽度 ＝ “100%”
.如果真结束
.如果真 (是否为空 (高度) 或 删首尾空 (高度) ＝ “”)
    高度 ＝ “400px”
.如果真结束
.如果真 (是否为空 (图形div块名称) 或 删首尾空 (图形div块名称) ＝ “”)
    图形div块名称 ＝ “container1”
.如果真结束
.如果真 (是否为空 (图形对象名称) 或 删首尾空 (图形对象名称) ＝ “”)
    图形对象名称 ＝ “myChart”
.如果真结束
集_图形对象名称 ＝ 图形对象名称

临时文本 ＝ #HTML_折线图
.如果 (是否为空 (使用主题) ＝ 假)
    临时文本 ＝ “<script>” ＋ 使用主题 ＋ “</script>” ＋ 临时文本
    x ＝ 寻找文本 (使用主题, “registerTheme('”, , 假) ＋ 15
    主题名 ＝ 取文本中间 (使用主题, x, 寻找文本 (使用主题, “',”, x, 假) － x)
    临时文本 ＝ 子文本替换 (临时文本, “%主题名%”, “'” ＋ 主题名 ＋ “'”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%主题名%”, “null”, , , 真)
.如果结束

.如果 (是否为空 (渲染器) 或 渲染器 ＝ “”)
    临时文本 ＝ 子文本替换 (临时文本, “%渲染器%”, “canvas”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%渲染器%”, 渲染器, , , 真)
.如果结束

临时文本 ＝ 子文本替换 (临时文本, “%高度%”, 高度, , , 真)
临时文本 ＝ 子文本替换 (临时文本, “%宽度%”, 宽度, , , 真)
临时文本 ＝ 子文本替换 (临时文本, “%折线图div名称%”, 图形div块名称, , , 真)
' %折线图对象名称%
临时文本 ＝ 子文本替换 (临时文本, “%折线图对象名称%”, 图形对象名称, , , 真)
.如果 (是否为空 (配置信息))
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, #Echart空白配置, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, 配置信息, , , 真)
.如果结束
.如果 (是否要显示loading等待)
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, 图形对象名称 ＋ “.showLoading();”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, “”, , , 真)
.如果结束
返回 (临时文本)


.子程序 标准配置_折线图, 文本型, 公开, 生成标准折线图，返回值内容为标准JSON文本。
.参数 图表主标题, 文本型, 可空, 留空则不显示
.参数 图表副标题, 文本型, 可空, 留空则不显示
.参数 X轴数据组, 文本型, 可空 数组, 此为X轴的标尺，此数组内容应与Y轴数据对应
.参数 Y轴数据组, Y轴数据类型, 可空 数组, 为空时可快速显示空坐标轴（提升使用体验），然后可以使用js后期异步加载数据。
.局部变量 json, eCharts_JSON类
.局部变量 temp_文本, 文本型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型

json.解析 (“{}”)

.如果真 (是否为空 (图表主标题) ＝ 假 或 是否为空 (图表副标题) ＝ 假)
    json.置新值 (“title”, “{}”)
    .如果真 (是否为空 (图表主标题) ＝ 假 且 删首尾空 (图表主标题) ≠ “”)
        json.置新值 (“title.text”, , 图表主标题)
    .如果真结束
    .如果真 (是否为空 (图表副标题) ＝ 假 且 删首尾空 (图表副标题) ≠ “”)
        json.置新值 (“title.subtext”, , 图表副标题)
    .如果真结束

.如果真结束
json.置新值 (“xAxis.type”, , “category”)
json.置新值 (“xAxis.boundaryGap”, , , , 真)
json.置新值 (“xAxis.data”, 创建JSON数组 (X轴数据组))

json.置新值 (“yAxis.type”, , “value”)

.计次循环首 (取数组成员数 (Y轴数据组), 计数器1)
    json.数组_加入成员 (“series”, “{}”)
    计数器2 ＝ json.数组_取长度 (“series”) － 1
    json.置新值 (“series[” ＋ 到文本 (计数器2) ＋ “].data”, 创建JSON数组 (, , , Y轴数据组 [计数器1].数据组))
    json.置新值 (“series[” ＋ 到文本 (计数器2) ＋ “].name”, , Y轴数据组 [计数器1].名称)
    json.置新值 (“series[” ＋ 到文本 (计数器2) ＋ “].type”, , Y轴数据组 [计数器1].类型)
    json.置新值 (“series[” ＋ 到文本 (计数器2) ＋ “].smooth”, , , , Y轴数据组 [计数器1].是否平滑曲线)
.计次循环尾 ()

json.置新值 (“legend.show”, , , , 真)
temp_文本 ＝ “”
.计次循环首 (取数组成员数 (Y轴数据组), 计数器1)
    .如果 (计数器1 ＝ 1)
        temp_文本 ＝ #引号 ＋ Y轴数据组 [计数器1].名称 ＋ #引号
    .否则
        temp_文本 ＝ temp_文本 ＋ “,” ＋ #引号 ＋ Y轴数据组 [计数器1].名称 ＋ #引号
    .如果结束

.计次循环尾 ()
json.置新值 (“legend.data”, , , , , temp_文本)

json.置新值 (“tooltip.show”, , , , 真)
json.置新值 (“tooltip.trigger”, , “item”)

返回 (json.取代码 ())


.子程序 计算_K线图价格均线MA, 文本型, 公开, 返回json格式数组
.参数 数据组, K线数据格式, 数组
.参数 天数, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 计数器3, 双精度小数型
.局部变量 结果数组, 双精度小数型, , "0"
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 临时文本, 文本型

.计次循环首 (取数组成员数 (数据组), 计数器1)
    .如果真 (计数器1 ＜ 天数 ＋ 1)
        加入成员 (临时文本数组, “-”)
        到循环尾 ()
    .如果真结束
    计数器3 ＝ 0
    .计次循环首 (天数, 计数器2)
        计数器3 ＝ 计数器3 ＋ 数据组 [计数器1 － 计数器2 ＋ 1].收盘close
    .计次循环尾 ()
    加入成员 (结果数组, 计数器3 ÷ 天数)
.计次循环尾 ()
临时文本 ＝ 创建JSON数组 (临时文本数组)
临时文本 ＝ 取文本左边 (临时文本, 取文本长度 (临时文本) － 1) ＋ “,” ＋ 取文本右边 (创建JSON数组 (, 结果数组), 取文本长度 (创建JSON数组 (, 结果数组)) － 1)
返回 (临时文本)

.子程序 关闭loading动画, , 公开, 关闭指定图形的Loading动画。
.参数 浏览框, 超文本浏览框
.参数 图形对象名称, 文本型, 可空, 单个图形的话此参数可以省略。

.如果 (是否为空 (图形对象名称))
    执行JS代码 (浏览框, 集_图形对象名称 ＋ “.hideLoading()”)
.否则
    执行JS代码 (浏览框, 图形对象名称 ＋ “.hideLoading()”)
.如果结束


.子程序 动态异步更新数据, , 公开, 无需刷新整个页面动态异步更新指定图形数据（仅支持ie内核的超文本浏览框，其他内核浏览框请直接调用js，更简单方便）
.参数 浏览框, 超文本浏览框
.参数 图形对象名称, 文本型, 可空, 单个图形的话此参数可以省略。
.参数 图形配置内容json, 文本型, , 可以使用“增改json()”生成，不怕麻烦不担心写错的也可以自己手写。

.如果 (是否为空 (图形对象名称))
    浏览框.地址 ＝ 将多行js代码转换为单行 (“javascript:” ＋ 集_图形对象名称 ＋ “.setOption(” ＋ 图形配置内容json ＋ “)”)

.否则
    浏览框.地址 ＝ 将多行js代码转换为单行 (“javascript:” ＋ 图形对象名称 ＋ “.setOption(” ＋ 图形配置内容json ＋ “)”)

.如果结束



.子程序 创建JSON数组, 文本型, 公开, 仅返回格式化后的数组内容带中括号：“[ ]”
.参数 文本数组, 文本型, 可空 数组
.参数 小数数组, 双精度小数型, 可空 数组
.参数 整数数组, 整数型, 可空 数组
.参数 强制文本数组, 文本型, 可空 数组, 已经将数值型数组转换为文本数组的（内容已经加过双引号的）请使用这里，例如：Y轴数据类型里的数据组。
.局部变量 计数器, 整数型
.局部变量 最终结果, 文本型

.判断开始 (是否为空 (文本数组) ＝ 假)
    .计次循环首 (取数组成员数 (文本数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ #引号 ＋ 文本数组 [计数器] ＋ #引号
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ #引号 ＋ 文本数组 [计数器] ＋ #引号
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (整数数组) ＝ 假)
    .计次循环首 (取数组成员数 (整数数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 到文本 (整数数组 [计数器])
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 到文本 (整数数组 [计数器])
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (小数数组) ＝ 假)
    .计次循环首 (取数组成员数 (小数数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 到文本 (小数数组 [计数器])
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 到文本 (小数数组 [计数器])
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (强制文本数组) ＝ 假)
    .计次循环首 (取数组成员数 (强制文本数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 强制文本数组 [计数器]
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 强制文本数组 [计数器]
        .如果结束

    .计次循环尾 ()
.默认

.判断结束
返回 (“[” ＋ 最终结果 ＋ “]”)
