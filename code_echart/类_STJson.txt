.版本 2

.程序集 STJson, , 公开, STJson
.程序集变量 keyWords, 字节集
.程序集变量 keyNumber, 字节集
.程序集变量 keyStep, 字节集
.程序集变量 mBlankStr, 文本型

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

keyWords ＝ 到字节集 (“{[]},:”)
keyNumber ＝ 到字节集 (“-0123456789.”)
keyStep ＝ { 8, 9, 10, 12, 13, 32 }
mBlankStr ＝ “    ”


.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用



.子程序 SetFormatBlankStr, , 公开, 设置格式化时的空白填充内容。默认内容为四个半角空格“    ”
.参数 text, 文本型

mBlankStr ＝ text


.子程序 CreateLongValue, STJsonValue, 公开, 创建 整数/长整数 数值JSON对象
.参数 value, 长整数型
.局部变量 v, STJsonValue

v.SetLong (value)
返回 (v)


.子程序 CreateDoubleValue, STJsonValue, 公开, 创建 小数型 数值JSON对象
.参数 value, 双精度小数型
.局部变量 v, STJsonValue

v.SetDouble (value)
返回 (v)


.子程序 CreateStringValue, STJsonValue, 公开, 创建 文本型 JSON对象
.参数 value, 文本型
.局部变量 v, STJsonValue

v.SetString (value)
返回 (v)


.子程序 CreateBoolValue, STJsonValue, 公开, 创建 逻辑型 JSON对象
.参数 value, 逻辑型
.局部变量 v, STJsonValue

v.SetBool (value)
返回 (v)


.子程序 CreateNullValue, STJsonValue, 公开, 创建 空值 JSON对象
.局部变量 v, STJsonValue

返回 (v)


.子程序 Parse, STJsonValue, 公开, 从文本解析为JSON对象
.参数 jsonString, 文本型, 参考, JSON文本
.参数 result, STJsonParseResult, 参考 可空, 解析JSON的结果信息
.局部变量 tag, 文本型
.局部变量 handle, 整数型

.如果真 (取文本长度 (删首尾空 (jsonString)) ＝ 0)
    result.stat ＝ 假
    result.message ＝ “要解析的JSON内容为空”
    返回 (result.object)
.如果真结束

handle ＝ 打开内存文件 ()
写出文本 (handle, jsonString)
移到文件首 (handle)
tag ＝ _parse_next_tag (handle)
.如果真 (tag ≠ “{” 且 tag ≠ “[”)
    关闭文件 (handle)
    移到文件首 (handle)
    删除数据 (handle, 取文件长度 (handle))
    写出文本 (handle, “[” ＋ jsonString ＋ “]”)
.如果真结束

移到文件首 (handle)
result ＝ _parse (handle)
.如果真 (result.stat ＝ 假)
    result.object.SetNull ()
.如果真结束
关闭文件 (handle)

返回 (result.object)


.子程序 _parse, STJsonParseResult
.参数 handle, 整数型, 参考
.局部变量 i, 整数型
.局部变量 o, STJsonValue
.局部变量 r, STJsonParseResult
.局部变量 len, 整数型
.局部变量 key, 文本型
.局部变量 block, 文本型

block ＝ _parse_next_block (handle)
.如果真 (block ＝ “”)
    r.stat ＝ 假
    r.message ＝ “JSON文本格式不正确”
    返回 (r)
.如果真结束

r.stat ＝ 真
r.message ＝ “”

.判断开始 (block ＝ “{”)
    o.Type (#JTYPE_OBJECT)
    block ＝ _parse_next_block (handle)
    .判断循环首 (block ≠ “}” 且 block ≠ “”)
        .如果真 (取文本左边 (block, 1) ≠ #引号)
            r.stat ＝ 假
            r.message ＝ “解析出错，对象名称必须带引号”
            返回 (r)
        .如果真结束
        key ＝ FormatJsonToString (取文本中间 (block, 2, 取文本长度 (block) － 2))
        .如果真 (_parse_next_block (handle) ≠ “:”)
            r.stat ＝ 假
            r.message ＝ “解析出错，未找到分割符 ” ＋ #引号 ＋ “:” ＋ #引号
            返回 (r)
        .如果真结束
        r ＝ _parse (handle)
        .如果真 (r.stat ＝ 假)
            返回 (r)
        .如果真结束
        o.Put (key, r.object)
        block ＝ _parse_next_block (handle)
        .如果真 (block ≠ “,”)
            跳出循环 ()
        .如果真结束
        block ＝ _parse_next_block (handle)
    .判断循环尾 ()
    .如果真 (block ≠ “}”)
        r.stat ＝ 假
        r.message ＝ “解析出错，JSON格式不正确”
        返回 (r)
    .如果真结束
    r.object ＝ o
    返回 (r)
.判断 (文本比较 (block, “[”, 真) ＝ 0)
    o.Type (#JTYPE_ARRAY)
    r ＝ _parse (handle)
    .判断循环首 (r.stat 且 文本比较 (r.object.Type (), #JTYPE_UNKNOW, 真) ≠ 0)
        o.Add (r.object)
        block ＝ _parse_next_block (handle)
        .如果真 (block ＝ “]”)
            跳出循环 ()
        .如果真结束
        .如果真 (取文本长度 (block) ＝ 0)
            r.stat ＝ 假
            r.message ＝ “解析出错，JSON格式不正确”
            返回 (r)
        .如果真结束
        .如果真 (block ≠ “,”)
            r.stat ＝ 假
            r.message ＝ “未知的符号” ＋ #左引号 ＋ block ＋ #右引号
            返回 (r)
        .如果真结束
        r ＝ _parse (handle)
    .判断循环尾 ()
    .如果真 (r.stat ＝ 假)
        返回 (r)
    .如果真结束
    .如果真 (block ≠ “]”)
        .如果真 (文本比较 (r.object.Type (), #JTYPE_UNKNOW, 真) ＝ 0)
            block ＝ r.object.AsString ()
        .如果真结束

    .如果真结束
    .如果真 (block ≠ “]”)
        r.stat ＝ 假
        r.message ＝ “未知的符号” ＋ #左引号 ＋ block ＋ #右引号
        返回 (r)
    .如果真结束

.判断 (文本比较 (block, “null”, 真) ＝ 0)
    o.SetNull ()
.判断 (文本比较 (block, “true”, 真) ＝ 0 或 文本比较 (block, “false”, 真) ＝ 0)
    o.SetBool (文本比较 (block, “true”, 真) ＝ 0)
.判断 (IsNumber (block))
    .如果 (寻找文本 (block, “.”, , 假) ≠ -1)
        o.SetDouble (到数值 (block))
    .否则
        o.SetLong (到数值 (block))
    .如果结束

.判断 (取文本左边 (block, 1) ＝ #引号)
    o.SetString (FormatJsonToString (取文本中间 (block, 2, 取文本长度 (block) － 2)))
.默认
    o.SetString (block)
    o.Type (#JTYPE_UNKNOW)
.判断结束
r.object ＝ o
返回 (r)


.子程序 IsNumber, 逻辑型, , 是否为数字
.参数 text, 文本型, 参考
.局部变量 i, 整数型
.局部变量 len, 整数型
.局部变量 data, 字节集
.局部变量 r, 逻辑型

.如果真 (取文本长度 (text) ＝ 0)
    返回 (假)
.如果真结束

data ＝ 到字节集 (text)
len ＝ 取字节集长度 (data)
.计次循环首 (len, i)
    .如果真 (寻找字节集 (keyNumber, 到字节集 (data [i]), ) ＝ -1)
        返回 (假)
    .如果真结束

.计次循环尾 ()
返回 (真)


.子程序 _parse_next_block, 文本型, , 匹配下一个块
.参数 handle, 整数型
.局部变量 string, 字节集
.局部变量 nextTag, 字节集
.局部变量 preTag, 字节集
.局部变量 nextByte, 字节型

string ＝ {  }
nextTag ＝ 到字节集 (_parse_next_tag (handle))
.如果真 (寻找字节集 (keyWords, nextTag, ) ≠ -1)
    返回 (到文本 (nextTag))
.如果真结束
.判断开始 (nextTag ＝ 到字节集 (#引号))
    .循环判断首 ()
        preTag ＝ nextTag
        string ＝ string ＋ nextTag
        nextTag ＝ 读入字节集 (handle, 1)
        .如果真 (取字节集长度 (nextTag) ＝ 0)
            跳出循环 ()
        .如果真结束
        nextByte ＝ nextTag [1]
    .循环判断尾 (nextByte ≠ 13 且 nextByte ≠ 10 且 nextTag ≠ 到字节集 (#引号) 或 nextTag ＝ 到字节集 (#引号) 且 preTag ＝ 到字节集 (“\”))
    .如果 (nextTag ≠ 到字节集 (#引号))
        string ＝ {  }
    .否则
        string ＝ string ＋ nextTag
    .如果结束
    返回 (到文本 (string))
.判断 (寻找字节集 (keyNumber, nextTag, ) ≠ -1)
    .循环判断首 ()
        string ＝ string ＋ nextTag
        nextTag ＝ 读入字节集 (handle, 1)
    .循环判断尾 (寻找字节集 (keyNumber, nextTag, ) ≠ -1)
.默认
    .循环判断首 ()
        string ＝ string ＋ nextTag
        nextTag ＝ 到字节集 (_parse_next_tag (handle))
        .如果真 (取字节集长度 (nextTag) ＝ 0)
            跳出循环 ()
        .如果真结束

    .循环判断尾 (寻找字节集 (keyWords, nextTag, ) ＝ -1)
.判断结束
.如果真 (取字节集长度 (string) ＞ 0 且 取字节集长度 (nextTag) ＞ 0)
    移动读写位置 (handle, #现行位置, -1)
.如果真结束
返回 (到文本 (string))


.子程序 _parse_next_tag, 文本型, , 下一个有效内容标记
.参数 handle, 整数型
.局部变量 tag, 字节集

.循环判断首 ()
    tag ＝ 读入字节集 (handle, 1)
    .如果真 (取字节集长度 (tag) ＝ 0)
        跳出循环 ()
    .如果真结束

.循环判断尾 (寻找字节集 (keyStep, tag, ) ≠ -1)
返回 (到文本 (tag))


.子程序 ToJsonString, 文本型, 公开, 转换对象为JSON文本
.参数 obj, STJsonValue, 参考
.参数 style, 逻辑型, 可空, 是否启用风格化输出。默认：true。如果为 true 则生成的脚本会自动格式化为便于阅读的文本
.参数 sort, 逻辑型, 可空, 是否根据键值排序。默认：true
.参数 level, 整数型, 可空, 空白填充级别

.如果真 (是否为空 (style))
    style ＝ 真
.如果真结束
.如果真 (是否为空 (sort))
    sort ＝ 真
.如果真结束
.如果真 (是否为空 (level))
    level ＝ 0
.如果真结束
返回 (_to_json_string (obj, style, sort, level))


.子程序 _to_json_string, 文本型
.参数 obj, STJsonValue, 参考
.参数 style, 逻辑型, 可空, 是否启用风格化输出。默认：true。如果为 true 则生成的脚本会自动格式化为便于阅读的文本
.参数 sort, 逻辑型, 可空, 是否根据键值排序。默认：true
.参数 level, 整数型, 可空, 空白填充级别
.参数 handle, 整数型, 参考 可空, 保留参数。文件句柄。请不要调用
.局部变量 len, 整数型
.局部变量 array, 字节集, , "0"
.局部变量 keys, 文本型, , "0"
.局部变量 i, 整数型
.局部变量 root, 逻辑型
.局部变量 data, 字节集

.如果真 (是否为空 (style))
    style ＝ 真
.如果真结束
.如果真 (是否为空 (handle) 或 handle ＝ 0)
    handle ＝ 打开内存文件 ()
    root ＝ 真
    写出文本 (handle, blank (style, level))
.如果真结束
.判断开始 (文本比较 (obj.Type (), #JTYPE_LONG, 假) ＝ 0)
    写出文本 (handle, obj.AsLong ())
.判断 (文本比较 (obj.Type (), #JTYPE_DOUBLE, 假) ＝ 0)
    写出文本 (handle, obj.AsDouble ())
.判断 (文本比较 (obj.Type (), #JTYPE_STRING, 假) ＝ 0)
    写出文本 (handle, FormatStringToJson (obj.AsString ()))
.判断 (文本比较 (obj.Type (), #JTYPE_ARRAY, 假) ＝ 0)
    len ＝ obj.Size ()
    写出文本 (handle, “[” ＋ blk (style))
    .计次循环首 (len, i)
        .如果真 (i ＞ 1)
            写出文本 (handle, “,” ＋ blk (style))
        .如果真结束
        写出文本 (handle, blank (style, level ＋ 1))
        _to_json_string (obj.GetAt (i), style, sort, level ＋ 1, handle)
    .计次循环尾 ()
    写出文本 (handle, blk (style) ＋ blank (style, level) ＋ “]”)
.判断 (文本比较 (obj.Type (), #JTYPE_OBJECT, 假) ＝ 0)
    写出文本 (handle, “{” ＋ blk (style))
    len ＝ obj.Keys (keys)
    .如果真 (sort)
        SortStringArray (keys, 假)
    .如果真结束
    .计次循环首 (len, i)
        .如果真 (i ＞ 1)
            写出文本 (handle, “,” ＋ blk (style))
        .如果真结束
        写出文本 (handle, blank (style, level ＋ 1))
        写出文本 (handle, FormatStringToJson (keys [i]), 选择 (style, “ : ”, “:”))
        _to_json_string (obj.Get (keys [i]), style, sort, level ＋ 1, handle)
    .计次循环尾 ()
    写出文本 (handle, blk (style) ＋ blank (style, level) ＋ “}”)

.判断 (文本比较 (obj.Type (), #JTYPE_BOOL, 假) ＝ 0)
    写出文本 (handle, 选择 (obj.AsBool (), “true”, “false”))
.判断 (文本比较 (obj.Type (), #JTYPE_NULL, 假) ＝ 0)
    写出文本 (handle, “null”)
.默认

.判断结束
.如果真 (root)
    移到文件首 (handle)
    data ＝ 读入字节集 (handle, 取文件长度 (handle))
    关闭文件 (handle)
.如果真结束
返回 (到文本 (data))


.子程序 FormatStringToJson, 文本型
.参数 string, 文本型

string ＝ 子文本替换 (string, “\”, “\\”, , , 真)
string ＝ 子文本替换 (string, #引号, “\” ＋ #引号, , , 真)
string ＝ 子文本替换 (string, “/”, “\/”, , , 真)
string ＝ 子文本替换 (string, 字符 (13), “\r”, , , 真)
string ＝ 子文本替换 (string, 字符 (10), “\n”, , , 真)
string ＝ 子文本替换 (string, 字符 (9), “\t”, , , 真)
string ＝ 子文本替换 (string, 字符 (8), “\b”, , , 真)
string ＝ 子文本替换 (string, 字符 (12), “\f”, , , 真)
返回 (#引号 ＋ string ＋ #引号)


.子程序 FormatJsonToString, 文本型
.参数 string, 文本型

string ＝ 子文本替换 (string, “\” ＋ #引号, #引号, , , 真)
string ＝ 子文本替换 (string, “\/”, “/”, , , 真)
string ＝ 子文本替换 (string, “\r”, 字符 (13), , , 真)
string ＝ 子文本替换 (string, “\n”, 字符 (10), , , 真)
string ＝ 子文本替换 (string, “\t”, 字符 (9), , , 真)
string ＝ 子文本替换 (string, “\b”, 字符 (8), , , 真)
string ＝ 子文本替换 (string, “\f”, 字符 (12), , , 真)
string ＝ 子文本替换 (string, “\\”, “\”, , , 真)
返回 (string)


.子程序 blank, 文本型
.参数 style, 逻辑型
.参数 level, 整数型

.如果真 (style ＝ 假)
    返回 (“”)
.如果真结束
返回 (取重复文本 (level, mBlankStr))


.子程序 blk, 文本型
.参数 style, 逻辑型

.如果真 (style ＝ 假)
    返回 (“”)
.如果真结束
返回 (#换行符)

