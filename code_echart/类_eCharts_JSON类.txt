.版本 2

.程序集 eCharts_JSON类, , 公开, 本json类代码来自易语言论坛‘洫蜘蛛’，后经本人lsy9202添加补全部分功能（自动嵌套补全等）
.程序集变量 Script, 对象
.程序集变量 脚本变量, 文本型

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

.如果真 (Script.创建 (“MSScriptControl.ScriptControl”, ))  ' 创建
    Script.写属性 (“Language”, “JavaScript”)
    Script.方法 (“AddCode”, 到文本 (#JSON2))
    脚本变量 ＝ “ZhiZhu”
    返回 ()
.如果真结束


.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用

Script.清除 ()

.子程序 重置, , 公开, 重置为初始状态

Script.数值方法 (“Reset”, )
Script.写属性 (“Language”, “JavaScript”)
Script.方法 (“AddCode”, 到文本 (#JSON2))

.子程序 解析, 逻辑型, 公开, 解析JSON文本，成果返回真，失败返回假。
.参数 text, 文本型, 可空, 符合JSON格式的文本内容，如果想创建一个新的JSON对象可以提供“{ }”，空数组则提供“[ ]”。如果留空则默认为空对象“{ }”。
.局部变量 错误信息, 文本型

.判断开始 (取文本长度 (text) ＞ 0)
    Script.方法 (“Eval”, 脚本变量 ＋ “= ” ＋ text)
.默认
    Script.方法 (“Eval”, 脚本变量 ＋ “= { }”)
.判断结束
错误信息 ＝ Script.取错误 ()
.判断开始 (取文本长度 (错误信息) ＞ 0)
    输出调试文本 (“JSON:” ＋ 错误信息)
    返回 (假)
.默认
    返回 (真)
.判断结束


.子程序 解析B, 逻辑型, , 解析JSON文本，JSON原生解析，成果返回真，失败返回假。
.参数 text, 文本型, , 必须是符合JSON格式标准的文本内容
.局部变量 错误信息, 文本型

Script.方法 (“Eval”, “var ” ＋ 脚本变量 ＋ “ = JSON.parse('” ＋ text ＋ “')”)
错误信息 ＝ Script.取错误 ()
.判断开始 (取文本长度 (错误信息) ＞ 0)
    输出调试文本 (“JSON:” ＋ 错误信息)
    返回 (假)
.默认
    返回 (真)
.判断结束


.子程序 取键表, 整数型, 公开, 返回键数目，如果是数组则返回数组成员数目。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.参数 list, 文本型, 参考 可空 数组, 可以被省略，只能提供文本型数组变量，保存键名称，如果是数组则保存数组索引编号或数组成员名称。
.局部变量 对象名称, 文本型
.局部变量 x, 整数型
.局部变量 y, 整数型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
x ＝ Script.数值方法 (“Eval”, “var ary=new Array; for (var key in ” ＋ 对象名称 ＋ “) {ary.push(key); }”)  ' 新建一个数组，并且循环把对象数组的名称加入进去，最后返回新数组成员数量
.如果真 (是否为空 (list) ＝ 假)
    清除数组 (list)
    .变量循环首 (0, x － 1, 1, y)
        对象名称 ＝ Script.文本方法 (“Eval”, “ary[” ＋ 到文本 (y) ＋ “]”)
        加入成员 (list, 对象名称)
    .变量循环尾 ()
.如果真结束
Script.方法 (“Eval”, “ary=null”)  ' 清除数组对象
返回 (x)

.子程序 取代码, 文本型, 公开, 返回JSON格式文本内容。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.参数 space, 文本型, 可空, 数值则表示空格缩进，用单引号引用的字符则表示使用指定字符缩进(长度必须小于10)。
.局部变量 对象名称, 文本型
.局部变量 文本缩进, 文本型

文本缩进 ＝ space
.如果真 (取文本长度 (文本缩进) ＜ 1)
    文本缩进 ＝ “0”
.如果真结束
.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.文本方法 (“Eval”, “JSON.stringify(” ＋ 对象名称 ＋ “,0,” ＋ 文本缩进 ＋ “)”))

.子程序 取文本, 文本型, 公开, 返回文本型键值。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型
.局部变量 对象类型, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
.如果真 (Script.逻辑方法 (“Eval”, 对象名称 ＋ “ == null”))
    返回 (“”)
.如果真结束
对象类型 ＝ Script.文本方法 (“Eval”, “Object.prototype.toString.call(” ＋ 对象名称 ＋ “) ”)
.判断开始 (对象类型 ＝ “[object String]”)
    返回 (Script.文本方法 (“Eval”, 对象名称))
.默认
    返回 (Script.文本方法 (“Eval”, “JSON.stringify(” ＋ 对象名称 ＋ “)”))
.判断结束


.子程序 取数值, 双精度小数型, 公开, 返回数值型键值。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.数值方法 (“Eval”, 对象名称))

.子程序 取逻辑, 逻辑型, 公开, 返回逻辑型键值。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.逻辑方法 (“Eval”, 对象名称))

.子程序 置新值, 逻辑型, 公开, 修改或添加一个键值，成功返回真，失败返回假。(支持连续嵌套自动补齐，例如空json直接置新值a.b.c=100时也可以自动补齐生成完整json，但需注意：只针对已存在的数组可以使用a.b[0].c的方式访问，数组创建请单独使用“数组_加入成员”)
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键，如果是添加键，键名需要以字母或下划线开头。
.参数 value_对象, 文本型, 可空, 键值。多选一。（可使用内置‘eCharts_JSON类’生成或者照标准JSON格式写），此参数将不做处理，请注意格式书写（文本型加引号、对象加大括号"{}"、数组加中括号"[]"）
.参数 value_文本型, 文本型, 可空, 键值。多选一。
.参数 value_数值型, 双精度小数型, 可空, 键值。多选一。
.参数 value_逻辑型, 逻辑型, 可空, 键值。多选一。
.参数 value_数组, 文本型, 可空, 键值。多选一。（可使用‘创建json数组()’生成或者照格式写：1,2,3）,无需写中括号"[]"
.参数 value_NULL, 逻辑型, 可空, 键值。多选一。（真 = NULL）
.参数 错误信息, 文本型, 参考 可空, 返回失败时的错误信息！
.局部变量 对象名称, 文本型
.局部变量 key分组, 文本型, , "0"
.局部变量 key重组, 文本型, , "0"
.局部变量 临时文本, 文本型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 数组名字, 文本型
.局部变量 数组长度, 整数型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
    .如果真 (取文本左边 (key, 1) ≠ “[” 且 取文本左边 (key, 1) ≠ “{”)  ' 属性名为空，那么就是修改根成员，属性值又没有对象或者数组标识，那么返回假。
        错误信息 ＝ “属性名为空且不是数组或者对象！”
        返回 (假)
    .如果真结束

.判断结束

.如果真 (取键表 (key) ＝ 0 且 取文本长度 (取代码 (key)) ＜ 2)  ' 如果当前key路径下没有有效内容则...
    .如果 (寻找文本 (key, “.”, , 假) ＝ -1)  ' 如果key是单级路径则表示为根节点
        Script.方法 (“Eval”, 对象名称 ＋ “={}”)

    .否则
        ' 将KEY按级分组
        key分组 ＝ 分割文本 (key, “.”, )
        .计次循环首 (取数组成员数 (key分组), 计数器1)
            .如果 (计数器1 ＝ 1)
                临时文本 ＝ key分组 [计数器1]
            .否则
                临时文本 ＝ 临时文本 ＋ “.” ＋ key分组 [计数器1]
            .如果结束
            加入成员 (key重组, 临时文本)
        .计次循环尾 ()
        ' 开始依次按级正序寻找key分级的缺失位置，并尝试重建
        .变量循环首 (1, 取数组成员数 (key分组), 1, 计数器1)
            .判断开始 (寻找文本 (key分组 [计数器1], “]”, , 假) ≠ -1)  ' 如果当前KEY的当前级是数组则...
                数组名字 ＝ 取文本左边 (key分组 [计数器1], 寻找文本 (key分组 [计数器1], “[”, , 假) － 1)
                数组长度 ＝ 到整数 (取文本中间 (key分组 [计数器1], 寻找文本 (key分组 [计数器1], “[”, , 假) ＋ 1, 寻找文本 (key分组 [计数器1], “]”, , 假) － 寻找文本 (key分组 [计数器1], “[”, , 假) － 1))
                .如果 (计数器1 ＞ 1)
                    .如果真 (数组_取长度 (key重组 [计数器1 － 1] ＋ “.” ＋ 数组名字) ＜ 数组长度 ＋ 1)
                        错误信息 ＝ “数组长度超出范围:指定的数组位置不存在！”
                        返回 (假)
                    .如果真结束

                .否则
                    .如果真 (数组_取长度 (数组名字) ＜ 数组长度 ＋ 1)
                        错误信息 ＝ “数组长度超出范围:指定的数组位置不存在！”
                        返回 (假)
                    .如果真结束

                .如果结束

            .判断 (取键表 (key重组 [计数器1]) ＝ 0 且 取文本长度 (取代码 (key重组 [计数器1])) ＜ 2)  ' 如果当前key路径下没有有效内容则...
                Script.方法 (“Eval”, 脚本变量 ＋ “.” ＋ key重组 [计数器1] ＋ “={}”)  ' 给当前KEY路径填补空对象，以方便后续写入内容
            .默认

            .判断结束

        .变量循环尾 ()
    .如果结束

.如果真结束
.判断开始 (是否为空 (value_逻辑型) ＝ 假)
    .如果 (value_逻辑型)
        Script.方法 (“Eval”, 对象名称 ＋ “=true”)
    .否则
        Script.方法 (“Eval”, 对象名称 ＋ “=false”)
    .如果结束

.判断 (是否为空 (value_数值型) ＝ 假)
    Script.方法 (“Eval”, 对象名称 ＋ “=” ＋ 到文本 (value_数值型))
.判断 (是否为空 (value_文本型) ＝ 假)
    Script.方法 (“Eval”, 对象名称 ＋ “=” ＋ #引号 ＋ value_文本型 ＋ #引号)
.判断 (是否为空 (value_数组) ＝ 假)
    Script.方法 (“Eval”, 对象名称 ＋ “=[” ＋ value_数组 ＋ “]”)
.判断 (是否为空 (value_对象) ＝ 假)
    Script.方法 (“Eval”, 对象名称 ＋ “=” ＋ value_对象)
.判断 (是否为空 (value_NULL) ＝ 假)
    .如果真 (value_NULL)
        Script.方法 (“Eval”, 对象名称 ＋ “= ”)
    .如果真结束

.默认

.判断结束

.判断开始 (key ＝ “null”)
    返回 (Script.逻辑方法 (“Eval”, 对象名称 ＋ “ == null”))
.默认
    返回 (Script.逻辑方法 (“Eval”, 对象名称 ＋ “ != null”))
.判断结束


.子程序 取数据类型, 文本型, 公开, 返回数据类型名称，“Null”= 空，“String”= 文本型，“Number”= 数值型，“Object”= 对象型，“Array”= 数组型，“Boolean”= 逻辑型。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型
.局部变量 对象类型, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
.判断开始 (Script.逻辑方法 (“Eval”, 对象名称 ＋ “ == null”))
    返回 (“Null”)
.默认
    对象类型 ＝ Script.文本方法 (“Eval”, “Object.prototype.toString.call(” ＋ 对象名称 ＋ “)”)
    .判断开始 (对象类型 ＝ “[object String]”)  ' 文本型
        返回 (“String”)
    .判断 (对象类型 ＝ “[object Number]”)  ' 数值型
        返回 (“Number”)
    .判断 (对象类型 ＝ “[object Object]”)  ' 对象型
        返回 (“Object”)
    .判断 (对象类型 ＝ “[object Array]”)  ' 数组型
        返回 (“Array”)
    .判断 (对象类型 ＝ “[object Boolean]”)  ' 逻辑型
        返回 (“Boolean”)
    .默认
        返回 (对象类型)
    .判断结束

.判断结束


.子程序 文本_取长度, 整数型, , 返回指定文本对象的长度。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.length”))


.子程序 数组_取长度, 整数型, 公开, 返回指定数组的成员数目。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.length”))


.子程序 数组_插入成员, 整数型, 公开, 向数组开头添加一个或更多元素，并返回新长度。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.参数 value_对象, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开）。参数多选一。此参数将不做处理，请注意格式书写（文本型加引号、对象加大括号"{}"、数组加中括号"[]"）
.参数 value_文本型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，例如：“腾讯,百度,淘宝,京东”）。参数多选一。
.参数 value_数值型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，支持整数小数混搭，例如：“12.3,456,7.89”）。参数多选一。
.参数 value_逻辑型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，例如：“真,假，真”或者“1,0,1”或者“true,false,true”）。参数多选一。
.参数 value_数组, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开）。参数多选一。（可使用‘创建json数组()’生成或者照格式写：[1,2,3]）,此参数将不做处理，请注意格式书写（文本型加引号、对象加大括号"{}"、数组加中括号"[]"）
.局部变量 对象名称, 文本型
.局部变量 数值处理数组, 文本型, , "0"
.局部变量 最终数值, 文本型
.局部变量 计数器1, 整数型

.如果真 (取文本长度 (取代码 (key)) ≤ 2)
    置新值 (key, “[]”)
.如果真结束
.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
.判断开始 (是否为空 (value_对象) ＝ 假)
    Script.数值方法 (“Eval”, 对象名称 ＋ “.unshift(” ＋ value_对象 ＋ “)”)
.判断 (是否为空 (value_文本型) ＝ 假)
    数值处理数组 ＝ 分割文本 (value_文本型, “,”, )
    .计次循环首 (取数组成员数 (数值处理数组), 计数器1)
        .如果 (计数器1 ＝ 1)
            最终数值 ＝ #引号 ＋ 数值处理数组 [计数器1] ＋ #引号
        .否则
            最终数值 ＝ 最终数值 ＋ “,” ＋ #引号 ＋ 数值处理数组 [计数器1] ＋ #引号
        .如果结束

    .计次循环尾 ()
    Script.数值方法 (“Eval”, 对象名称 ＋ “.unshift(” ＋ 最终数值 ＋ “)”)
.判断 (是否为空 (value_数值型) ＝ 假)
    Script.数值方法 (“Eval”, 对象名称 ＋ “.unshift(” ＋ value_数值型 ＋ “)”)
.判断 (是否为空 (value_逻辑型) ＝ 假)
    数值处理数组 ＝ 分割文本 (value_逻辑型, “,”, )
    .计次循环首 (取数组成员数 (数值处理数组), 计数器1)
        .如果 (计数器1 ＝ 1)
            .判断开始 (数值处理数组 [计数器1] ＝ “true” 或 数值处理数组 [计数器1] ＝ “1” 或 数值处理数组 [计数器1] ＝ “真”)
                最终数值 ＝ “true”
            .判断 (数值处理数组 [计数器1] ＝ “false” 或 数值处理数组 [计数器1] ＝ “0” 或 数值处理数组 [计数器1] ＝ “假”)
                最终数值 ＝ “false”
            .默认

            .判断结束

        .否则
            .判断开始 (数值处理数组 [计数器1] ＝ “true” 或 数值处理数组 [计数器1] ＝ “1” 或 数值处理数组 [计数器1] ＝ “真”)
                最终数值 ＝ 最终数值 ＋ “,” ＋ “true”
            .判断 (数值处理数组 [计数器1] ＝ “false” 或 数值处理数组 [计数器1] ＝ “0” 或 数值处理数组 [计数器1] ＝ “假”)
                最终数值 ＝ 最终数值 ＋ “,” ＋ “false”
            .默认

            .判断结束

        .如果结束

    .计次循环尾 ()
    Script.数值方法 (“Eval”, 对象名称 ＋ “.unshift(” ＋ 最终数值 ＋ “)”)
.判断 (是否为空 (value_数组) ＝ 假)
    Script.数值方法 (“Eval”, 对象名称 ＋ “.unshift(” ＋ value_数组 ＋ “)”)
.默认

.判断结束

返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.length”))

.子程序 数组_加入成员, 整数型, 公开, 向数组末尾添加一个或更多元素，并返回新长度。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.参数 value_对象, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开）。参数多选一。此参数将不做处理，请注意格式书写（文本型加引号、对象加大括号"{}"、数组加中括号"[]"）
.参数 value_文本型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，例如：“腾讯,百度,淘宝,京东”）。参数多选一。
.参数 value_数值型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，支持整数小数混搭，例如：“12.3,456,7.89”）。参数多选一。
.参数 value_逻辑型, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开，例如：“真,假，真”或者“1,0,1”或者“true,false,true”）。参数多选一。
.参数 value_数组, 文本型, 可空, 成员值（多个成员之间用半角逗号隔开）。参数多选一。（可使用‘创建json数组()’生成或者照格式写：[1,2,3]）,此参数将不做处理，请注意格式书写（文本型加引号、对象加大括号"{}"、数组加中括号"[]"）
.局部变量 对象名称, 文本型
.局部变量 数值处理数组, 文本型, , "0"
.局部变量 最终数值, 文本型
.局部变量 计数器1, 整数型

.如果真 (取文本长度 (取代码 (key)) ＜ 2)
    置新值 (key, “[]”)
.如果真结束
.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
.判断开始 (是否为空 (value_对象) ＝ 假)
    返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.push(” ＋ value_对象 ＋ “)”))
.判断 (是否为空 (value_文本型) ＝ 假)
    数值处理数组 ＝ 分割文本 (value_文本型, “,”, )
    .计次循环首 (取数组成员数 (数值处理数组), 计数器1)
        .如果 (计数器1 ＝ 1)
            最终数值 ＝ #引号 ＋ 数值处理数组 [计数器1] ＋ #引号
        .否则
            最终数值 ＝ 最终数值 ＋ “,” ＋ #引号 ＋ 数值处理数组 [计数器1] ＋ #引号
        .如果结束

    .计次循环尾 ()
    返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.push(” ＋ 最终数值 ＋ “)”))
.判断 (是否为空 (value_数值型) ＝ 假)
    返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.push(” ＋ value_数值型 ＋ “)”))
.判断 (是否为空 (value_逻辑型) ＝ 假)
    数值处理数组 ＝ 分割文本 (value_逻辑型, “,”, )
    .计次循环首 (取数组成员数 (数值处理数组), 计数器1)
        .如果 (计数器1 ＝ 1)
            .判断开始 (数值处理数组 [计数器1] ＝ “true” 或 数值处理数组 [计数器1] ＝ “1” 或 数值处理数组 [计数器1] ＝ “真”)
                最终数值 ＝ “true”
            .判断 (数值处理数组 [计数器1] ＝ “false” 或 数值处理数组 [计数器1] ＝ “0” 或 数值处理数组 [计数器1] ＝ “假”)
                最终数值 ＝ “false”
            .默认

            .判断结束

        .否则
            .判断开始 (数值处理数组 [计数器1] ＝ “true” 或 数值处理数组 [计数器1] ＝ “1” 或 数值处理数组 [计数器1] ＝ “真”)
                最终数值 ＝ 最终数值 ＋ “,” ＋ “true”
            .判断 (数值处理数组 [计数器1] ＝ “false” 或 数值处理数组 [计数器1] ＝ “0” 或 数值处理数组 [计数器1] ＝ “假”)
                最终数值 ＝ 最终数值 ＋ “,” ＋ “false”
            .默认

            .判断结束

        .如果结束

    .计次循环尾 ()
    返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.push(” ＋ 最终数值 ＋ “)”))
.判断 (是否为空 (value_数组) ＝ 假)
    返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.push(” ＋ value_数组 ＋ “)”))
.默认
    返回 (0)
.判断结束



.子程序 数组_取出成员, 文本型, 公开, 删除并返回数组的第一个元素，如果数组已经是空值，则返回一个空值。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.文本方法 (“Eval”, “JSON.stringify(” ＋ 对象名称 ＋ “.shift()” ＋ “)”))

.子程序 数组_弹出成员, 文本型, 公开, 删除并返回数组的最后一个元素，如果数组已经是空值，则返回一个空值。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
返回 (Script.文本方法 (“Eval”, “JSON.stringify(” ＋ 对象名称 ＋ “.pop()” ＋ “)”))

.子程序 数组_剪接成员, 整数型, 公开, 返回数组剪接后的新长度。
.参数 key, 文本型, 可空, 支持“a.b.c”或“a[0].b”等模式混合，如果留空或者为空文本表示根键。
.参数 index, 整数型, , 添加或删除项目的位置，使用负数可从数组末尾开始计算位置。
.参数 howmany, 整数型, , 要删除的项目数量。如果设置为 0，则不会删除项目。
.参数 value, 文本型, , 加入值的代码，多个成员之间用半角逗号隔开。可以是空值，文本，数值，对象，数组，逻辑值等。
.局部变量 对象名称, 文本型

.判断开始 (取文本长度 (key) ＞ 0)
    .判断开始 (取文本左边 (key, 1) ≠ “[”)
        对象名称 ＝ 脚本变量 ＋ “.” ＋ key
    .默认
        对象名称 ＝ 脚本变量 ＋ key
    .判断结束

.默认
    对象名称 ＝ 脚本变量
.判断结束
Script.方法 (“Eval”, 对象名称 ＋ “.splice(” ＋ 到文本 (index) ＋ “,” ＋ 到文本 (howmany) ＋ “,” ＋ value ＋ “)”)
返回 (Script.数值方法 (“Eval”, 对象名称 ＋ “.length”))
