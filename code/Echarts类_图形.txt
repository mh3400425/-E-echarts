.版本 2

.程序集 Echarts类_图形, eCharts_JSON类, 公开
.程序集变量 当前图形对象索引, 整数型
.程序集变量 内部变量表, 内部变量表, , "0"
.程序集变量 时间轴_基本配置, eCharts_JSON类
.程序集变量 时间轴_公用配置, eCharts_JSON类
.程序集变量 时间轴_集合配置, eCharts_JSON类

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

当前图形对象索引 ＝ -1
eCharts_JSON类.解析 ()

.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用

eCharts_JSON类.清空 ()

.子程序 初始化, , 公开, 清空数据并重置图形对象名称。请务必首行调用。
.参数 参_图形对象名称, 文本型, 可空, 如留空则默认图形对象名称为：myChart*（*为当前程序中图形的序号，以0开始），本参数留空可确保多个图形名称不重复。

.如果真 (是否为空 (参_图形对象名称))
    .如果真 (全局_当前图形对象属性.名称 ＝ “”)  ' 当前名称不存在（未创建）时，新建一个唯一的内部名称
        创建唯一myChart名称 ()
    .如果真结束
    参_图形对象名称 ＝ 全局_当前图形对象属性.名称
.如果真结束
更改图形对象名称 (参_图形对象名称)
时间轴_基本配置.清空 ()
时间轴_公用配置.清空 ()
时间轴_集合配置.清空 ()
eCharts_JSON类.解析 ()

.子程序 创建唯一myChart名称, , , 创建一个唯一的图形对象名称和divID，当前图形名称或divID如果为空将为其补全配对。
.参数 索引, 整数型, 可空
.局部变量 计数器, 整数型
.局部变量 是否存在, 逻辑型

.如果真 (是否为空 (索引))
    索引 ＝ 0
.如果真结束
.计次循环首 (取数组成员数 (全局_图形对象属性组), 计数器)
    .如果真 (全局_图形对象属性组 [计数器].名称 ＝ “myChart” ＋ 到文本 (索引) 或 全局_图形对象属性组 [计数器].divID ＝ “mydiv” ＋ 到文本 (索引))
        创建唯一myChart名称 (索引 ＋ 1)
        返回 ()
    .如果真结束

.计次循环尾 ()
.如果真 (全局_当前图形对象属性.名称 ＝ “”)
    全局_当前图形对象属性.名称 ＝ “myChart” ＋ 到文本 (索引)
.如果真结束
.如果真 (全局_当前图形对象属性.divID ＝ “”)
    全局_当前图形对象属性.divID ＝ “mydiv” ＋ 到文本 (索引)
.如果真结束
加入成员 (全局_图形对象属性组, 全局_当前图形对象属性)

.子程序 更改图形对象名称, 文本型, 公开, 更改图形对象名称。返回更改后最新的图形对象名称。
.参数 参_图形对象名称, 文本型, 可空, 为空时将保留原有名称。
.参数 参_图形divID, 文本型, 可空, 为空时将保留原有divID。

.如果真 (参_图形对象名称 ≠ “”)
    全局_当前图形对象属性.名称 ＝ 参_图形对象名称
.如果真结束
.如果真 (参_图形divID ≠ “”)
    全局_当前图形对象属性.divID ＝ 参_图形divID
.如果真结束
.如果 (当前图形对象索引 ＝ -1)
    加入成员 (全局_图形对象属性组, 全局_当前图形对象属性)
    当前图形对象索引 ＝ 取数组成员数 (全局_图形对象属性组)
.否则
    全局_图形对象属性组 [当前图形对象索引] ＝ 全局_当前图形对象属性
.如果结束

返回 (全局_当前图形对象属性.名称)

.子程序 取json自身, eCharts_JSON类, 公开
.局部变量 json, eCharts_JSON类

json.解析 (eCharts_JSON类.取代码 ())
返回 (json)


.子程序 嵌入JS变量或JS代码, 文本型, 公开, 注意：调用本方法嵌入JS变量或者JS代码后，取代码请使用“取代码_带JS变量()”，运行图形配置请使用“JS操作_运行图形配置_带JS变量()”。
.参数 JS变量名或JS回调函数, 文本型
.局部变量 新变量, 内部变量表

新变量.JS变量名或JS回调函数 ＝ JS变量名或JS回调函数
新变量.占位符 ＝ “[987654321,” ＋ 到文本 (取数组成员数 (内部变量表)) ＋ “]”
加入成员 (内部变量表, 新变量)
返回 (新变量.占位符)

.子程序 设置组件_图例, , 公开, 【legend】，设置图例组件，参数留空将保持原设定。
.参数 开启还是关闭, 逻辑型, 可空, 【show】，为空保持原状态，设真为开启，设假为关闭。
.参数 图例数据, 文本型, 可空, 【data.name】，为空时将自动获取（必须先添加了图形数据才能自动获取）。图例数据组。手动指定时格式为：“['数据1','数据2'...]”，强烈建议由“工具_创建JSON数组()”生成，注意：手动指定时需与series中图形系列名称一一对应，否则将无效果。
.参数 图例布局朝向, 整数型, 可空, 【orient】，默认为水平：1=水平排列，2=垂直排列。
.参数 内容格式器, 文本型, 可空, 【formatter】，支持字符串模板和js回调函数。
.参数 图例操作模式, 文本型, 可空, 【selectedMode】，默认“true”，可选：“true”开启选择功能，“false”关闭选择功能，“single”单选模式，“multiple”多选模式。
.参数 默认要关闭的图例组, 文本型, 可空 数组, 【selected】，文本数组，支持添加多个想要关闭的图例，默认留空将全部选中显示，手动指定后将关闭选中指定图例（依旧可以鼠标点击手动开启），其余将为默认开启状态。
.参数 左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.参数 图例样式, 文本型, 可空, 【data.icon】，【可选常量：#常用符号_***】。除常量中8种图形，同时支持“image://url”格式的图片或图片数据，也支持“path://”开头格式的矢量路径SVG图形。
.参数 图例间距, 双精度小数型, 可空, 【itemGap】，默认10，横向布局时为水平间距，纵向布局时为纵向间距。
.局部变量 计数器, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 名称组, 文本型, , "0"


.如果 (eCharts_JSON类.数组_取长度 (“legend”) ≥ 1)
    .计次循环首 (eCharts_JSON类.数组_取长度 (“legend”), 计数器)
        .如果真 (是否为空 (开启还是关闭) ＝ 假)
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭)
        .如果真结束
        .如果真 (是否为空 (图例布局朝向) ＝ 假)
            .判断开始 (图例布局朝向 ＝ 1)
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].orient”, , , , 真)
            .判断 (图例布局朝向 ＝ 2)
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].orient”, , , , 假)
            .默认

            .判断结束

        .如果真结束
        .如果 (是否为空 (图例数据))
            清除数组 (名称组)
            .计次循环首 (eCharts_JSON类.数组_取长度 (“series”), 计数器1)
                .判断开始 (eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “graph”)
                    .计次循环首 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories”), 计数器2)
                        加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                    .计次循环尾 ()
                .判断 (eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “radar”)
                    .计次循环首 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data”), 计数器2)
                        加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                    .计次循环尾 ()
                .默认
                    加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].name”))
                .判断结束

            .计次循环尾 ()
            .计次循环首 (取数组成员数 (名称组), 计数器2)
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”, , 名称组 [计数器2])
                .如果真 (是否为空 (图例样式) ＝ 假)
                    eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].icon”, , 图例样式)
                .如果真结束

            .计次循环尾 ()
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].data”, 图例数据)
        .如果结束
        .如果 (是否为空 (图例间距))
            eCharts_JSON类.删除 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].itemGap”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].itemGap”, , , 图例间距)
        .如果结束
        .如果 (是否为空 (左))
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].left”, , “auto”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].left”, , 左)
        .如果结束
        .如果 (是否为空 (右))
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].right”, , “auto”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].right”, , 右)
        .如果结束
        .如果 (是否为空 (上))
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].top”, , “auto”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].top”, , 上)
        .如果结束
        .如果 (是否为空 (下))
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].bottom”, , “auto”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].bottom”, , 下)
        .如果结束
        ' 内容格式器
        .如果 (是否为空 (内容格式器))
            eCharts_JSON类.删除 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].formatter”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].formatter”, , 内容格式器)
        .如果结束
        ' 图例操作模式
        .如果 (是否为空 (图例操作模式))
            eCharts_JSON类.删除 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selectedMode”)
        .否则
            .判断开始 (图例操作模式 ＝ “true”)
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selectedMode”, , , , 真)
            .判断 (图例操作模式 ＝ “false”)
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selectedMode”, , , , 假)
            .默认
                eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selectedMode”, , 图例操作模式)
            .判断结束

        .如果结束
        ' 指定默认关闭的图例
        .如果 (是否为空 (默认要关闭的图例组))
            eCharts_JSON类.删除 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selected”)
        .否则
            eCharts_JSON类.置新值 (“legend[” ＋ 到文本 (计数器 － 1) ＋ “].selected”, 工具_创建默认要关闭的图例组 (默认要关闭的图例组))
        .如果结束

    .计次循环尾 ()
.否则
    .如果真 (是否为空 (开启还是关闭) ＝ 假)
        eCharts_JSON类.置新值 (“legend.show”, , , , 开启还是关闭)
    .如果真结束
    .如果真 (是否为空 (图例布局朝向) ＝ 假)
        .判断开始 (图例布局朝向 ＝ 1)
            eCharts_JSON类.置新值 (“legend.orient”, , “horizontal”)
        .判断 (图例布局朝向 ＝ 2)
            eCharts_JSON类.置新值 (“legend.orient”, , “vertical”)
        .默认

        .判断结束

    .如果真结束
    .如果 (是否为空 (图例数据))
        清除数组 (名称组)
        .计次循环首 (eCharts_JSON类.数组_取长度 (“series”), 计数器1)
            .判断开始 (eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “graph”)  ' 关系图
                .计次循环首 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories”), 计数器2)
                    加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].categories[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                .计次循环尾 ()
            .判断 (eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “radar” 或 eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].type”) ＝ “pie”)  ' 雷达图、饼图
                .计次循环首 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data”), 计数器2)
                    加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”))
                .计次循环尾 ()

            .默认
                加入成员 (名称组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器1 － 1) ＋ “].name”))  ' 普通series（折线、柱图等）
            .判断结束

        .计次循环尾 ()
        .计次循环首 (取数组成员数 (名称组), 计数器2)
            eCharts_JSON类.置新值 (“legend.data[” ＋ 到文本 (计数器2 － 1) ＋ “].name”, , 名称组 [计数器2])
            .如果真 (是否为空 (图例样式) ＝ 假)
                eCharts_JSON类.置新值 (“legend.data[” ＋ 到文本 (计数器2 － 1) ＋ “].icon”, , 图例样式)
            .如果真结束

        .计次循环尾 ()
    .否则
        eCharts_JSON类.置新值 (“legend.data”, 图例数据)
    .如果结束
    .如果 (是否为空 (图例间距))
        eCharts_JSON类.删除 (“legend.itemGap”)
    .否则
        eCharts_JSON类.置新值 (“legend.itemGap”, , , 图例间距)
    .如果结束
    .如果 (是否为空 (左))
        eCharts_JSON类.置新值 (“legend.left”, , “auto”)
    .否则
        eCharts_JSON类.置新值 (“legend.left”, , 左)
    .如果结束
    .如果 (是否为空 (右))
        eCharts_JSON类.置新值 (“legend.right”, , “auto”)
    .否则
        eCharts_JSON类.置新值 (“legend.right”, , 右)
    .如果结束
    .如果 (是否为空 (上))
        eCharts_JSON类.置新值 (“legend.top”, , “auto”)
    .否则
        eCharts_JSON类.置新值 (“legend.top”, , 上)
    .如果结束
    .如果 (是否为空 (下))
        eCharts_JSON类.置新值 (“legend.bottom”, , “auto”)
    .否则
        eCharts_JSON类.置新值 (“legend.bottom”, , 下)
    .如果结束
    ' 内容格式器
    .如果 (是否为空 (内容格式器))
        eCharts_JSON类.删除 (“legend.formatter”)
    .否则
        eCharts_JSON类.置新值 (“legend.formatter”, , 内容格式器)
    .如果结束
    ' 图例操作模式
    .如果 (是否为空 (图例操作模式))
        eCharts_JSON类.删除 (“legend.selectedMode”)
    .否则
        .判断开始 (图例操作模式 ＝ “true”)
            eCharts_JSON类.置新值 (“legend.selectedMode”, , , , 真)
        .判断 (图例操作模式 ＝ “false”)
            eCharts_JSON类.置新值 (“legend.selectedMode”, , , , 假)
        .默认
            eCharts_JSON类.置新值 (“legend.selectedMode”, , 图例操作模式)
        .判断结束

    .如果结束
    ' 指定默认关闭的图例
    .如果 (是否为空 (默认要关闭的图例组))
        eCharts_JSON类.删除 (“legend.selected”)
    .否则
        eCharts_JSON类.置新值 (“legend.selected”, 工具_创建默认要关闭的图例组 (默认要关闭的图例组))
    .如果结束

.如果结束


.子程序 设置组件_标题, 整数型, 公开, 【title】，返回当前标题组件的索引，设置标题组件，参数留空将保持原设定。多个标题时请重复调用。
.参数 主标题, 文本型, 可空, 【text】
.参数 副标题, 文本型, 可空, 【subtext】
.参数 开启还是关闭, 逻辑型, 可空, 【show】，为空保持原状态，设真为开启，设假为关闭。
.参数 背景颜色, 文本型, 可空, 【backgroundColor】，默认为：'transparent'透明无色，也可设置为颜色值如：“#FFF”或“#FFFFFF”
.参数 主标题_文字颜色, 文本型, 可空, 【textStyle.color】，默认为：“#333”
.参数 主标题_文字大小, 整数型, 可空, 【textStyle.fontSize】，默认为：18
.参数 副标题_文字颜色, 文本型, 可空, 【subtextStyle.color】，默认为：“#aaa”
.参数 副标题_文字大小, 整数型, 可空, 【subtextStyle.fontSize】，默认为：12
.参数 左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.参数 主副标题间距, 整数型, 可空, 【itemGap】，默认10
.局部变量 计数器, 整数型
.局部变量 索引, 整数型

索引 ＝ eCharts_JSON类.数组_取长度 (“title”)
.如果真 (是否为空 (开启还是关闭) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.show”, , , , 开启还是关闭)
.如果真结束
.如果真 (是否为空 (主标题) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.text”, , 主标题)
.如果真结束
.如果真 (是否为空 (副标题) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.subtext”, , 副标题)
.如果真结束
.如果真 (是否为空 (背景颜色) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.backgroundColor”, , 背景颜色)
.如果真结束
.如果真 (是否为空 (主标题_文字颜色) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.textStyle.color”, , 主标题_文字颜色)
.如果真结束
.如果真 (是否为空 (主标题_文字大小) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.textStyle.fontSize”, , , 主标题_文字大小)
.如果真结束
.如果真 (是否为空 (副标题_文字颜色) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.subtextStyle.color”, , 副标题_文字颜色)
.如果真结束
.如果真 (是否为空 (副标题_文字大小) ＝ 假)
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.subtextStyle.fontSize”, , , 副标题_文字大小)
.如果真结束
.如果 (是否为空 (左))
    eCharts_JSON类.删除 (“title.” ＋ 到文本 (索引) ＋ “.left”)
.否则
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.left”, , 左)
.如果结束
.如果 (是否为空 (上))
    eCharts_JSON类.删除 (“title.” ＋ 到文本 (索引) ＋ “.top”)
.否则
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.top”, , 上)
.如果结束
.如果 (是否为空 (右))
    eCharts_JSON类.删除 (“title.” ＋ 到文本 (索引) ＋ “.right”)
.否则
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.right”, , 右)
.如果结束
.如果 (是否为空 (下))
    eCharts_JSON类.删除 (“title.” ＋ 到文本 (索引) ＋ “.bottom”)
.否则
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.bottom”, , 下)
.如果结束
.如果 (是否为空 (主副标题间距))
    eCharts_JSON类.删除 (“title.” ＋ 到文本 (索引) ＋ “.itemGap”)
.否则
    eCharts_JSON类.置新值 (“title.” ＋ 到文本 (索引) ＋ “.itemGap”, , , 主副标题间距)
.如果结束
返回 (索引)

.子程序 设置组件_X轴, 整数型, 公开, 【xAxis】，设置X轴组件，返回此x轴的索引号，支持设置或修改多组X/Y轴组件，参数留空将保持原设定。
.参数 X轴数据, 文本型, 可空, 【data】，X轴数据组。格式为：“['一月','二月'...]”，强烈建议由“工具_创建JSON数组()”生成。
.参数 X轴数据_JS变量名, 文本型, 可空, 设置本参数后将忽略上边【X轴数据】参数内容，大数据时推荐使用本方法，多个JS变量名时请不要重复，可提高运行效率节省绘制时间。
.参数 开启还是关闭, 逻辑型, 可空, 【show】，默认为开启，设真为开启，设假为关闭。
.参数 位置, 逻辑型, 可空, 【position】，默认为：假=底部。为真=顶部，为假=底部。
.参数 坐标轴类型, 文本型, 可空, 【type】，默认为：类目轴“category”。可选常量：#坐标轴类型_**轴。
.参数 是否脱离锁定0刻度, 逻辑型, 可空, 【scale】，默认为：假=永远显示0刻度。为真=脱离0刻度锁定（相当于设置了dataMax和dataMin但会自动在图形数据区外添加视觉缓冲区），设置"dataMax"或"dataMin"后此参数会失效。
.参数 刻度最大值, 文本型, 可空, 【max】，【可选常量：#坐标轴范围_最大值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最大值 将自动取数据在该轴上最大值。
.参数 刻度最小值, 文本型, 可空, 【min】，【可选常量：#坐标轴范围_最小值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最小值 将自动取数据在该轴上最小值。
.参数 刻度分段数, 整数型, 可空, 【splitNumber】，默认为：5
.参数 是否两侧留空, 逻辑型, 可空, 【nameGap】，是否两侧留空。默认为真，为真留空，为假不留空。
.参数 轴名称, 文本型, 可空, 【name】，默认为空。
.参数 刻度标签_文本格式器, 文本型, 可空, 【axisLabel.formatter】，为空时默认显示原始数值，格式支持字符串模板和js回调函数。例如：“第 {value} 个”。
.参数 刻度标签_旋转角度, 整数型, 可空, 【axisLabel.rotate】，默认不旋转，角度值：-90~90。用于类目标签不够位置显示时候通过旋转防止标签直接重叠。
.参数 间隔显示标签, 整数型, 可空, 【axisLabel.interval】，留空为自动显示标签。默认echarts会使用标签不重叠的策略自动决定显示标签。设置0会强制显示所有标签，设置x（x大于等于1）的数字会间隔x来显示标签。
.参数 轴线颜色, 文本型, 可空, 【axisLine.lineStyle.color】
.参数 绑定grid组件, 整数型, 可空, 【gridIndex】，默认绑定索引0的grid（grid组件不设置将会自动创建0号grid组件）。
.参数 修改指定索引的x轴参数, 整数型, 可空, 索引从0开始。留空或指定的索引不存在时将添加新x轴，指定的索引存在将覆盖其参数。
.参数 轴名称显示位置, 文本型, 可空, 【nameLocation】，默认为轴终点“end”，【可选常量：#轴名称位置_**】
.参数 轴名称与轴线的距离, 整数型, 可空, 【nameGap】，默认：15
.参数 轴名称旋转角度, 整数型, 可空, 【nameRotate】
.参数 轴位置偏移, 整数型, 可空, 【offset】，相对于默认位置的偏移，多X轴同时存在时有用。
.参数 分割线_是否关闭, 逻辑型, 可空, 【splitLine.show】，留空自动控制（类目轴时不显示，数值轴时显示），真=关闭，假=不关闭
.参数 分割线_颜色, 文本型, 可空, 【splitLine.lineStyle.color】，默认“#ccc”，支持16进制颜色等。支持设置json颜色数组将依次显示不同颜色。
.参数 分割线_线宽, 双精度小数型, 可空, 【splitLine.lineStyle.width】，默认1
.参数 分割线_线样式, 文本型, 可空, 【splitLine.lineStyel.type】，默认实线“solid”，【可选常量：#线样式_**】
.参数 刻度标签_是否关闭, 逻辑型, 可空, 【axisLabel.show】，默认假=开启。
.参数 刻度标签_文字大小, 双精度小数型, 可空, 【axisLabel.fontSize】，默认12
.参数 刻度标签_文字颜色, 文本型, 可空, 【axisLabel.color】，支持16进制颜色等。
.参数 轴刻度_是否关闭, 逻辑型, 可空, 【axisTick.show】，默认假=开启，真=关闭
.参数 轴刻度_长度, 双精度小数型, 可空, 【axisTick.length】，默认5
.局部变量 计数器, 整数型
.局部变量 索引, 整数型

.如果 (是否为空 (修改指定索引的x轴参数) 或 修改指定索引的x轴参数 ≤ eCharts_JSON类.数组_取长度 (“xAxis”) － 1)  ' 指定的索引留空或者不存在时将创建新x轴，否则将修改指定索引的x轴参数
    索引 ＝ eCharts_JSON类.数组_加入成员 (“xAxis”, “{}”) － 1
.否则
    索引 ＝ 修改指定索引的x轴参数
.如果结束

' 开启还是关闭
.如果 (是否为空 (开启还是关闭))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].show”, , , , 真)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].show”, , , , 开启还是关闭)
.如果结束
' X轴数据
.如果 (是否为空 (X轴数据_JS变量名))
    .如果 (是否为空 (X轴数据))
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].data”, “”)
    .否则
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].data”, X轴数据)
    .如果结束

.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].data”, 嵌入JS变量或JS代码 (X轴数据_JS变量名))
.如果结束
' 位置
.如果 (是否为空 (位置))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].position”, , “bottom”)
.否则
    .如果 (位置)
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].position”, , “top”)
    .否则
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].position”, , “bottom”)
    .如果结束

.如果结束
' 是否两侧留空
.如果 (是否为空 (是否两侧留空))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].boundaryGap”, , , , 真)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].boundaryGap”, , , , 是否两侧留空)
.如果结束
' 刻度最大值
.如果 (是否为空 (刻度最大值))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].max”)
.否则
    .如果 (刻度最大值 ＝ “dataMax”)
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].max”, , “dataMax”)
    .否则
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].max”, , , 到数值 (刻度最大值))
    .如果结束

.如果结束
' 刻度最小值
.如果 (是否为空 (刻度最小值))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].min”)
.否则
    .如果 (刻度最小值 ＝ “dataMin”)
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].min”, , “dataMin”)
    .否则
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].min”, , , 到数值 (刻度最小值))
    .如果结束

.如果结束
' 刻度分段数
.如果 (是否为空 (刻度分段数))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 5)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 刻度分段数)
.如果结束
' 坐标轴类型
.如果 (是否为空 (坐标轴类型))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].type”, , “category”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].type”, , 坐标轴类型)
.如果结束
' 名称
.如果 (是否为空 (轴名称))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].name”, , “”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].name”, , 轴名称)
.如果结束
' 格式
.如果 (是否为空 (刻度标签_文本格式器))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.formatter”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.formatter”, , 刻度标签_文本格式器)
.如果结束
' 刻度标签旋转角度
.如果 (是否为空 (刻度标签_旋转角度))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.rotate”, , , 0)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.rotate”, , , 刻度标签_旋转角度)
.如果结束
' 间隔显示标签
.如果 (是否为空 (间隔显示标签))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.interval”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.interval”, , , 间隔显示标签)
.如果结束
' 轴颜色
.如果 (是否为空 (轴线颜色))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”, , 轴线颜色)
.如果结束
' 绑定GRID组件
.如果 (是否为空 (绑定grid组件))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].gridIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].gridIndex”, , , 绑定grid组件)
.如果结束
' 是否脱离锁定0刻度
.如果 (是否为空 (是否脱离锁定0刻度))
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].scale”, , , , 假)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].scale”, , , , 是否脱离锁定0刻度)
.如果结束
' 名称显示位置
.如果 (是否为空 (轴名称显示位置))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”, , 轴名称显示位置)
.如果结束
' 名称与轴线的距离
.如果 (是否为空 (轴名称与轴线的距离))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameGap”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameGap”, , , 轴名称与轴线的距离)
.如果结束
' 轴名称旋转角度
.如果 (是否为空 (轴名称旋转角度))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameRotate”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].nameRotate”, , , 轴名称旋转角度)
.如果结束
.如果 (是否为空 (轴位置偏移))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].offset”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].offset”, , , 轴位置偏移)
.如果结束
' 分割线_是否关闭
.如果 (是否为空 (分割线_是否关闭))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.show”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.show”, , , , 取反 (分割线_是否关闭))
.如果结束
' 分割线_颜色
.如果 (是否为空 (分割线_颜色))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”)
.否则
    .如果 (寻找文本 (分割线_颜色, “[”, , 假) ≠ -1)
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”, 分割线_颜色)
    .否则
        eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”, , 分割线_颜色)
    .如果结束

.如果结束
' 分割线_线宽
.如果 (是否为空 (分割线_线宽))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.width”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.width”, , , 分割线_线宽)
.如果结束
' 分割线_线型
.如果 (是否为空 (分割线_线样式))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.type”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.type”, , 分割线_线样式)
.如果结束
' 刻度标签_是否关闭
.如果 (是否为空 (刻度标签_是否关闭))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.show”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.show”, , , , 取反 (刻度标签_是否关闭))
.如果结束
' 刻度标签文字大小
.如果 (是否为空 (刻度标签_文字大小))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.fontSize”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.fontSize”, , , 刻度标签_文字大小)
.如果结束
' 刻度标签文字颜色
.如果 (是否为空 (刻度标签_文字颜色))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.color”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.color”, , 刻度标签_文字颜色)
.如果结束
' 轴刻度_是否关闭
.如果 (是否为空 (轴刻度_是否关闭))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisTick.show”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisTick.show”, , , , 取反 (轴刻度_是否关闭))
.如果结束
' 轴刻度_长度
.如果 (是否为空 (轴刻度_长度))
    eCharts_JSON类.删除 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisTick.length”)
.否则
    eCharts_JSON类.置新值 (“xAxis[” ＋ 到文本 (索引) ＋ “].axisTick.length”, , , 轴刻度_长度)
.如果结束
返回 (索引)

.子程序 设置组件_Y轴, 整数型, 公开, 【yAxis】，设置Y轴组件，返回此y轴的索引号，支持设置或修改多组X/Y轴组件，参数留空将保持原设定。
.参数 开启还是关闭, 逻辑型, 可空, 【show】，默认为开启，真为开启，假为关闭。
.参数 位置, 逻辑型, 可空, 【position】，默认为：假=左边。为真=右边，为假=左边。
.参数 是否脱离锁定0刻度, 逻辑型, 可空, 【scale】，默认为：假=永远显示0刻度。为真=脱离0刻度锁定（相当于设置了dataMax和dataMin但会自动在图形数据区外添加视觉缓冲区），设置"dataMax"或"dataMin"后此参数会失效。
.参数 刻度最大值, 文本型, 可空, 【max】，【可选常量：#坐标轴范围_最大值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最大值 将自动取数据在该轴上最大值。
.参数 刻度最小值, 文本型, 可空, 【min】，【可选常量：#坐标轴范围_最小值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最小值 将自动取数据在该轴上最小值。
.参数 刻度分段数, 整数型, 可空, 【splitNumber】，默认为：5
.参数 坐标轴类型, 文本型, 可空, 【type】，默认为：数值轴“value”。可选常量：#坐标轴类型_**轴。
.参数 轴名称, 文本型, 可空, 【name】，默认为空。
.参数 刻度标签_文本格式器, 文本型, 可空, 【axisLabel.formatter】，为空时默认显示原始数值，格式支持字符串模板和js回调函数。例如：“第 {value} 个”。
.参数 反向坐标轴, 逻辑型, 可空, 【inverse】，默认为假（不反向，0位在左侧），设真则反向，0位在右侧。
.参数 轴颜色, 文本型, 可空, 【axisLine.lineStyle.color】，
.参数 绑定grid组件, 整数型, 可空, 【gridIndex】默认绑定索引0的grid（grid组件不设置将会自动创建0号grid组件）。
.参数 修改指定索引的x轴参数, 整数型, 可空, 索引从0开始。留空或指定的索引不存在时将添加新x轴，指定的索引存在将覆盖其参数。
.参数 名称显示位置, 文本型, 可空, 【nameLocation】，默认为轴终点“end”，【可选常量：#轴名称位置_**】
.参数 轴名称与轴线的距离, 整数型, 可空, 【nameGap】，默认15
.参数 轴名称旋转角度, 整数型, 可空, 【nameRotate】
.参数 轴位置偏移, 整数型, 可空, 【offset】，相对于默认位置的偏移，多Y轴同时存在时有用。
.参数 分割线_是否关闭, 逻辑型, 可空, 【splitLine.show】，留空自动控制（类目轴时不显示，数值轴时显示），真=关闭，假=不关闭
.参数 分割线_颜色, 文本型, 可空, 【splitLine.lineStyle.color】，默认“#ccc”，支持16进制颜色等。支持设置json颜色数组将依次显示不同颜色。
.参数 分割线_线宽, 双精度小数型, 可空, 【splitLine.lineStyle.width】，默认1
.参数 分割线_线样式, 文本型, 可空, 【splitLine.lineStyel.type】，默认实线“solid”，【可选常量：#线样式_**】
.参数 刻度标签_是否关闭, 逻辑型, 可空, 【axisLabel.show】，默认假=开启
.参数 刻度标签_文字大小, 整数型, 可空, 【axisLabel.fontSize】，默认12
.参数 刻度标签_文字颜色, 文本型, 可空, 【axisLabel.color】，支持16进制颜色等。
.参数 轴刻度_是否关闭, 逻辑型, 可空, 【axisTick.show】，默认假=开启，真=关闭
.参数 轴刻度_长度, 双精度小数型, 可空, 【axisTick.length】，默认5
.参数 数据组, 文本型, 可空, 【data】，JSON格式数据组
.局部变量 计数器, 整数型
.局部变量 索引, 整数型

.如果 (是否为空 (修改指定索引的x轴参数) 或 修改指定索引的x轴参数 ≤ eCharts_JSON类.数组_取长度 (“yAxis”) － 1)  ' 指定的索引留空或者不存在时将创建新x轴，否则将修改指定索引的x轴参数
    索引 ＝ eCharts_JSON类.数组_加入成员 (“yAxis”, “{}”) － 1
.否则
    索引 ＝ 修改指定索引的x轴参数
.如果结束

' 开启还是关闭
.如果 (是否为空 (开启还是关闭))
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].show”, , , , 真)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].show”, , , , 开启还是关闭)
.如果结束
' 位置
.如果 (是否为空 (位置))
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].position”, , “left”)
.否则
    .如果 (位置)
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].position”, , “right”)
    .否则
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].position”, , “left”)
    .如果结束

.如果结束
' 是否脱离锁定0刻度
.如果 (是否为空 (是否脱离锁定0刻度))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].scale”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].scale”, , , , 是否脱离锁定0刻度)
.如果结束
' 刻度最大值
.如果 (是否为空 (刻度最大值))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].max”)
.否则
    .如果 (刻度最大值 ＝ “dataMax”)
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].max”, , “dataMax”)
    .否则
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].max”, , , 到数值 (刻度最大值))
    .如果结束

.如果结束
' 刻度最小值
.如果 (是否为空 (刻度最小值))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].min”)
.否则
    .如果 (刻度最小值 ＝ “dataMin”)
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].min”, , “dataMin”)
    .否则
        eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].min”, , , 到数值 (刻度最小值))
    .如果结束

.如果结束
' 刻度分段数
.如果 (是否为空 (刻度分段数))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 刻度分段数)
.如果结束
' 坐标轴类型
.如果 (是否为空 (坐标轴类型))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].type”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].type”, , 坐标轴类型)
.如果结束
' 名称
.如果 (是否为空 (轴名称))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].name”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].name”, , 轴名称)
.如果结束
' 格式
.如果 (是否为空 (刻度标签_文本格式器))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.formatter”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.formatter”, , 刻度标签_文本格式器)
.如果结束
' 反向坐标轴
.如果 (是否为空 (反向坐标轴))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].inverse”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].inverse”, , , , 反向坐标轴)
.如果结束
' 轴颜色
.如果 (是否为空 (轴颜色))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”, , 轴颜色)
.如果结束
' 绑定GRID组件
.如果 (是否为空 (绑定grid组件))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].gridIndex”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].gridIndex”, , , 绑定grid组件)
.如果结束
' 名称显示位置
.如果 (是否为空 (名称显示位置))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”, , 名称显示位置)
.如果结束
' 名称与轴线的距离
.如果真 (是否为空 (轴名称与轴线的距离) ＝ 假)
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].nameGap”, , , 轴名称与轴线的距离)
.如果真结束
' 轴名称旋转角度
.如果真 (是否为空 (轴名称旋转角度) ＝ 假)
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].nameRotate”, , , 轴名称旋转角度)
.如果真结束
' 轴位置偏移
.如果 (是否为空 (轴位置偏移))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].offset”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].offset”, , , 轴位置偏移)
.如果结束
' 分割线_是否关闭
.如果 (是否为空 (分割线_是否关闭))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.show”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.show”, , , , 取反 (分割线_是否关闭))
.如果结束
' 分割线_颜色
.如果 (是否为空 (分割线_颜色))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”)
.否则
    .如果 (寻找文本 (分割线_颜色, “[”, , 假) ≠ -1)
        置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”, 分割线_颜色)
    .否则
        置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.color”, , 分割线_颜色)
    .如果结束

.如果结束
' 分割线_线宽
.如果 (是否为空 (分割线_线宽))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.width”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.width”, , , 分割线_线宽)
.如果结束
' 分割线_线型
.如果 (是否为空 (分割线_线样式))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.type”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].splitLine.lineStyle.type”, , 分割线_线样式)
.如果结束
' 刻度标签_是否关闭
.如果 (是否为空 (刻度标签_是否关闭))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.show”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.show”, , , , 取反 (刻度标签_是否关闭))
.如果结束
' 刻度标签文字大小
.如果 (是否为空 (刻度标签_文字大小))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.fontSize”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.fontSize”, , , 刻度标签_文字大小)
.如果结束
' 刻度标签文字颜色
.如果 (是否为空 (刻度标签_文字颜色))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.color”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisLabel.color”, , 刻度标签_文字颜色)
.如果结束
' 轴刻度_是否关闭
.如果 (是否为空 (轴刻度_是否关闭))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisTick.show”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisTick.show”, , , , 取反 (轴刻度_是否关闭))
.如果结束
' 轴刻度_长度
.如果 (是否为空 (轴刻度_长度))
    删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisTick.length”)
.否则
    置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].axisTick.length”, , , 轴刻度_长度)
.如果结束
' 数据组
.如果 (是否为空 (数据组))
    eCharts_JSON类.删除 (“yAxis[” ＋ 到文本 (索引) ＋ “].data”)
.否则
    eCharts_JSON类.置新值 (“yAxis[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.如果结束
返回 (索引)

.子程序 设置组件_极坐标轴, 整数型, 公开, 【radiusAxis】，设置极坐标轴组件。返回此极坐标轴的索引。极坐标系可用于散点图和折线图。
.参数 中心位置_横, 文本型, 可空, 【center】，默认“50%”。
.参数 中心位置_纵, 文本型, 可空, 【center】，默认“50%”。
.参数 半径, 文本型, 可空, 【radius】，取值范围：百分比。例如：设“20%”表示外半径为容器尺寸（高宽较小一项）的20%长度。
.参数 径向轴_类目数据组, 文本型, 可空, 【radiusAxis.data】，设置此参数后，径向轴坐标轴类型将强制为类目轴“category”。
.参数 径向轴_坐标轴类型, 文本型, 可空, 【radiusAxis.type】，默认为：数值轴“value”。可选常量：#坐标轴类型_**轴。
.参数 径向轴_轴名称, 文本型, 可空, 【radiusAxis.name】，默认为空。
.参数 径向轴_名称显示位置, 文本型, 可空, 【radiusAxis.nameLocation】，默认为轴终点位置“end”，【可选常量：#轴名称位置_**】
.参数 径向轴_轴名称与轴线的距离, 双精度小数型, 可空, 【radiusAxis.nameGap】，默认15
.参数 径向轴_轴名称旋转角度, 双精度小数型, 可空, 【radiusAxis.nameRotate】
.参数 径向轴_反向坐标轴, 逻辑型, 可空, 【radiusAxis.inverse】，默认为假（不反向）
.参数 径向轴_刻度最大值, 文本型, 可空, 【radiusAxis.max】，【可选常量：#坐标轴范围_最大值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最大值 将自动取数据在该轴上最大值。
.参数 径向轴_刻度最小值, 文本型, 可空, 【radiusAxis.min】，【可选常量：#坐标轴范围_最小值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最小值 将自动取数据在该轴上最小值。
.参数 径向轴_刻度分段数, 整数型, 可空, 【radiusAxis.splitNumber】，默认为：5
.参数 角度轴_类目数据组, 文本型, 可空, 【angleAxis.data】，设置此参数后，角度轴坐标轴类型将强制为类目轴“category”。
.参数 角度轴_坐标轴类型, 文本型, 可空, 【angleAxis.type】，默认为：数值轴“value”。可选常量：#坐标轴类型_**轴。
.参数 角度轴_起始角度, 双精度小数型, 可空, 【angleAxis.startAngle】，默认90
.参数 角度轴_刻度增长是否按顺时针, 逻辑型, 可空, 【angleAxis.clockwise】，默认为真顺时针。
.参数 角度轴_刻度最大值, 文本型, 可空, 【angleAxis.max】，【可选常量：#坐标轴范围_最大值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最大值 将自动取数据在该轴上最大值。
.参数 角度轴_刻度最小值, 文本型, 可空, 【angleAxis.min】，【可选常量：#坐标轴范围_最小值】，默认为自动识别，可指定为具体数值（需转换为文本型），或者可指定为 #坐标轴范围_最小值 将自动取数据在该轴上最小值。
.参数 角度轴_刻度分段数, 整数型, 可空, 【angleAxis.splitNumber】，默认为：5
.参数 角度轴_是否脱离0刻度, 逻辑型, 可空, 【angleAxis.scale】，默认为假=锁定0刻度，设真时将不强制包含0刻度。
.局部变量 索引, 整数型
.局部变量 计数器, 整数型
.局部变量 临时文本, 文本型

索引 ＝ eCharts_JSON类.数组_取长度 (“polar”)
' 中心位置_横
' 中心位置_纵
.如果 (是否为空 (中心位置_横) 且 是否为空 (中心位置_纵))
    eCharts_JSON类.删除 (“polar[” ＋ 到文本 (索引) ＋ “].center”)
.否则
    .如果 (是否为空 (中心位置_横))
        临时文本 ＝ “['50%',”
    .否则
        临时文本 ＝ “['” ＋ 中心位置_横 ＋ “',”
    .如果结束
    .如果 (是否为空 (中心位置_纵))
        临时文本 ＝ 临时文本 ＋ “'50%']”
    .否则
        临时文本 ＝ 临时文本 ＋ “'” ＋ 中心位置_纵 ＋ “']”
    .如果结束
    eCharts_JSON类.置新值 (“polar[” ＋ 到文本 (索引) ＋ “].center”, 临时文本)
.如果结束
' 半径
.如果 (是否为空 (半径))
    eCharts_JSON类.删除 (“polar[” ＋ 到文本 (索引) ＋ “].radius”)
.否则
    eCharts_JSON类.置新值 (“polar[” ＋ 到文本 (索引) ＋ “].radius”, , 半径)
.如果结束
' 径向轴_类目数据组
.如果 (是否为空 (径向轴_类目数据组))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].data”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].data”, 径向轴_类目数据组)
.如果结束
' 径向轴_坐标轴类型
.如果 (是否为空 (径向轴_坐标轴类型))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].type”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].type”, , 径向轴_坐标轴类型)
.如果结束
' 径向轴_轴名称
.如果 (是否为空 (径向轴_轴名称))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].name”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].name”, , 径向轴_轴名称)
.如果结束
' 径向轴_名称显示位置
.如果 (是否为空 (径向轴_名称显示位置))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameLocation”, , 径向轴_名称显示位置)
.如果结束
' 径向轴_轴名称与轴线的距离
.如果 (是否为空 (径向轴_轴名称与轴线的距离))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameGap”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameGap”, , , 径向轴_轴名称与轴线的距离)
.如果结束
' 径向轴_轴名称旋转角度
.如果 (是否为空 (径向轴_轴名称旋转角度))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameRotate”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].nameRotate”, , , 径向轴_轴名称旋转角度)
.如果结束
' 径向轴_反向坐标轴
.如果 (是否为空 (径向轴_反向坐标轴))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].inverse”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].inverse”, , , , 径向轴_反向坐标轴)
.如果结束
' 径向轴_刻度最大值
.如果 (是否为空 (径向轴_刻度最大值))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].max”)
.否则
    .如果 (径向轴_刻度最大值 ＝ “dataMax”)
        eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].max”, , “dataMax”)
    .否则
        eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].max”, , 到文本 (径向轴_刻度最大值))
    .如果结束

.如果结束
' 径向轴_刻度最小值
.如果 (是否为空 (径向轴_刻度最小值))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].min”)
.否则
    .如果 (径向轴_刻度最小值 ＝ “dataMin”)
        eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].min”, , “dataMin”)
    .否则
        eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].min”, , 到文本 (径向轴_刻度最小值))
    .如果结束

.如果结束
' 径向轴_刻度分段数
.如果 (是否为空 (径向轴_刻度分段数))
    eCharts_JSON类.删除 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”)
.否则
    eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 径向轴_刻度分段数)
.如果结束
' 角度轴_类目数据组
.如果 (是否为空 (角度轴_类目数据组))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].data”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].data”, 角度轴_类目数据组)
.如果结束
' 角度轴_坐标轴类型
.如果 (是否为空 (角度轴_坐标轴类型))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].type”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].type”, , 角度轴_坐标轴类型)
.如果结束
' 角度轴_起始角度
.如果 (是否为空 (角度轴_起始角度))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].startAngle”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].startAngle”, , , 角度轴_起始角度)
.如果结束
' 角度轴_刻度增长是否按顺时针
.如果 (是否为空 (角度轴_刻度增长是否按顺时针))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].clockwise”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].clockwise”, , , , 角度轴_刻度增长是否按顺时针)
.如果结束
' 角度轴_刻度最大值
.如果 (是否为空 (角度轴_刻度最大值))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].max”)
.否则
    .如果 (角度轴_刻度最大值 ＝ “dataMax”)
        eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].max”, , “dataMax”)
    .否则
        eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].max”, , , 到数值 (角度轴_刻度最大值))
    .如果结束

.如果结束
' 角度轴_刻度最小值
.如果 (是否为空 (角度轴_刻度最小值))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].min”)
.否则
    .如果 (角度轴_刻度最小值 ＝ “dataMin”)
        eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].min”, , “dataMin”)
    .否则
        eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].min”, , , 到数值 (角度轴_刻度最小值))
    .如果结束

.如果结束
' 角度轴_刻度分段数
.如果 (是否为空 (角度轴_刻度分段数))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 角度轴_刻度分段数)
.如果结束
' 角度轴_是否脱离0刻度
.如果 (是否为空 (角度轴_是否脱离0刻度))
    eCharts_JSON类.删除 (“angleAxis[” ＋ 到文本 (索引) ＋ “].scale”)
.否则
    eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].scale”, , , , 角度轴_是否脱离0刻度)
.如果结束

eCharts_JSON类.置新值 (“radiusAxis[” ＋ 到文本 (索引) ＋ “].polarIndex”, , , 索引)
eCharts_JSON类.置新值 (“angleAxis[” ＋ 到文本 (索引) ＋ “].polarIndex”, , , 索引)
返回 (索引)

.子程序 设置组件_缩放, , 公开, 【dataZoom】，设置X轴或Y轴缩放组件。X、Y缩放组件全开时的索引顺序是[x外,x内,y外,y内]。
.参数 开启X轴缩放条, 逻辑型, 可空, 【inside.disabled】，真为开启，假为不开启。默认开启
.参数 开启Y轴缩放条, 逻辑型, 可空, 【inside.disabled】，真为开启，假为不开启。默认不开启
.参数 开启X轴拖动及鼠标缩放, 逻辑型, 可空, 【slider.show】，真为开启，假为不开启。默认随X轴缩放条开关
.参数 开启Y轴拖动及鼠标缩放, 逻辑型, 可空, 【slider.show】，真为开启，假为不开启。默认随Y轴缩放条开关
.参数 X轴开始位置, 整数型, 可空, 【start】，默认为0（百分比，范围：0-100)
.参数 X轴结束位置, 整数型, 可空, 【end】，默认为100（百分比，范围：0-100）
.参数 Y轴开始位置, 整数型, 可空, 【start】，默认为0（百分比，范围：0-100）
.参数 Y轴结束位置, 整数型, 可空, 【end】，默认为100（百分比，范围：0-100）
.参数 要绑定的x轴索引, 整数型, 可空 数组, 【xAxisIndex】，留空默认绑定第一个x轴，支持同时绑定多个坐标轴，所以参数为整数型数组，例如：如需绑定第一个和第三格x轴，则参数内容填：“{0,2}”（0是首位）
.参数 要绑定的y轴索引, 整数型, 可空 数组, 【yAxisIndex】，同上
.参数 鼠标交互方式, 整数型, 可空, 【inside.zoomOnMouseWheel/moveOnMouseMove/moveOnMouseWheel】，默认允许使用鼠标或滚轮来控制缩放和平移。可选参数（常量）：“#缩放组件交互_...”
.参数 拖动缩放条是否实时更新, 逻辑型, 可空, 【slider.realtime】，默认为真，拖动时实时更新视图。为假时在拖动结束后更新视图。
.参数 x轴缩放条_左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 x轴缩放条_右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 x轴缩放条_上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 x轴缩放条_下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.参数 y轴缩放条_左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 y轴缩放条_右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 y轴缩放条_上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 y轴缩放条_下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.参数 数据过滤模式_x轴, 整数型, 可空, 【inside/slider.filterMode】，默认：0=filter。缩放时对视窗外的数据的过滤模式。可选：0=filter，1=weakFilter，2=empty，3=none（不过滤数据，只改变数轴范围）。其他参数说明详见：http://www.echartsjs.com/option.html#dataZoom-slider.filterMode
.参数 数据过滤模式_y轴, 整数型, 可空, 【inside/slider.filterMode】，默认：0=filter。参数范围同上。
.参数 要绑定极坐标轴轴索引, 整数型, 可空, 【radiusAxisIndex/angleAxisIndex】，留空不绑定，使用极坐标轴时即使只有一个极坐标轴也要手动指定。
.参数 缩放条_宽度, 双精度小数型, 可空, 【width/height】，默认30
.局部变量 临时数组, 整数型, , "0"
.局部变量 计数器, 整数型
.局部变量 x_start, 整数型
.局部变量 x_end, 整数型
.局部变量 y_start, 整数型
.局部变量 y_end, 整数型

eCharts_JSON类.置新值 (“dataZoom”, “[]”)
.如果 (是否为空 (X轴开始位置))
    x_start ＝ 0
.否则
    x_start ＝ X轴开始位置
.如果结束
.如果 (是否为空 (X轴结束位置))
    x_end ＝ 100
.否则
    x_end ＝ X轴结束位置
.如果结束
.如果 (是否为空 (Y轴开始位置))
    y_start ＝ 0
.否则
    y_start ＝ Y轴开始位置
.如果结束
.如果 (是否为空 (Y轴结束位置))
    y_end ＝ 100
.否则
    y_end ＝ Y轴结束位置
.如果结束

.如果真 (是否为空 (开启X轴缩放条))
    开启X轴缩放条 ＝ 真
.如果真结束
.如果真 (是否为空 (拖动缩放条是否实时更新))
    拖动缩放条是否实时更新 ＝ 真
.如果真结束

eCharts_JSON类.数组_加入成员 (“dataZoom”, “{}”)
eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].show”, , , , 开启X轴缩放条)
eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].type”, , “slider”)
eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , x_start)
eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , x_end)
.如果 (是否为空 (要绑定的x轴索引))
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].xAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].xAxisIndex”, 工具_创建JSON数组 (, , 要绑定的x轴索引))
.如果结束
eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].realtime”, , , , 拖动缩放条是否实时更新)
.如果真 (是否为空 (x轴缩放条_左) ＝ 假)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].left”, , x轴缩放条_左)
.如果真结束
.如果真 (是否为空 (x轴缩放条_上) ＝ 假)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].top”, , x轴缩放条_上)
.如果真结束
.如果真 (是否为空 (x轴缩放条_右) ＝ 假)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].right”, , x轴缩放条_右)
.如果真结束
.如果真 (是否为空 (x轴缩放条_下) ＝ 假)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].bottom”, , x轴缩放条_下)
.如果真结束
' 要绑定极坐标轴轴索引
.如果 (是否为空 (要绑定极坐标轴轴索引))
    eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”)
    eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”)
.否则
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”, , , 要绑定极坐标轴轴索引)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”, , , 要绑定极坐标轴轴索引)
.如果结束
' 缩放条_宽度
.如果 (是否为空 (缩放条_宽度))
    eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].height”)
.否则
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].height”, , , 缩放条_宽度)
.如果结束

.如果真 (是否为空 (开启X轴拖动及鼠标缩放) ＝ 假 或 开启X轴缩放条)
    eCharts_JSON类.数组_加入成员 (“dataZoom”, “{}”)
    .如果 (是否为空 (开启X轴拖动及鼠标缩放))
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].disabled”, , , , 取反 (开启X轴缩放条))
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].disabled”, , , , 取反 (开启X轴拖动及鼠标缩放))
    .如果结束
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].type”, , “inside”)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , x_start)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , x_end)
    .如果 (是否为空 (要绑定的x轴索引))
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].xAxisIndex”, , , 0)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].xAxisIndex”, 工具_创建JSON数组 (, , 要绑定的x轴索引))
    .如果结束

    .如果真 (是否为空 (数据过滤模式_x轴) ＝ 假 且 数据过滤模式_x轴 ≥ 0 且 数据过滤模式_x轴 ≤ 3)
        .判断开始 (数据过滤模式_x轴 ＝ 0)  ' filter
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “filter”)
        .判断 (数据过滤模式_x轴 ＝ 1)  ' weakFilter
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “weakFilter”)
        .判断 (数据过滤模式_x轴 ＝ 2)  ' empty
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “empty”)
        .判断 (数据过滤模式_x轴 ＝ 3)  ' none
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “none”)
        .默认

        .判断结束

    .如果真结束

    .如果真 (鼠标交互方式 ≥ 1 且 鼠标交互方式 ≤ 5)
        .判断开始 (鼠标交互方式 ＝ 1)  ' 允许鼠标交互
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , , , 真)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , , , 真)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , , , 真)
        .判断 (鼠标交互方式 ＝ 2)  ' 不允许鼠标交互
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , , , 假)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , , , 假)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , , , 假)
        .判断 (鼠标交互方式 ＝ 3)  ' 按shift时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “shift”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “shift”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “shift”)
        .判断 (鼠标交互方式 ＝ 4)  ' 按ctrl时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “ctrl”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “ctrl”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “ctrl”)
        .判断 (鼠标交互方式 ＝ 5)  ' 按alt时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “alt”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “alt”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “alt”)
        .默认

        .判断结束

    .如果真结束

    ' 要绑定极坐标轴轴索引
    .如果 (是否为空 (要绑定极坐标轴轴索引))
        eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”)
        删除 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”, , , 要绑定极坐标轴轴索引)
        置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”, , , 要绑定极坐标轴轴索引)
    .如果结束

.如果真结束

.如果真 (开启Y轴缩放条)
    eCharts_JSON类.数组_加入成员 (“dataZoom”, “{}”)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].show”, , , , 真)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].type”, , “slider”)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , y_start)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , y_end)
    .如果 (是否为空 (要绑定的y轴索引))
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, , , 0)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, 工具_创建JSON数组 (, , 要绑定的y轴索引))
    .如果结束
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].realtime”, , , , 拖动缩放条是否实时更新)
    .如果真 (是否为空 (y轴缩放条_左) ＝ 假)
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].left”, , y轴缩放条_左)
    .如果真结束
    .如果真 (是否为空 (y轴缩放条_上) ＝ 假)
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].top”, , y轴缩放条_上)
    .如果真结束
    .如果真 (是否为空 (y轴缩放条_右) ＝ 假)
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].right”, , y轴缩放条_右)
    .如果真结束
    .如果真 (是否为空 (y轴缩放条_下) ＝ 假)
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].bottom”, , y轴缩放条_下)
    .如果真结束

    ' 要绑定极坐标轴轴索引
    .如果 (是否为空 (要绑定极坐标轴轴索引))
        eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”)
        删除 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”, , , 要绑定极坐标轴轴索引)
        置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”, , , 要绑定极坐标轴轴索引)
    .如果结束
    ' 缩放条_宽度
    .如果 (是否为空 (缩放条_宽度))
        删除 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].width”)
    .否则
        置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].width”, , , 缩放条_宽度)
    .如果结束

.如果真结束

.如果真 (是否为空 (开启Y轴拖动及鼠标缩放) ＝ 假 或 开启Y轴缩放条)
    eCharts_JSON类.数组_加入成员 (“dataZoom”, “{}”)
    .如果 (是否为空 (开启Y轴拖动及鼠标缩放))
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].disabled”, , , , 取反 (开启Y轴缩放条))
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].disabled”, , , , 取反 (开启Y轴拖动及鼠标缩放))
    .如果结束
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].type”, , “inside”)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].start”, , , y_start)
    eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].end”, , , y_end)
    .如果 (是否为空 (要绑定的y轴索引))
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, , , 0)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].yAxisIndex”, 工具_创建JSON数组 (, , 要绑定的y轴索引))
    .如果结束

    .如果真 (是否为空 (数据过滤模式_y轴) ＝ 假 且 数据过滤模式_y轴 ≥ 0 且 数据过滤模式_y轴 ≤ 3)
        .判断开始 (数据过滤模式_y轴 ＝ 0)  ' filter
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “filter”)
        .判断 (数据过滤模式_y轴 ＝ 1)  ' weakFilter
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “weakFilter”)
        .判断 (数据过滤模式_y轴 ＝ 2)  ' empty
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “empty”)
        .判断 (数据过滤模式_y轴 ＝ 3)  ' none
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].filterMode”, , “none”)
        .默认

        .判断结束

    .如果真结束

    .如果真 (鼠标交互方式 ≥ 1 且 鼠标交互方式 ≤ 5)
        .判断开始 (鼠标交互方式 ＝ 1)  ' 允许鼠标交互
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , , , 真)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , , , 真)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , , , 真)
        .判断 (鼠标交互方式 ＝ 2)  ' 不允许鼠标交互
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , , , 假)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , , , 假)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , , , 假)
        .判断 (鼠标交互方式 ＝ 3)  ' 按shift时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “shift”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “shift”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “shift”)
        .判断 (鼠标交互方式 ＝ 4)  ' 按ctrl时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “ctrl”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “ctrl”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “ctrl”)
        .判断 (鼠标交互方式 ＝ 5)  ' 按alt时允许
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].zoomOnMouseWheel”, , “alt”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseMove”, , “alt”)
            eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].moveOnMouseWheel”, , “alt”)
        .默认

        .判断结束

    .如果真结束

    ' 要绑定极坐标轴轴索引
    .如果 (是否为空 (要绑定极坐标轴轴索引))
        eCharts_JSON类.删除 (“dataZoom[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”)
        删除 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”)
    .否则
        eCharts_JSON类.置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].radiusAxisIndex”, , , 要绑定极坐标轴轴索引)
        置新值 (“dataZoom[” ＋ 到文本 (数组_取长度 (“dataZoom”) － 1) ＋ “].angleAxisIndex”, , , 要绑定极坐标轴轴索引)
    .如果结束

.如果真结束


.子程序 设置组件_鼠标提示, , 公开, 【tooltip】，设置鼠标提示组件。
.参数 触发类型_数据项或坐标轴, 逻辑型, 可空, 【trigger】，默认为假=数据项"item"，真=坐标轴"axis"。数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。
.参数 坐标指示器类型, 文本型, 可空, 【type】，默认为直线指示器"line"，可选常量：#坐标指示器类型_***。
.参数 是否多坐标轴联动, 逻辑型, 可空, 【axisPointer.link】，默认为假，设真时将自动联动所有X轴。
.参数 开启还是关闭, 逻辑型, 可空, 【show】，默认为开启。真=开启，假=关闭。
.参数 指示线颜色, 文本型, 可空, 【lineStyle.color】，支持16进制颜色例如“#3C5AFF”
.参数 指示线宽度, 双精度小数型, 可空, 【lineStyle.width】，直线指示器和十字指示器的线宽度，阴影指示不支持指定。
.参数 指示线样式, 文本型, 可空, 【lineStyle.type】，【可选常量：#线样式_实线、#线样式_虚线、#线样式_点】。直线指示器默认为实线，十字指示默认为虚线，阴影指示不支持指定。
.参数 一直显示提示框, 逻辑型, 可空, 【alwaysShowContent】，默认假。设真后将会一直显示，不再隐藏。
.参数 固定提示框位置, 文本型, 可空, 【position】，示例：['50%','50%'] 或 [30,50] 。前者固定显示在容器正中，后者将显示在离左侧30像素，离顶部50像素的位置。
.参数 提示内容_内容格式器, 文本型, 可空, 【formatter】，支持字符串模板和js回调函数。
.参数 提示内容_背景颜色, 文本型, 可空, 【backgroundColor】
.参数 提示内容_文本颜色, 文本型, 可空, 【textStyle.color】
.参数 提示内容_文字大小, 双精度小数型, 可空, 【textStyle.fontSize】，默认为14
.参数 指示器文本标签_颜色, 文本型, 可空, 【axisPointer.label.color】
.参数 指示器文本标签_背景颜色, 文本型, 可空, 【axisPointer.label.backgroundColor】
.参数 指示器文本标签_文字大小, 双精度小数型, 可空, 【axisPointer.label.fontSize】，默认12
.参数 指示器文本标签_内容格式器, 文本型, 可空, 【axisPointer.label.formatter】，支持字符串模板和js回调函数。

.如果真 (是否为空 (开启还是关闭))
    开启还是关闭 ＝ 真
.如果真结束
eCharts_JSON类.置新值 (“tooltip.show”, , , , 开启还是关闭)
.如果 (触发类型_数据项或坐标轴)
    eCharts_JSON类.置新值 (“tooltip.trigger”, , “axis”)
.否则
    eCharts_JSON类.置新值 (“tooltip.trigger”, , “item”)
.如果结束
.如果真 (是否为空 (坐标指示器类型) ＝ 假)
    eCharts_JSON类.置新值 (“tooltip.axisPointer.type”, , 坐标指示器类型)
.如果真结束
' 是否多坐标轴联动
.如果 (是否为空 (是否多坐标轴联动))
    eCharts_JSON类.删除 (“axisPointer.link.xAxisIndex”)
.否则
    eCharts_JSON类.置新值 (“axisPointer.link.xAxisIndex”, , “all”)
.如果结束
' 指示线颜色
.如果 (是否为空 (指示线颜色))
    eCharts_JSON类.删除 (“tooltip.lineStyle.color”)
    eCharts_JSON类.删除 (“tooltip.crossStyle.color”)
.否则
    eCharts_JSON类.置新值 (“tooltip.lineStyle.color”, , 指示线颜色)
    eCharts_JSON类.置新值 (“tooltip.crossStyle.color”, , 指示线颜色)
.如果结束
' 指示线宽度
.如果 (是否为空 (指示线宽度))
    eCharts_JSON类.删除 (“tooltip.lineStyle.width”)
    eCharts_JSON类.删除 (“tooltip.crossStyle.width”)
.否则
    eCharts_JSON类.置新值 (“tooltip.lineStyle.width”, , , 指示线宽度)
    eCharts_JSON类.置新值 (“tooltip.crossStyle.width”, , , 指示线宽度)
.如果结束
' 指示线样式
.如果 (是否为空 (指示线样式))
    eCharts_JSON类.删除 (“tooltip.lineStyle.type”)
    eCharts_JSON类.删除 (“tooltip.crossStyle.type”)
.否则
    eCharts_JSON类.置新值 (“tooltip.lineStyle.type”, , 指示线样式)
    eCharts_JSON类.置新值 (“tooltip.crossStyle.type”, , 指示线样式)
.如果结束
' 一直显示提示框
.如果 (是否为空 (一直显示提示框))
    eCharts_JSON类.删除 (“tooltip.alwaysShowContent”)
.否则
    eCharts_JSON类.置新值 (“tooltip.alwaysShowContent”, , , , 一直显示提示框)
.如果结束
' 固定提示框位置
.如果 (是否为空 (固定提示框位置))
    eCharts_JSON类.删除 (“tooltip.position”)
.否则
    eCharts_JSON类.置新值 (“tooltip.position”, 固定提示框位置)
.如果结束
' 提示内容_内容格式器
.如果 (是否为空 (提示内容_内容格式器))
    eCharts_JSON类.删除 (“tooltip.formatter”)
.否则
    eCharts_JSON类.置新值 (“tooltip.formatter”, , 提示内容_内容格式器)
.如果结束
' 提示内容_背景颜色
.如果 (是否为空 (提示内容_背景颜色))
    eCharts_JSON类.删除 (“tooltip.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (“tooltip.backgroundColor”, , 提示内容_背景颜色)
.如果结束
' 提示内容_文本颜色
.如果 (是否为空 (提示内容_文本颜色))
    eCharts_JSON类.删除 (“tooltip.textStyle.color”)
.否则
    eCharts_JSON类.置新值 (“tooltip.textStyle.color”, , 提示内容_文本颜色)
.如果结束
' 提示内容_文本大小
.如果 (是否为空 (提示内容_文字大小))
    eCharts_JSON类.删除 (“tooltip.textStyle.fontSize”)
.否则
    eCharts_JSON类.置新值 (“tooltip.textStyle.fontSize”, , , 提示内容_文字大小)
.如果结束
' 指示器文本标签_颜色
.如果 (是否为空 (指示器文本标签_颜色))
    eCharts_JSON类.删除 (“tooltip.axisPointer.label.color”)
.否则
    eCharts_JSON类.置新值 (“tooltip.axisPointer.label.color”, , 指示器文本标签_颜色)
.如果结束
' 指示器文本标签_背景颜色
.如果 (是否为空 (指示器文本标签_背景颜色))
    eCharts_JSON类.删除 (“tooltip.axisPointer.label.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (“tooltip.axisPointer.label.backgroundColor”, , 指示器文本标签_背景颜色)
.如果结束
' 指示器文本标签_文字大小
.如果 (是否为空 (指示器文本标签_文字大小))
    eCharts_JSON类.删除 (“tooltip.axisPointer.label.fontSize”)
.否则
    eCharts_JSON类.置新值 (“tooltip.axisPointer.label.fontSize”, , , 指示器文本标签_文字大小)
.如果结束
' 指示器文本标签_内容格式器
.如果 (是否为空 (指示器文本标签_内容格式器))
    eCharts_JSON类.删除 (“tooltip.axisPointer.label.formatter”)
.否则
    eCharts_JSON类.置新值 (“tooltip.axisPointer.label.formatter”, , 指示器文本标签_内容格式器)
.如果结束


.子程序 设置组件_时间轴_图形配置组_添加一个, , 公开
.参数 要添加的图形配置, Echarts类_图形

.如果真 (时间轴_集合配置.数组_取长度 () ＝ 0)
    时间轴_集合配置.解析 (“[]”)
.如果真结束
时间轴_集合配置.数组_加入成员 (, 要添加的图形配置.取代码 (假))

.子程序 设置组件_时间轴_公用配置, , 公开, 【timeline】，设置时间轴的公用配置，时间轴组件允许自动/手动从多组图形配置option中切换操作。【请注意：本命令请在基本图形参数json设置完毕最后调用。】
.参数 公用配置option, eCharts_JSON类, 可空, 公用图形配置json，留空将自动调用图形类内部各组件配置代码。
.参数 数据组, 文本型, , 【data】时间轴组件数据组，请使用‘工具_创建JSON数组（）’命令生成。
.参数 显示或隐藏, 逻辑型, 可空, 【show】，默认为显示。真=显示，假=隐藏（功能依旧存在）。
.参数 轴类型, 文本型, 可空, 【axisType】，默认为“time”时间轴，可选常量：“#时间轴组件类型_**轴”。
.参数 当前选中, 整数型, 可空, 【currentIndex】，默认为0（从0开始）。
.参数 自动播放, 逻辑型, 可空, 【autoPlay】，默认为不自动播放。真=自动播放（将自动正向循环播放），假=不自动播放。
.参数 自动播放间隔时间, 整数型, 可空, 【playInterval】，默认为2000ms
.参数 左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.参数 水平或竖直摆放, 文本型, 可空, 【orient】，默认为“horizontal”（水平放置），可选常量：“#时间轴组件摆放_**”
.参数 刻度标签_旋转角度, 整数型, 可空, 【label.rotate】，默认不旋转0，角度值：-90~90。用于类目标签不够位置显示时候通过旋转防止标签直接重叠。
.参数 是否显示播放控制按钮, 逻辑型, 可空, 【controlStyle.show】，默认不显示，真=显示，假=不显示。
.局部变量 json, eCharts_JSON类

时间轴_基本配置.解析 ()
.如果 (是否为空 (公用配置option))
    时间轴_基本配置.置新值 (“baseOption.__baseOption”, 嵌入JS变量或JS代码 (“__baseOption”))
.否则
    时间轴_基本配置.置新值 (“baseOption”, 公用配置option.取代码 (假))
.如果结束
时间轴_基本配置.置新值 (“options”, 嵌入JS变量或JS代码 (“__options”))
时间轴_基本配置.置新值 (“baseOption.timeline.data”, 数据组)
.如果 (是否为空 (显示或隐藏))
    时间轴_基本配置.置新值 (“baseOption.timeline.show”, , , , 真)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.show”, , , , 显示或隐藏)
.如果结束
.如果 (是否为空 (轴类型))
    时间轴_基本配置.置新值 (“baseOption.timeline.axisType”, , #时间轴组件类型_时间轴)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.axisType”, , 轴类型)
.如果结束
.如果 (是否为空 (当前选中))
    时间轴_基本配置.置新值 (“baseOption.timeline.currentIndex”, , , 0)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.currentIndex”, , , 当前选中)
.如果结束
.如果 (是否为空 (自动播放))
    时间轴_基本配置.置新值 (“baseOption.timeline.autoPlay”, , , , 假)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.autoPlay”, , , , 自动播放)
.如果结束
.如果 (是否为空 (自动播放间隔时间))
    时间轴_基本配置.置新值 (“baseOption.timeline.playInterval”, , , 2000)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.playInterval”, , , 自动播放间隔时间)
.如果结束
.如果 (是否为空 (左))
    时间轴_基本配置.置新值 (“baseOption.timeline.left”, , “auto”)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.left”, , 左)
.如果结束
.如果 (是否为空 (右))
    时间轴_基本配置.置新值 (“baseOption.timeline.right”, , “auto”)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.right”, , 右)
.如果结束
.如果 (是否为空 (上))
    时间轴_基本配置.置新值 (“baseOption.timeline.top”, , “auto”)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.top”, , 上)
.如果结束
.如果 (是否为空 (下))
    时间轴_基本配置.置新值 (“baseOption.timeline.bottom”, , “auto”)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.bottom”, , 下)
.如果结束
.如果 (是否为空 (水平或竖直摆放))
    时间轴_基本配置.置新值 (“baseOption.timeline.orient”, , #时间轴组件摆放_水平放置)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.orient”, , 水平或竖直摆放)
.如果结束
.如果 (是否为空 (刻度标签_旋转角度))
    时间轴_基本配置.置新值 (“baseOption.timeline.label.rotate”, , , 0)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.label.rotate”, , , 刻度标签_旋转角度)
.如果结束
.如果 (是否为空 (是否显示播放控制按钮))
    时间轴_基本配置.置新值 (“baseOption.timeline.controlStyle.show”, , , , 假)
.否则
    时间轴_基本配置.置新值 (“baseOption.timeline.controlStyle.show”, , , , 是否显示播放控制按钮)
.如果结束



.子程序 设置组件_坐标轴网格grid, 整数型, 公开, 【grid】，返回当前坐标轴grid组件索引值（设置多个坐标轴网格请重复调用本命令）,单坐标轴时本命令可以省略，将自动使用默认参数创建坐标轴。同一个echarts图形允许同时存在多个坐标轴，网格grid组件用于分别控制各个坐标轴系的位置尺寸等。
.参数 指定grid组件索引, 整数型, 可空, 组件索引（从0开始），不指定或索引不存在将添加一个新的grid，指定索引将修改指定grid的配置。
.参数 是否显示, 逻辑型, 可空, 【show】，默认：假=不显示。是否显示直角坐标系网格，设置不显示并不影响尺寸位置控制参数，但如需设置直角坐标轴背景或边框颜色，此项需设置为真。
.参数 Z层次, 整数型, 可空, 【z】，默认：2。多个坐标轴重叠时此参数将决定哪个grid显示于上层。
.参数 左, 文本型, 可空, 【left】，默认：“10%”。grid组件距离容器左侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 右, 文本型, 可空, 【right】，默认：“10%”。grid组件距离容器右侧的距离。本参数可支持像素值、百分比。
.参数 上, 文本型, 可空, 【top】，默认：“60px”。grid组件距离容器上侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 下, 文本型, 可空, 【bottom】，默认：“60px”。grid组件距离容器底部的距离。本参数可支持像素值、百分比。
.参数 宽度, 文本型, 可空, 【width】，默认：“auto”。grid组件的宽度，默认自适应。本参数可支持像素值、百分比。
.参数 高度, 文本型, 可空, 【height】，默认：“auto”。grid组件的高度，默认自适应。本参数可支持像素值、百分比。
.参数 是否包含刻度标签, 逻辑型, 可空, 【containLabel】，默认：假。grid 区域是否包含坐标轴的刻度标签。为真时尺寸参数设置的区域将包含坐标轴标签等所有内容（可防止标签溢出），为假时尺寸参数设置的区域仅包含坐标轴形成的矩形区域（可有效控制坐标轴对齐）
.参数 背景颜色, 文本型, 可空, 【backgroundColor】，默认：“transparent”（透明）。本参数设置生效需设置grid组件显示=真。
.参数 边框颜色, 文本型, 可空, 【borderColor】，默认：“#ccc”。本参数设置生效需设置grid组件显示=真。
.局部变量 索引, 整数型

.如果 (是否为空 (指定grid组件索引) ＝ 假 且 eCharts_JSON类.数组_取长度 (“grid”) ≥ 索引 ＋ 1)
    索引 ＝ 指定grid组件索引
.否则
    索引 ＝ eCharts_JSON类.数组_加入成员 (“grid”, “{}”) － 1
.如果结束

.如果 (是否为空 (是否显示))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].show”, , , , 假)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].show”, , , , 是否显示)
.如果结束
.如果 (是否为空 (Z层次))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].z”, , , 2)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].z”, , , Z层次)
.如果结束
.如果 (是否为空 (左))
    eCharts_JSON类.删除 (“grid[” ＋ 到文本 (索引) ＋ “].left”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].left”, , 左)
.如果结束
.如果 (是否为空 (右))
    eCharts_JSON类.删除 (“grid[” ＋ 到文本 (索引) ＋ “].right”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].right”, , 右)
.如果结束
.如果 (是否为空 (上))
    eCharts_JSON类.删除 (“grid[” ＋ 到文本 (索引) ＋ “].top”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].top”, , 上)
.如果结束
.如果 (是否为空 (下))
    eCharts_JSON类.删除 (“grid[” ＋ 到文本 (索引) ＋ “].bottom”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].bottom”, , 下)
.如果结束
.如果 (是否为空 (宽度))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].width”, , “auto”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].width”, , 宽度)
.如果结束
.如果 (是否为空 (高度))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].height”, , “auto”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].height”, , 高度)
.如果结束
.如果 (是否为空 (是否包含刻度标签))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].containLabel”, , , , 假)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].containLabel”, , , , 是否包含刻度标签)
.如果结束
.如果 (是否为空 (背景颜色))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].backgroundColor”, , “transparent”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].backgroundColor”, , 背景颜色)
.如果结束
.如果 (是否为空 (边框颜色))
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].borderColor”, , “#ccc”)
.否则
    eCharts_JSON类.置新值 (“grid[” ＋ 到文本 (索引) ＋ “].borderColor”, , 边框颜色)
.如果结束

返回 (索引)

.子程序 设置组件_视觉映射, , 公开, 【visualMap】，设置视觉映射组件，用于进行视觉编码，也就是将数据映射到视觉元素（视觉通道）。
.参数 是否显示, 逻辑型, 可空, 【show】，默认显示，设置假不显示时数据映射功能还存在。
.参数 类型, 文本型, 可空, 【type】，默认连续型“continuous”，【可选常量：#视觉映射_类型_连续型  或  #视觉映射_类型_分段型】
.参数 布局方式, 文本型, 可空, 【orient】，水平或垂直布局，【可选常量：#布局_**】
.参数 反转显示, 逻辑型, 可空, 【inverse】，水平或者垂直反转显示。
.参数 宽度, 双精度小数型, 可空, 【itemWidth】，默认20，控制条宽度。
.参数 高度, 双精度小数型, 可空, 【itemHeight】，默认140，控制条高度。
.参数 左, 文本型, 可空, 【left】，默认：“0”。组件距离容器左侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 右, 文本型, 可空, 【right】，默认：“auto”。组件距离容器右侧的距离。本参数可支持像素值、百分比。
.参数 上, 文本型, 可空, 【top】，默认：“auto”。组件距离容器上侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 下, 文本型, 可空, 【bottom】，默认：“0”。组件距离容器底部的距离。本参数可支持像素值、百分比。
.参数 绑定的图形索引, 整数型, 可空 数组, 【seriesIndex】，接受整数型数组，默认绑定全部系列，索引从0开始。
.参数 两端的文本, 文本型, 可空 数组, 【text】，接受文本型数组，成员数>=2,前两个成员将分别表示min和max端文本，例如：{"高","低"}
.参数 最大值, 双精度小数型, 可空, 【max】
.参数 最小值, 双精度小数型, 可空, 【min】
.参数 手柄默认范围, 双精度小数型, 可空 数组, 【range】，接受双精度小数数组，数组成员>=2，数组前两个成员将表示手柄默认位置最小值和最大值。
.参数 范围内颜色组, 文本型, 可空 数组, 【inRange.color】，接受文本型数组，选中范围内的颜色组，多个颜色将渐变显示，顺序从小到大。
.参数 范围外颜色组, 文本型, 可空 数组, 【outOfRange.color】，接受文本型数组，选中范围外的颜色组，多个颜色将渐变显示，顺序从小到大。
.参数 分段数量, 整数型, 可空, 【splitNumber】，自动平分切段，设置自定义分段后将失效。
.参数 自定义分段, 文本型, 可空, 【pieces】，自定义分段，由于分段逻辑太过自由，所以仅支持json分段规则，规则请查阅官网文档:http://echarts.baidu.com/option.html#visualMap-piecewise.pieces
.参数 分段名称, 文本型, 可空 数组, 【categories】，例如可指定{“严重污染”，“轻度污染”，“良好”}
.参数 分段时是否单选, 逻辑型, 可空, 【selectedMode】，默认多选
.参数 范围手柄开关, 逻辑型, 可空, 【calculable】，默认假=关闭
.局部变量 索引, 整数型
.局部变量 计数器1, 整数型
.局部变量 临时文本, 文本型

索引 ＝ eCharts_JSON类.数组_加入成员 (“visualMap”, “{}”) － 1
' 是否显示
.如果 (是否为空 (是否显示))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].show”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].show”, , , , 是否显示)
.如果结束
' 类型
.如果 (是否为空 (类型))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].type”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].type”, , 类型)
.如果结束
' 布局方式
.如果 (是否为空 (布局方式))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].orient”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].orient”, , 布局方式)
.如果结束
' 反转显示
.如果 (是否为空 (反转显示))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].inverse”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].inverse”, , , , 反转显示)
.如果结束
' 宽度
.如果 (是否为空 (宽度))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].itemWidth”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].itemWidth”, , , 宽度)
.如果结束
' 高度
.如果 (是否为空 (高度))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].itemHeight”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].itemHeight”, , , 高度)
.如果结束
' 左
.如果 (是否为空 (左))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].left”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].left”, , 左)
.如果结束
' 右
.如果 (是否为空 (右))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].right”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].right”, , 右)
.如果结束
' 上
.如果 (是否为空 (上))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].top”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].top”, , 上)
.如果结束
' 下
.如果 (是否为空 (下))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].bottom”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].bottom”, , 下)
.如果结束
' 绑定的图形索引
.如果 (是否为空 (绑定的图形索引))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].seriesIndex”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].seriesIndex”, 工具_创建JSON数组 (, , 绑定的图形索引))
.如果结束
' 两端的文本
.如果 (取数组成员数 (两端的文本) ≥ 2)
    临时文本 ＝ “[”
    .计次循环首 (2, 计数器1)
        .如果真 (计数器1 ≠ 1)
            临时文本 ＝ 临时文本 ＋ “,”
        .如果真结束
        临时文本 ＝ 临时文本 ＋ “'” ＋ 两端的文本 [计数器1] ＋ “'”
    .计次循环尾 ()
    临时文本 ＝ 临时文本 ＋ “]”
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].text”, 临时文本)
.否则
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].text”)
.如果结束
' 最大值
.如果 (是否为空 (最大值))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].max”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].max”, , , 最大值)
.如果结束
' 最小值
.如果 (是否为空 (最小值))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].min”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].min”, , , 最小值)
.如果结束
' 手柄默认范围
.如果 (取数组成员数 (手柄默认范围) ≥ 2)
    临时文本 ＝ “[”
    .计次循环首 (2, 计数器1)
        .如果真 (计数器1 ≠ 1)
            临时文本 ＝ 临时文本 ＋ “,”
        .如果真结束
        临时文本 ＝ 临时文本 ＋ 到文本 (手柄默认范围 [计数器1])
    .计次循环尾 ()
    临时文本 ＝ 临时文本 ＋ “]”
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].range”, 临时文本)
.否则
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].range”)
.如果结束
' 范围内颜色组
.如果 (是否为空 (范围内颜色组))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].inRange.color”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].inRange.color”, 工具_创建JSON数组 (范围内颜色组))
.如果结束
' 范围外颜色组
.如果 (是否为空 (范围外颜色组))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].outOfRange.color”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].outOfRange.color”, 工具_创建JSON数组 (范围外颜色组))
.如果结束
' 分段数量
.如果 (是否为空 (分段数量))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].splitNumber”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 分段数量)
.如果结束
' 自定义分段
.如果 (是否为空 (自定义分段))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].pieces”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].pieces”, 自定义分段)
.如果结束
' 分段名称
.如果 (是否为空 (分段名称))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].categories”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].categories”, 工具_创建JSON数组 (分段名称))
.如果结束
' 分段时是否单选
.如果 (是否为空 (分段时是否单选))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].selectedMode”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].selectedMode”, , , , 分段时是否单选)
.如果结束
' 范围手柄开关
.如果 (是否为空 (范围手柄开关))
    eCharts_JSON类.删除 (“visualMap[” ＋ 到文本 (索引) ＋ “].calculable”)
.否则
    eCharts_JSON类.置新值 (“visualMap[” ＋ 到文本 (索引) ＋ “].calculable”, , , , 范围手柄开关)
.如果结束


.子程序 设置组件_工具栏, , 公开, 【toolbox】，开启或关闭工具栏组件。
.参数 开启还是关闭工具组件, 逻辑型, 可空, 【show】，开启或关闭工具栏组件。默认开启。真=开启，假=关闭。
.参数 开启还是关闭_保存图片工具, 逻辑型, 可空, 【feature.saveAsImage.show】开启或关闭保存图片工具，显示需开启工具栏组件。
.参数 开启还是关闭_配置项还原工具, 逻辑型, 可空, 【feature.restore.show】，开启或关闭配置项还原工具，显示需开启工具栏组件。
.参数 开启还是关闭_数据视图工具, 逻辑型, 可空, 【feature.dataView.show】，开启或关闭数据视图工具，显示需开启工具栏组件。
.参数 开启还是关闭_区域缩放工具, 逻辑型, 可空, 【feature.dataZoom.show】，开启或关闭区域缩放工具，显示需开启工具栏组件。
.参数 开启还是关闭_动态类型切换工具, 逻辑型, 可空, 【feature.magicType.show】，开启或关闭动态类型切换工具，显示需开启工具栏组件。
.参数 开启还是关闭_选框组件工具, 逻辑型, 可空, 【feature.brush.show】，开启或关闭选框组件工具，显示需开启工具栏组件。
.参数 左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.局部变量 计数器, 整数型

.如果真 (是否为空 (开启还是关闭工具组件))
    开启还是关闭工具组件 ＝ 真
.如果真结束
.如果 (eCharts_JSON类.数组_取长度 (“toolbox”) ≥ 1)
    .计次循环首 (eCharts_JSON类.数组_取长度 (“toolbox”), 计数器)
        eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].show”, , , , 开启还是关闭工具组件)
        .如果真 (是否为空 (开启还是关闭_保存图片工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.saveAsImage.show”, , , , 开启还是关闭_保存图片工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_配置项还原工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.restore.show”, , , , 开启还是关闭_配置项还原工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_数据视图工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.dataView.show”, , , , 开启还是关闭_数据视图工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_区域缩放工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.dataZoom.show”, , , , 开启还是关闭_区域缩放工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_动态类型切换工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.magicType.show”, , , , 开启还是关闭_动态类型切换工具)
        .如果真结束
        .如果真 (是否为空 (开启还是关闭_选框组件工具) ＝ 假)
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].feature.brush.show”, , , , 开启还是关闭_选框组件工具)
        .如果真结束
        .如果 (是否为空 (左))
            eCharts_JSON类.删除 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].left”)
        .否则
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].left”, , 左)
        .如果结束
        .如果 (是否为空 (右))
            eCharts_JSON类.删除 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].right”)
        .否则
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].right”, , 右)
        .如果结束
        .如果 (是否为空 (上))
            eCharts_JSON类.删除 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].top”)
        .否则
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].top”, , 上)
        .如果结束
        .如果 (是否为空 (下))
            eCharts_JSON类.删除 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].bottom”)
        .否则
            eCharts_JSON类.置新值 (“toolbox[” ＋ 到文本 (计数器 － 1) ＋ “].bottom”, , 下)
        .如果结束

    .计次循环尾 ()
.否则
    eCharts_JSON类.置新值 (“toolbox.show”, , , , 开启还是关闭工具组件)
    .如果真 (是否为空 (开启还是关闭_保存图片工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.saveAsImage.show”, , , , 开启还是关闭_保存图片工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_配置项还原工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.restore.show”, , , , 开启还是关闭_配置项还原工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_数据视图工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.dataView.show”, , , , 开启还是关闭_数据视图工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_区域缩放工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.dataZoom.show”, , , , 开启还是关闭_区域缩放工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_动态类型切换工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.magicType.show”, , , , 开启还是关闭_动态类型切换工具)
    .如果真结束
    .如果真 (是否为空 (开启还是关闭_选框组件工具) ＝ 假)
        eCharts_JSON类.置新值 (“toolbox.feature.brush.show”, , , , 开启还是关闭_选框组件工具)
    .如果真结束
    .如果 (是否为空 (左))
        eCharts_JSON类.删除 (“toolbox.left”)
    .否则
        eCharts_JSON类.置新值 (“toolbox.left”, , 左)
    .如果结束
    .如果 (是否为空 (右))
        eCharts_JSON类.删除 (“toolbox.right”)
    .否则
        eCharts_JSON类.置新值 (“toolbox.right”, , 右)
    .如果结束
    .如果 (是否为空 (上))
        eCharts_JSON类.删除 (“toolbox.top”)
    .否则
        eCharts_JSON类.置新值 (“toolbox.top”, , 上)
    .如果结束
    .如果 (是否为空 (下))
        eCharts_JSON类.删除 (“toolbox.bottom”)
    .否则
        eCharts_JSON类.置新值 (“toolbox.bottom”, , 下)
    .如果结束

.如果结束


.子程序 设置组件_地理坐标系, , 公开, 【geo】，地理坐标系组件用于地图的绘制，支持在地理坐标系上绘制散点图、线集。
.参数 地图名称, 文本型, , 【map】，地图类型，地图数据需自行引入。地图数据为geoJSON格式。
.参数 开启鼠标控制, 逻辑型, 可空, 【roam】，默认假=不开启
.参数 中心位置_经度, 双精度小数型, 可空, 【center】，留空时地图将居中显示，本参数需与‘中心位置_纬度’同时设置。
.参数 中心位置_纬度, 双精度小数型, 可空, 【center】，留空时地图将居中显示，本参数需与‘中心位置_经度’同时设置。
.参数 缩放比例, 双精度小数型, 可空, 【zoom】，默认为1
.参数 缩放比例_最大, 双精度小数型, 可空, 【scaleLimit.max】
.参数 缩放比例_最小, 双精度小数型, 可空, 【scaleLimit.min】
.参数 文本标签_开启逻辑, 整数型, 可空, 【label.show】，【可用常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 文本标签_大小, 双精度小数型, 可空, 【label.normal.fontSize】，默认12
.参数 文本标签_颜色, 文本型, 可空, 【label.normal.color】，默认#fff，支持16进制颜色等。
.参数 文本标签_背景颜色, 文本型, 可空, 【label.normal.backgroundColor】，默认透明“transparent”
.参数 地图区域_颜色, 文本型, 可空, 【itemStyle.normal.areaColor】，默认“#eee”，支持16进制颜色等。
.参数 地图区域_描边颜色, 文本型, 可空, 【itemStyle.normal.borderColor】，默认“#000”，支持16进制颜色等。
.参数 地图区域_描边宽度, 双精度小数型, 可空, 【itemStyle.normal.borderWidth】，默认0
.参数 左, 文本型, 可空, 【left】，默认：“auto”。组件距离容器左侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 右, 文本型, 可空, 【right】，默认：“auto”。组件距离容器右侧的距离。本参数可支持像素值、百分比。
.参数 上, 文本型, 可空, 【top】，默认：“auto”。组件距离容器上侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 下, 文本型, 可空, 【bottom】，默认：“auto”。组件距离容器底部的距离。本参数可支持像素值、百分比。
.局部变量 临时文本, 文本型

' 地图名称
eCharts_JSON类.置新值 (“geo.map”, , 地图名称)
' 开启鼠标控制
.如果 (是否为空 (开启鼠标控制))
    eCharts_JSON类.删除 (“geo.roam”)
.否则
    eCharts_JSON类.置新值 (“geo.roam”, , , , 开启鼠标控制)
.如果结束
' 中心位置_经度
' 中心位置_纬度
.如果真 (是否为空 (中心位置_经度) ＝ 假 且 是否为空 (中心位置_纬度) ＝ 假)
    临时文本 ＝ “[” ＋ 到文本 (中心位置_经度) ＋ “,” ＋ 到文本 (中心位置_纬度) ＋ “]”
    eCharts_JSON类.置新值 (“geo.center”, 临时文本)
.如果真结束
' 缩放比例
.如果 (是否为空 (缩放比例))
    eCharts_JSON类.删除 (“geo.zoom”)
.否则
    eCharts_JSON类.置新值 (“geo.zoom”, , , 缩放比例)
.如果结束
' 缩放比例_最大
.如果 (是否为空 (缩放比例_最大))
    eCharts_JSON类.删除 (“geo.scaleLimit.max”)
.否则
    eCharts_JSON类.置新值 (“geo.scaleLimit.max”, , , 缩放比例_最大)
.如果结束
' 缩放比例_最小
.如果 (是否为空 (缩放比例_最小))
    eCharts_JSON类.删除 (“geo.scaleLimit.min”)
.否则
    eCharts_JSON类.置新值 (“geo.scaleLimit.min”, , , 缩放比例_最小)
.如果结束
' 文本标签_开启逻辑
.如果 (是否为空 (文本标签_开启逻辑))
    eCharts_JSON类.删除 (“geo.label.normal.show”)
    删除 (“geo.label.emphasis.show”)
.否则
    .判断开始 (文本标签_开启逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“geo.label.normal.show”, , , , 假)
        置新值 (“geo.label.emphasis.show”, , , , 假)
    .判断 (文本标签_开启逻辑 ＝ 1)  ' 常开文字标签
        置新值 (“geo.label.normal.show”, , , , 真)
        置新值 (“geo.label.emphasis.show”, , , , 真)
    .判断 (文本标签_开启逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        置新值 (“geo.label.normal.show”, , , , 假)
        置新值 (“geo.label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 文本标签_大小
.如果 (是否为空 (文本标签_大小))
    eCharts_JSON类.删除 (“geo.label.normal.fontSize”)
    eCharts_JSON类.删除 (“geo.label.emphasis.fontSize”)
.否则
    eCharts_JSON类.置新值 (“geo.label.normal.fontSize”, , , 文本标签_大小)
    eCharts_JSON类.置新值 (“geo.label.emphasis.fontSize”, , , 文本标签_大小)
.如果结束
' 文本标签_颜色
.如果 (是否为空 (文本标签_颜色))
    eCharts_JSON类.删除 (“geo.label.normal.color”)
    eCharts_JSON类.删除 (“geo.label.emphasis.color”)
.否则
    eCharts_JSON类.置新值 (“geo.label.normal.color”, , 文本标签_颜色)
    eCharts_JSON类.置新值 (“geo.label.emphasis.color”, , 文本标签_颜色)
.如果结束
' 文本标签_背景颜色
.如果 (是否为空 (文本标签_背景颜色))
    eCharts_JSON类.删除 (“geo.label.normal.backgroundColor”)
    eCharts_JSON类.删除 (“geo.label.emphasis.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (“geo.label.normal.backgroundColor”, , 文本标签_背景颜色)
    eCharts_JSON类.置新值 (“geo.label.emphasis.backgroundColor”, , 文本标签_背景颜色)
.如果结束
' 地图区域_颜色
.如果 (是否为空 (地图区域_颜色))
    eCharts_JSON类.删除 (“geo.itemStyle.normal.areaColor”)
.否则
    eCharts_JSON类.置新值 (“geo.itemStyle.normal.areaColor”, , 地图区域_颜色)
.如果结束
' 地图区域_描边颜色
.如果 (是否为空 (地图区域_描边颜色))
    eCharts_JSON类.删除 (“geo.itemStyle.normal.borderColor”)
.否则
    eCharts_JSON类.置新值 (“geo.itemStyle.normal.borderColor”, , 地图区域_描边颜色)
.如果结束
' 地图区域_描边宽度
.如果 (是否为空 (地图区域_描边宽度))
    eCharts_JSON类.删除 (“geo.itemStyle.normal.borderWidth”)
.否则
    eCharts_JSON类.置新值 (“geo.itemStyle.normal.borderWidth”, , , 地图区域_描边宽度)
.如果结束
' 左
.如果 (是否为空 (左))
    eCharts_JSON类.删除 (“geo.left”)
.否则
    eCharts_JSON类.置新值 (“geo.left”, , 左)
.如果结束
' 右
.如果 (是否为空 (右))
    eCharts_JSON类.删除 (“geo.right”)
.否则
    eCharts_JSON类.置新值 (“geo.right”, , 右)
.如果结束
' 上
.如果 (是否为空 (上))
    eCharts_JSON类.删除 (“geo.top”)
.否则
    eCharts_JSON类.置新值 (“geo.top”, , 上)
.如果结束
' 下
.如果 (是否为空 (下))
    eCharts_JSON类.删除 (“geo.bottom”)
.否则
    eCharts_JSON类.置新值 (“geo.bottom”, , 下)
.如果结束


.子程序 设置_全局颜色, , 公开, 【color】，echart将内置11种颜色，图形颜色将依次循环调用，写入颜色组将覆盖原有颜色组。
.参数 修改颜色_位置, 整数型, 可空, 修养颜色数组指定位置的颜色，位置从0开始。
.参数 修改颜色_颜色值, 文本型, 可空, 修养颜色数组指定位置的颜色，颜色格式例如："#FFF"或"#FFFFFF"。
.参数 写入颜色组, 文本型, 参考 可空 数组, 写入颜色数组，图形颜色将依次循环调用，将覆盖原有颜色组，设置本参数将忽略前边修改指定位置颜色参数。
.参数 还原默认颜色组, 逻辑型, 可空, 为真时还原默认颜色组，将忽略上边所有设置颜色的参数。
.参数 读取颜色组, 文本型, 参考 可空 数组, 读取颜色数组。
.局部变量 计数器, 整数型

.如果真 (eCharts_JSON类.数组_取长度 (“color”) ＝ 0 或 还原默认颜色组)
    eCharts_JSON类.置新值 (“color”, “['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3']”)
.如果真结束
.如果 (是否为空 (写入颜色组))
    .如果真 (是否为空 (修改颜色_位置) ＝ 假 且 是否为空 (修改颜色_颜色值) ＝ 假)
        eCharts_JSON类.置新值 (“color[” ＋ 到文本 (修改颜色_位置) ＋ “]”, , 修改颜色_颜色值)
    .如果真结束

.否则
    eCharts_JSON类.置新值 (“color”, 工具_创建JSON数组 (写入颜色组))
.如果结束
清除数组 (读取颜色组)
.计次循环首 (eCharts_JSON类.数组_取长度 (“color”), 计数器)
    加入成员 (读取颜色组, eCharts_JSON类.数组_取出成员 (“color[” ＋ 到文本 (计数器 － 1) ＋ “]”))
.计次循环尾 ()


.子程序 设置_背景颜色, , 公开, 【bakgroundColor】，设置背景颜色（渐变或纹理背景请参考官方api后手动设置）。
.参数 颜色值, 文本型, , 颜色格式例如："#FFF"或"#FFFFFF"

eCharts_JSON类.置新值 (“backgroundColor”, , 颜色值)


.子程序 设置_全局动画, , 公开
.参数 是否启用动画, 逻辑型, 可空, 【animation】，默认为真开启。
.参数 关闭动画的阈值, 整数型, 可空, 【animationDuration】，默认2000，超过此值将自动关闭动画

.如果 (是否为空 (是否启用动画))
    eCharts_JSON类.删除 (“animation”)
.否则
    eCharts_JSON类.置新值 (“animation”, , , , 是否启用动画)
.如果结束
.如果 (是否为空 (关闭动画的阈值))
    eCharts_JSON类.删除 (“animationDuration”)
.否则
    eCharts_JSON类.置新值 (“animationDuration”, , , 关闭动画的阈值)
.如果结束


.子程序 添加图形数据_折线, 整数型, 公开, 【series-line】，添加一条折线。多条折线时请重复调用添加。返回当前折线索引。
.参数 名称, 文本型, , 【name】
.参数 数据组, 文本型, 可空, 【data】，数据组。请使用“工具_创建JSON数组（）”命令创建。
.参数 数据组_JS变量名, 文本型, 可空, 设置本参数后将忽略上边【数据组】参数内容，大数据时推荐使用本方法，多个JS变量名时请不要重复，可提高运行效率节省绘制时间。
.参数 是否平滑折线, 逻辑型, 可空, 【smooth】，默认为真
.参数 是否阶梯线图, 逻辑型, 可空, 【step】，默认为假
.参数 是否区域填充, 逻辑型, 可空, 【areaStyle.normal】，默认为假
.参数 数据堆叠标志, 文本型, 可空, 【stack】，留空不堆叠，堆叠可以为任何字符串，多条折线设置相同堆叠标志时下一条折线将在前边折线数值上叠加。
.参数 是否连接空数据, 逻辑型, 可空, 【connectNulls】，默认假。
.参数 文字标签显示逻辑, 整数型, 可空, 【label.show】，【可用常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 线条_颜色, 文本型, 可空, 【lineStyle.color】，默认自适应，支持16进制颜色。
.参数 线条_宽度, 双精度小数型, 可空, 【lineStyle.width】，默认2
.参数 线条_样式, 文本型, 可空, 【lineStyle.type】，【可选常量：#线样式_实线、#线样式_虚线、#线样式_点】
.参数 线条_透明度, 双精度小数型, 可空, 【lineStyle.opacity】，默认1，取值范围：0.0 - 1.0，例如：0.5表示半透明。
.参数 拐点_图形, 文本型, 可空, 【symbol】，【可选常量：#常用符号_***】，默认：圆形circle。除常量中8种图形，同时支持“image://url”格式的图片或图片数据，也支持“path://”开头格式的矢量路径SVG图形。
.参数 拐点_图形颜色, 文本型, 可空, 【itemStyle.color】，默认自适应，支持16进制颜色，单独更改拐点颜色将会连线条颜色一同更改。
.参数 拐点_图形大小, 双精度小数型, 可空, 【symbolSize】，默认为4
.参数 拐点_图形角度, 双精度小数型, 可空, 【symbolRotate】
.参数 拐点_透明度, 双精度小数型, 可空, 【itemStyle.opacity】，默认1，取值范围：0.0 - 1.0，例如：0.5表示半透明。
.参数 绑定x轴索引, 整数型, 可空, 【xAxisIndex】，留空将自动绑定索引为0的x轴。
.参数 绑定y轴索引, 整数型, 可空, 【yAxisIndex】，留空将自动绑定索引为0的y轴。
.参数 坐标系类型, 文本型, 可空, 【coordinateSystem】，留空默认使用直角坐标系“cartesian2d”，【可选常量：#坐标系类型_**】
.参数 绑定极坐标系索引, 整数型, 可空, 【polarIndex】，开启极坐标系时默认绑定0
.参数 区域填充_颜色, 文本型, 可空, 【areaStyle.color】，支持16进制颜色等。
.局部变量 索引, 整数型
.局部变量 计数器, 整数型

索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “line”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 名称)
.如果 (是否为空 (数据组_JS变量名))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 嵌入JS变量或JS代码 (数据组_JS变量名))
.如果结束
.如果 (是否为空 (是否平滑折线))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 真)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 是否平滑折线)
.如果结束
.如果 (是否为空 (是否阶梯线图))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].step”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].step”, , , , 是否阶梯线图)
.如果结束
.如果 (是否为空 (是否区域填充) 或 是否区域填充 ＝ 假)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle.normal”, “”)
.如果结束
' 数据堆叠标志
.如果 (是否为空 (数据堆叠标志))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].stack”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].stack”, , 数据堆叠标志)
.如果结束
' 是否连接空数据
.如果 (是否为空 (是否连接空数据))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].connectNulls”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].connectNulls”, , , , 是否连接空数据)
.如果结束
.如果 (是否为空 (文字标签显示逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文字标签显示逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文字标签显示逻辑 ＝ 1)  ' 常开文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文字标签显示逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 线条_颜色
.如果 (是否为空 (线条_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.color”, , 线条_颜色)
.如果结束
' 线条_宽度
.如果 (是否为空 (线条_宽度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.width”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.width”, , , 线条_宽度)
.如果结束
' 线条_类型
.如果 (是否为空 (线条_样式))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.type”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.type”, , 线条_样式)
.如果结束
' 线条_透明度
.如果 (是否为空 (线条_透明度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.opacity”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.opacity”, , , 线条_透明度)
.如果结束
' 拐点_图形
.如果 (是否为空 (拐点_图形))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbol”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbol”, , 拐点_图形)
.如果结束
' 拐点_图形颜色
.如果 (是否为空 (拐点_图形颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color”, , 拐点_图形颜色)
.如果结束
' 拐点_图形大小
.如果 (是否为空 (拐点_图形大小))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, , , 拐点_图形大小)
.如果结束
' 拐点_图形角度
.如果 (是否为空 (拐点_图形角度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”, , , 拐点_图形角度)
.如果结束
' 拐点_透明度
.如果 (是否为空 (拐点_透明度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.opacity”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.opacity”, , , 拐点_透明度)
.如果结束
.如果 (是否为空 (绑定x轴索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 绑定x轴索引)
.如果结束
.如果 (是否为空 (绑定y轴索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 绑定y轴索引)
.如果结束
' 极坐标系类型
.如果 (是否为空 (坐标系类型))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”, , 坐标系类型)
.如果结束
' 绑定极坐标系索引
.如果 (是否为空 (绑定极坐标系索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”, , , 绑定极坐标系索引)
.如果结束
' 区域填充_颜色
.如果 (是否为空 (区域填充_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle.normal.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].areaStyle.normal.color”, , 区域填充_颜色)
.如果结束
返回 (索引)

.子程序 添加图形数据_柱图, 整数型, 公开, 【series-bar】，添加一组柱图。多组柱图时请重复调用添加。返回当前柱图索引。
.参数 名称, 文本型, , 【name】
.参数 数据组, 文本型, , 【data】，数据组。请使用“工具_创建JSON数组（）”命令创建。
.参数 数据组_JS变量名, 文本型, 可空, 设置本参数后将忽略上边【数据组】参数内容，大数据时推荐使用本方法，多个JS变量名时请不要重复，可提高运行效率节省绘制时间。
.参数 文字标签显示逻辑, 整数型, 可空, 【label.show】，【可用常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 文字标签_显示位置, 文本型, 可空, 【label.position】，【可选常量：#文字标签位置_***】
.参数 文字标签_角度, 双精度小数型, 可空, 【label.rotate】
.参数 文字标签_文本格式器, 文本型, 可空, 【label.formatter】，支持字符串模板和js回调函数
.参数 文字标签_颜色, 文本型, 可空, 【label.color】，支持16进制颜色
.参数 文字标签_背景颜色, 文本型, 可空, 【label.backgroundColor】，支持16进制颜色，默认透明“transparent”。
.参数 文字标签_大小, 双精度小数型, 可空, 【label.fontSize】，默认12
.参数 柱条_颜色, 文本型, 可空, 【itemStyle.color】，默认自适应，支持16进制颜色
.参数 柱条_边框颜色, 文本型, 可空, 【itemStyle.borderColor】，默认自适应，支持16进制颜色
.参数 数据堆叠标志, 文本型, 可空, 【stack】，留空不堆叠，堆叠可以为任何字符串，多条折线设置相同堆叠标志时下一条折线将在前边折线数值上叠加。
.参数 绑定x轴索引, 整数型, 可空, 【xAxisIndex】，留空将自动绑定索引为0的x轴。
.参数 绑定y轴索引, 整数型, 可空, 【yAxisIndex】，留空将自动绑定索引为0的y轴。
.参数 坐标系类型, 文本型, 可空, 【coordinateSystem】，留空默认使用直角坐标系“cartesian2d”，【可选常量：#坐标系类型_**】
.局部变量 索引, 整数型
.局部变量 计数器, 整数型

索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 名称)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “bar”)
.如果 (是否为空 (数据组_JS变量名))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 嵌入JS变量或JS代码 (数据组_JS变量名))
.如果结束
.如果 (是否为空 (文字标签显示逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文字标签显示逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文字标签显示逻辑 ＝ 1)  ' 常开文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文字标签显示逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 文字标签_显示位置
.如果 (是否为空 (文字标签_显示位置))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.position”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”, , 文字标签_显示位置)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.position”, , 文字标签_显示位置)
.如果结束
' 文字标签_角度
.如果 (是否为空 (文字标签_角度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.rotate”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”, , , 文字标签_角度)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.rotate”, , , 文字标签_角度)
.如果结束
' 文字标签_文本格式器
.如果 (是否为空 (文字标签_文本格式器))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.formatter”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”, , 文字标签_文本格式器)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.formatter”, , 文字标签_文本格式器)
.如果结束
' 文字标签_颜色
.如果 (是否为空 (文字标签_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”, , 文字标签_颜色)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.color”, , 文字标签_颜色)
.如果结束
' 文字标签_背景颜色
.如果 (是否为空 (文字标签_背景颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”, , 文字标签_背景颜色)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.backgroundColor”, , 文字标签_背景颜色)
.如果结束
' 文字标签_大小
.如果 (是否为空 (文字标签_大小))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.fontSize”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”, , , 文字标签_大小)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.fontSize”, , , 文字标签_大小)
.如果结束
' 柱条_颜色
.如果 (是否为空 (柱条_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”, , 柱条_颜色)
.如果结束
' 柱条_边框颜色
.如果 (是否为空 (柱条_边框颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.borderColor”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.borderColor”, , 柱条_边框颜色)
.如果结束
' 数据堆叠标志
.如果 (是否为空 (数据堆叠标志))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].stack”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].stack”, , 数据堆叠标志)
.如果结束
.如果 (是否为空 (绑定x轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 绑定x轴索引)
.如果结束
.如果 (是否为空 (绑定y轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 绑定y轴索引)
.如果结束
' 坐标系类型
.如果 (是否为空 (坐标系类型))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”, , 坐标系类型)
.如果结束
返回 (索引)

.子程序 添加图形数据_饼图, 整数型, 公开, 【series-bar】，添加一组饼图。多组饼图时请重复调用添加。返回当前饼图索引。
.参数 名称组, 文本型, 数组, 【data】，名称组。注意：名称组内容顺序与个数请与数据组一一对应。
.参数 数据组, 双精度小数型, 数组, 【data】，数据组。注意：数据组内容顺序与个数请与名称组一一对应。
.参数 文字标签显示逻辑, 整数型, 可空, 【label.show】，【可用常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 是否显示引导标线, 逻辑型, 可空, 【labelLine.show】
.参数 是否南丁格尔图, 文本型, 可空, 【roseType】，默认为不显示：false，可选“radius”/“area”。“radius”：圆心角展示数据百分比，半径展现数据大小；“area”：圆心角相同，仅通过半径展现数据大小。
.参数 圆心坐标_横, 文本型, 可空, 【center】，默认为：“50%”。可选像素值或百分比，例如："350"或"25%"。注意：请与纵坐标同时设置，否则将忽略。
.参数 圆心坐标_纵, 文本型, 可空, 【center】，默认为：“50%”。可选像素值或百分比，例如："350"或"25%"。注意：请与横坐标同时设置，否则将忽略。
.参数 饼图半径_内半径, 文本型, 可空, 【radius】，默认为：“0”。可选像素值或百分比，例如："50"或"50%"。注意：请与外半径同时设置，否则将忽略。
.参数 饼图半径_外半径, 文本型, 可空, 【radius】，默认为：“75%”。可选像素值或百分比，例如：“80”或“90%”。注意：请与内半径同时设置，否则将忽略。
.局部变量 索引, 整数型
.局部变量 参数, 文本型
.局部变量 计数器, 整数型
.局部变量 seriesIndex, 整数型

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “pie”)
.计次循环首 (取数组成员数 (名称组), 计数器)
    eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 名称组 [计数器])
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, , , 数据组 [计数器])
.计次循环尾 ()
.如果 (是否为空 (文字标签显示逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文字标签显示逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文字标签显示逻辑 ＝ 1)  ' 常开文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文字标签显示逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
.如果真 (是否为空 (是否显示引导标线) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].labelLine.normal.show”, , , , 是否显示引导标线)
.如果真结束
.如果真 (是否为空 (是否南丁格尔图) ＝ 假)
    .如果 (是否南丁格尔图 ＝ “false”)
        eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].roseType”)
    .否则
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].roseType”, , 是否南丁格尔图)
    .如果结束

.如果真结束
.如果真 (是否为空 (圆心坐标_横) ＝ 假 且 是否为空 (圆心坐标_纵) ＝ 假)
    参数 ＝ “[参数1,参数2]”
    .如果 (寻找文本 (圆心坐标_横, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数1”, “'” ＋ 圆心坐标_横 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数1”, 圆心坐标_横, , , 真)
    .如果结束
    .如果 (寻找文本 (圆心坐标_纵, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数2”, “'” ＋ 圆心坐标_纵 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数2”, 圆心坐标_纵, , , 真)
    .如果结束
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].center”, 参数)
.如果真结束
.如果真 (是否为空 (饼图半径_内半径) ＝ 假 且 是否为空 (饼图半径_外半径) ＝ 假)
    参数 ＝ “[参数1,参数2]”
    .如果 (寻找文本 (饼图半径_内半径, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数1”, “'” ＋ 饼图半径_内半径 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数1”, 饼图半径_内半径, , , 真)
    .如果结束
    .如果 (寻找文本 (饼图半径_外半径, “%”, , 假) ≠ -1)
        参数 ＝ 子文本替换 (参数, “参数2”, “'” ＋ 饼图半径_外半径 ＋ “'”, , , 真)
    .否则
        参数 ＝ 子文本替换 (参数, “参数2”, 饼图半径_外半径, , , 真)
    .如果结束
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].radius”, 参数)
.如果真结束
返回 (索引)

.子程序 添加图形数据_散点图, 整数型, 公开, 【series-scatter】，添加散点图。返回当前散点图索引。
.参数 名称, 文本型, , 【name】
.参数 数据组, 文本型, 可空, 【data】，数据组。格式为：“[[12,34],[56,78]...]”，其中12为第一个点的x轴坐标，34为第一个点的y轴坐标，以此类推，推荐使用“工具_创建散点图坐标数据组()”命令创建。
.参数 数据组_JS变量名, 文本型, 可空, 设置本参数后将忽略上边【数据组】参数内容，大数据时推荐使用本方法，多个JS变量名时请不要重复，可提高运行效率节省绘制时间。
.参数 文字标签_显示逻辑, 整数型, 可空, 【label.show】，【可选常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 文字标签_显示位置, 文本型, 可空, 【label.normal.position】，【可选常量：#文字标签位置_***】
.参数 文字标签_角度, 双精度小数型, 可空, 【label.normal.rotate】
.参数 文字标签_文本格式器, 文本型, 可空, 【label.normal.formatter】，为空时默认显示原始数值，格式支持字符串模板和js回调函数。例如：“第 {value} 个”。
.参数 文字标签_颜色, 文本型, 可空, 【label.normal.color】，支持16进制颜色，默认：“#ffffff”
.参数 文字标签_大小, 双精度小数型, 可空, 【label.normal.fontSize】，默认12
.参数 文字标签_背景颜色, 文本型, 可空, 【label.normal.backgroundColor】，默认透明“transparent”，支持16进制颜色和rgba颜色，例如“#124a4e”和“rgba(0,255,255,0.6)”，注：rgba颜色0.6为透明度，取值0~1.0
.参数 散点_图形, 文本型, 可空, 【symbol】，【可选常量：#常用符号_***】，默认：圆形circle。除常量中8种图形，同时支持“image://url”格式的图片或图片数据，也支持“path://”开头格式的矢量路径SVG图形。
.参数 散点_颜色, 文本型, 可空, 【itemStyle.color】，默认自适应，16进制颜色，支持透明“transparent”
.参数 散点_阴影颜色, 文本型, 可空, 【itemStyle.shadowColor】，默认为空
.参数 散点_大小, 文本型, 可空, 【symbolSize】，接受双精度小数（转文本），支持js回调函数，数组前两个成员分别表示宽和高，仅一个成员时表示宽高相同，数组其他成员将忽略。
.参数 散点_角度, 双精度小数型, 可空, 【symbolRotate】
.参数 散点_位置偏移_横向, 文本型, 可空, 【symbolOffset】，留空将默认居中，接受百分比（散点图形宽的百分比）。
.参数 散点_位置偏移_纵向, 文本型, 可空, 【symbolOffset】，留空将默认居中，接受百分比（散点图形高的百分比）。例如图形为大头针时设置“50%”将修正大头针下边针尖位置为数据坐标位置。
.参数 大数据量_优化开启, 逻辑型, 可空, 【large】，默认关闭，数据量大约2000建议开启。
.参数 大数据量_优化阈值, 整数型, 可空, 【largeThreshold】，默认2000
.参数 大数据量_渐进渲染量, 整数型, 可空, 【progressive】，默认400，设0时关闭渐进渲染，渲染时每一帧绘制的图形数量。
.参数 大数据量_渐进渲染开启阈值, 整数型, 可空, 【progressiveThreshold】，默认3000，散点数量超过3000时启用渐进式渲染。
.参数 绑定x轴索引, 整数型, 可空, 【xAxisIndex】，留空将自动绑定索引为0的x轴。
.参数 绑定y轴索引, 整数型, 可空, 【yAxisIndex】，留空将自动绑定索引为0的y轴。
.参数 坐标系类型, 文本型, 可空, 【coordinateSystem】，留空默认使用直角坐标系“cartesian2d”，【可选常量：#坐标系类型_**】
.参数 绑定地理坐标系索引, 整数型, 可空, 【geoIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.参数 绑定日历坐标系索引, 整数型, 可空, 【calendarIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.参数 绑定极坐标系索引, 整数型, 可空, 【polarIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.局部变量 索引, 整数型
.局部变量 计数器, 整数型
.局部变量 位置偏移, 文本型

索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 名称)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “scatter”)
.如果 (是否为空 (数据组_JS变量名))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 嵌入JS变量或JS代码 (数据组_JS变量名))
.如果结束
.如果 (是否为空 (文字标签_显示逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文字标签_显示逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文字标签_显示逻辑 ＝ 1)  ' 常开文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文字标签_显示逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 文字标签_显示位置【label.position】
.如果 (是否为空 (文字标签_显示位置))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”, , 文字标签_显示位置)
.如果结束
' 文字标签_角度【label.rotate】
.如果 (是否为空 (文字标签_角度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”, , , 文字标签_角度)
.如果结束
' 文字标签_文本格式器【label.formatter】
.如果 (是否为空 (文字标签_文本格式器))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”, , 文字标签_文本格式器)
.如果结束
' 文字标签_颜色【label.color】
.如果 (是否为空 (文字标签_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”, , 文字标签_颜色)
.如果结束
' 文字标签_大小【label.fontSize】
.如果 (是否为空 (文字标签_大小))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”, , , 文字标签_大小)
.如果结束
' 文字标签_背景颜色【label.backgroundColor】
.如果 (是否为空 (文字标签_背景颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”, , 文字标签_背景颜色)
.如果结束
' 散点_图形【symbol】
.如果 (是否为空 (散点_图形))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbol”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbol”, , 散点_图形)
.如果结束
' 散点_颜色【itemStyle.color】
.如果 (是否为空 (散点_颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”, , 散点_颜色)
.如果结束
' 散点_阴影颜色【itemStyle.shadowColor】
.如果 (是否为空 (散点_阴影颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.shadowColor”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.shadowColor”, , 散点_阴影颜色)
.如果结束
' 散点_大小【symbolSize】
.如果 (是否为空 (散点_大小))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, 散点_大小)
.如果结束
' 散点_角度【symbolRotate】
.如果 (是否为空 (散点_角度))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”, , , 散点_角度)
.如果结束
' 散点_位置偏移_横向【symbolOffset】
.如果 (是否为空 (散点_位置偏移_横向))
    位置偏移 ＝ “[0,”
.否则
    位置偏移 ＝ “['” ＋ 到文本 (散点_位置偏移_横向) ＋ “',”
.如果结束
' 散点_位置偏移_纵向【symbolOffset】
.如果 (是否为空 (散点_位置偏移_纵向))
    位置偏移 ＝ 位置偏移 ＋ “0]”
.否则
    位置偏移 ＝ 位置偏移 ＋ “'” ＋ 到文本 (散点_位置偏移_纵向) ＋ “']”
.如果结束
.如果 (是否为空 (散点_位置偏移_横向) 且 是否为空 (散点_位置偏移_纵向))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolOffset”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolOffset”, 位置偏移)
.如果结束
' 大数据量_优化开启【large】
.如果 (是否为空 (大数据量_优化开启))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].large”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].large”, , , , 大数据量_优化开启)
.如果结束
' 大数据量_优化阈值【largeThreshold】
.如果 (是否为空 (大数据量_优化阈值))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].largeThreshold”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].largeThreshold”, , , 大数据量_优化阈值)
.如果结束
' 大数据量_渐进渲染量【progressive】
.如果 (是否为空 (大数据量_渐进渲染量))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].progressive”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].progressive”, , , 大数据量_渐进渲染量)
.如果结束
' 大数据量_渐进渲染开启阈值【progressiveThreshold】
.如果 (是否为空 (大数据量_渐进渲染开启阈值))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].progressiveThreshold”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].progressiveThreshold”, , , 大数据量_渐进渲染开启阈值)
.如果结束
' 绑定X轴索引
.如果 (是否为空 (绑定x轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 绑定x轴索引)
.如果结束
' 绑定Y轴索引
.如果 (是否为空 (绑定y轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 绑定y轴索引)
.如果结束
' 坐标系类型
.如果 (是否为空 (坐标系类型))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”, , 坐标系类型)
.如果结束
' 绑定地理坐标系索引【geoIndex】
.如果 (是否为空 (绑定地理坐标系索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].geoIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].geoIndex”, , , 绑定地理坐标系索引)
.如果结束
' 绑定日历坐标系索引【calendarIndex】
.如果 (是否为空 (绑定日历坐标系索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].calendarIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].calendarIndex”, , , 绑定日历坐标系索引)
.如果结束
' 绑定极坐标系索引
.如果 (是否为空 (绑定极坐标系索引))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”, , , 绑定极坐标系索引)
.如果结束
返回 (索引)

.子程序 添加图形数据_雷达图, 整数型, 公开, 【series-radar】，添加雷达图数据。返回当前雷达图索引，多雷达图请重复调用。
.参数 雷达图_数据组, 雷达图_数据组, 数组, 【radar.data】
.参数 雷达坐标系_维度数据组, 雷达坐标系_维度, 数组, 【rader.indicator】，坐标系各维度名称组。数据组实际显示维度将由坐标系名称组成员数限制。
.参数 雷达坐标系_多边形或圆形, 逻辑型, 可空, 【radar.shape】默认为假=自适应多边形。为真=圆形。
.参数 雷达坐标系_横向位置, 文本型, 可空, 【radar.center】，默认“50%”
.参数 雷达坐标系_纵向位置, 文本型, 可空, 【radar.center】，默认“50%”
.参数 雷达坐标系_半径, 文本型, 可空, 【radar.radius】，默认“75%”，表示外半径为容器尺寸（高宽较小的一项）的75%长度。
.参数 雷达坐标系_轴分割段数, 整数型, 可空, 【radar.splitNumber】，默认5
.参数 雷达坐标系_显示维度名称, 逻辑型, 可空, 【name.show】，默认真=显示
.参数 雷达坐标系_维度名称大小, 双精度小数型, 可空, 【name.fontSize】，默认12
.参数 雷达坐标系_维度名称颜色, 文本型, 可空, 【name.color】，默认“#333”，支持16进制颜色。
.局部变量 雷达坐标系索引, 整数型
.局部变量 雷达图索引, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 临时文本, 文本型
.局部变量 path, 文本型

雷达坐标系索引 ＝ eCharts_JSON类.数组_取长度 (“radar”)
' 雷达坐标系_维度数据组
.计次循环首 (取数组成员数 (雷达坐标系_维度数据组), 计数器1)
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].indicator[” ＋ 到文本 (计数器1 － 1) ＋ “].name”, , 雷达坐标系_维度数据组 [计数器1].名称)
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].indicator[” ＋ 到文本 (计数器1 － 1) ＋ “].max”, , , 雷达坐标系_维度数据组 [计数器1].最大值)
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].indicator[” ＋ 到文本 (计数器1 － 1) ＋ “].min”, , , 雷达坐标系_维度数据组 [计数器1].最小值)
    .如果真 (雷达坐标系_维度数据组 [计数器1].颜色 ≠ “”)
        eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].indicator[” ＋ 到文本 (计数器1 － 1) ＋ “].color”, , 雷达坐标系_维度数据组 [计数器1].颜色)
    .如果真结束

.计次循环尾 ()
' 雷达坐标系_多边形或圆形
.如果 (是否为空 (雷达坐标系_多边形或圆形))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].shape”)
.否则
    .如果 (雷达坐标系_多边形或圆形)
        eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].shape”, , “circle”)
    .否则
        eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].shape”, , “polygon”)
    .如果结束

.如果结束
' 雷达坐标系_横向位置
' 雷达坐标系_纵向位置
.如果 (是否为空 (雷达坐标系_横向位置) 且 是否为空 (雷达坐标系_纵向位置))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].center”)
.否则
    .如果 (是否为空 (雷达坐标系_横向位置))
        临时文本 ＝ “['50%',”
    .否则
        临时文本 ＝ “['” ＋ 雷达坐标系_横向位置 ＋ “',”
    .如果结束
    .如果 (是否为空 (雷达坐标系_纵向位置))
        临时文本 ＝ 临时文本 ＋ “'50%']”
    .否则
        临时文本 ＝ 临时文本 ＋ “'” ＋ 雷达坐标系_纵向位置 ＋ “']”
    .如果结束
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].center”, 临时文本)
.如果结束
' 雷达坐标系_半径
.如果 (是否为空 (雷达坐标系_半径))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].radius”)
.否则
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].radius”, , 雷达坐标系_半径)
.如果结束
' 雷达坐标系_轴分割段数
.如果 (是否为空 (雷达坐标系_轴分割段数))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].splitNumber”)
.否则
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].splitNumber”, , , 雷达坐标系_轴分割段数)
.如果结束
' 雷达坐标系_显示维度名称
.如果 (是否为空 (雷达坐标系_显示维度名称))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.show”)
.否则
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.show”, , , , 雷达坐标系_显示维度名称)
.如果结束
' 雷达坐标系_维度名称大小
.如果 (是否为空 (雷达坐标系_维度名称大小))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.fontSize”)
.否则
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.fontSize”, , , 雷达坐标系_维度名称大小)
.如果结束
' 雷达坐标系_维度名称颜色
.如果 (是否为空 (雷达坐标系_维度名称颜色))
    eCharts_JSON类.删除 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.color”)
.否则
    eCharts_JSON类.置新值 (“radar[” ＋ 到文本 (雷达坐标系索引) ＋ “].name.color”, , 雷达坐标系_维度名称颜色)
.如果结束
' 雷达图_数据组
雷达图索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (雷达图索引) ＋ “].type”, , “radar”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (雷达图索引) ＋ “].radarIndex”, , , 雷达坐标系索引)
.计次循环首 (取数组成员数 (雷达图_数据组), 计数器1)
    计数器2 ＝ eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (雷达图索引) ＋ “].data”)
    path ＝ “series[” ＋ 到文本 (雷达图索引) ＋ “].data[” ＋ 到文本 (计数器2) ＋ “]”
    ' 名称
    .如果真 (雷达图_数据组 [计数器1].名称 ＝ “”)
        到循环尾 ()
    .如果真结束
    eCharts_JSON类.置新值 (path ＋ “.name”, , 雷达图_数据组 [计数器1].名称)
    ' 数据组
    eCharts_JSON类.置新值 (path ＋ “.value”, 工具_创建JSON数组 (, 雷达图_数据组 [计数器1].数据组))
    ' 开启区域填充
    .如果真 (雷达图_数据组 [计数器1].开启区域填充 ＝ 真)
        eCharts_JSON类.置新值 (path ＋ “.areaStyle”, “{}”)
    .如果真结束
    ' 开启文字标签
    .如果真 (雷达图_数据组 [计数器1].开启文字标签 ＝ 真)
        eCharts_JSON类.置新值 (path ＋ “.label.show”, , , , 真)
    .如果真结束
    ' 文字标签大小
    .如果真 (雷达图_数据组 [计数器1].文字标签大小 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.label.fontSize”, , , 到数值 (雷达图_数据组 [计数器1].文字标签大小))
    .如果真结束
    ' 文字标签颜色
    .如果真 (雷达图_数据组 [计数器1].文字标签颜色 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.label.color”, , 雷达图_数据组 [计数器1].文字标签颜色)
    .如果真结束
    ' 拐点图形
    .如果真 (雷达图_数据组 [计数器1].拐点图形 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.symbol”, , 雷达图_数据组 [计数器1].拐点图形)
    .如果真结束
    ' 拐点图形大小
    .如果真 (雷达图_数据组 [计数器1].拐点图形大小 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.symbolSize”, , , 到数值 (雷达图_数据组 [计数器1].拐点图形大小))
    .如果真结束
    ' 拐点颜色
    .如果真 (雷达图_数据组 [计数器1].拐点颜色 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.itemStyle.normal.color”, , 雷达图_数据组 [计数器1].拐点颜色)
    .如果真结束
    ' 线宽
    .如果真 (雷达图_数据组 [计数器1].线宽 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.lineStyle.normal.width”, , , 到数值 (雷达图_数据组 [计数器1].线宽))
    .如果真结束
    ' 线样式
    .如果真 (雷达图_数据组 [计数器1].线样式 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.lineStyle.normal.type”, , 雷达图_数据组 [计数器1].线样式)
    .如果真结束
    ' 线颜色
    .如果真 (雷达图_数据组 [计数器1].线颜色 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.lineStyle.normal.color”, , 雷达图_数据组 [计数器1].线颜色)
    .如果真结束
    ' 区域颜色
    .如果真 (雷达图_数据组 [计数器1].区域颜色 ≠ “”)
        eCharts_JSON类.置新值 (path ＋ “.areaStyle.normal.color”, , 雷达图_数据组 [计数器1].区域颜色)
    .如果真结束

.计次循环尾 ()
返回 (雷达图索引)

.子程序 添加图形数据_仪表盘, 整数型, 公开, 【series-gauge】，添加一组仪表盘。多个仪表盘时请重复调用添加。返回当前仪表盘索引。
.参数 名称, 文本型, 可空, 【data.name】
.参数 数值, 双精度小数型, , 【data.value】
.参数 单位, 文本型, 可空, 【detail.formatter】
.参数 半径百分比, 双精度小数型, 可空, 【radius】，仪表盘半径，可以是相对于容器高宽中较小的一项的一半的百分比。
.参数 位置横坐标百分比, 双精度小数型, 可空, 【center】，默认50，必须与纵坐标同时设置。
.参数 位置纵坐标百分比, 双精度小数型, 可空, 【center】，默认50，必须与横坐标同时设置。
.参数 刻度盘起始角度, 双精度小数型, 可空, 【startAngle】，默认为225，圆心正右手侧为0度，正上方为90度，正左手侧为180度。
.参数 刻度盘结束角度, 双精度小数型, 可空, 【endAngle】，默认为-45，圆心 正右手侧为0度，正上方为90度，正左手侧为180度。
.参数 刻度盘最小值, 双精度小数型, 可空, 【min】，默认为0
.参数 刻度盘最大值, 双精度小数型, 可空, 【max】，默认为100
.参数 刻度盘分段, 双精度小数型, 可空, 【splitNumber】，默认为10
.参数 是否显示实际数值, 逻辑型, 可空, 【detail.show】，默认真=显示，假=隐藏。
.参数 刻度盘分段颜色, 分段颜色, 可空 数组, 【axisLine.lineStyle.color】，手动指定分段颜色。
.局部变量 索引, 整数型
.局部变量 参数, 文本型
.局部变量 计数器, 整数型
.局部变量 temp, eCharts_JSON类

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “gauge”)
.如果真 (是否为空 (单位) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].detail.formatter”, , “{value}” ＋ 单位)
.如果真结束
eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, “{}”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].value”, , , 数值)
.如果真 (是否为空 (名称) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (eCharts_JSON类.数组_取长度 (“series[” ＋ 到文本 (索引) ＋ “].data”) － 1) ＋ “].name”, , 名称)
.如果真结束
.如果真 (是否为空 (半径百分比) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].radius”, , 到文本 (半径百分比) ＋ “%”)
.如果真结束
.如果真 (是否为空 (位置横坐标百分比) ＝ 假 且 是否为空 (位置纵坐标百分比) ＝ 假)
    参数 ＝ “['” ＋ 到文本 (位置横坐标百分比) ＋ “%','” ＋ 到文本 (位置纵坐标百分比) ＋ “%']”
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].center”, 参数)
.如果真结束
.如果真 (是否为空 (刻度盘起始角度) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].startAngle”, , , 刻度盘起始角度)
.如果真结束
.如果真 (是否为空 (刻度盘结束角度) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].endAngle”, , , 刻度盘结束角度)
.如果真结束
.如果真 (是否为空 (刻度盘最小值) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].min”, , , 刻度盘最小值)
.如果真结束
.如果真 (是否为空 (刻度盘最大值) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].max”, , , 刻度盘最大值)
.如果真结束
.如果真 (是否为空 (刻度盘分段) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].splitNumber”, , , 刻度盘分段)
.如果真结束
.如果真 (是否为空 (是否显示实际数值) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].detail.show”, , , , 是否显示实际数值)
.如果真结束
' eCharts_JSON类.置新值 (“series[0].axisLine.lineStyle.color”, “[[0.2, '#E43F3D'],[0.4, '#E98E2C'],[0.6, '#DDBD4D'],[0.8, '#7CBB55'],[1, '#9CD6CE']]”)
.如果真 (是否为空 (刻度盘分段颜色) ＝ 假)
    temp.解析 (“[]”)
    .计次循环首 (取数组成员数 (刻度盘分段颜色), 计数器)
        temp.数组_加入成员 (“”, “[” ＋ 到文本 (刻度盘分段颜色 [计数器].分段位置 ÷ 100) ＋ “,'” ＋ 刻度盘分段颜色 [计数器].颜色 ＋ “']”)
    .计次循环尾 ()
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].axisLine.lineStyle.color”, temp.取代码 ())
.如果真结束
返回 (索引)

.子程序 添加图形数据_K线, , 公开, 【series-candlestick】，添加股票K线图形。
.参数 数据组, K线数据格式, 可空 数组, K线数据组。
.参数 数据组_JS变量名, 文本型, 可空, 设置本参数后将忽略上边【数据组】参数内容，大数据时推荐使用本方法，多个JS变量名时请不要重复，可提高运行效率节省绘制时间，注：K线图使用此功能将不自动创建均线MA曲线。
.参数 均线天数MA, 文本型, 可空, 为空则不显示，也支持多个，以符号“+”分割，例如：“5+10+20+30”，计算价格均线将影响K线生成时间（大约增加10%~30%）
.参数 绑定x轴索引, 整数型, 可空, 【xAxisIndex】，留空将自动绑定索引为0的x轴。
.参数 绑定y轴索引, 整数型, 可空, 【yAxisIndex】，留空将自动绑定索引为0的y轴。
.参数 阳线颜色, 文本型, 可空, 【itemStyle.color】
.参数 阴线颜色, 文本型, 可空, 【itemStyle.color0】
.参数 阳线描边颜色, 文本型, 可空, 【itemStyle.borderColor】
.参数 阴线描边颜色, 文本型, 可空, 【itemStyle.borderColor0】
.局部变量 临时小数数组, 双精度小数型, , "0"
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 MA数组, 整数型, , "0"
.局部变量 索引, 整数型
.局部变量 计数器, 整数型
.局部变量 temp, eCharts_JSON类

.如果真 (是否为空 (均线天数MA) ＝ 假)
    临时文本数组 ＝ 分割文本 (均线天数MA, “+”, )
    .计次循环首 (取数组成员数 (临时文本数组), 计数器)
        .如果真 (到整数 (临时文本数组 [计数器]) ＞ 0)
            加入成员 (MA数组, 到整数 (临时文本数组 [计数器]))
        .如果真结束

    .计次循环尾 ()
.如果真结束

.如果真 (是否为空 (数据组_JS变量名))
    temp.解析 (“[]”)
    .计次循环首 (取数组成员数 (数据组), 计数器)
        清除数组 (临时小数数组)
        加入成员 (临时小数数组, 数据组 [计数器].开盘open)
        加入成员 (临时小数数组, 数据组 [计数器].收盘close)
        加入成员 (临时小数数组, 数据组 [计数器].最低lowest)
        加入成员 (临时小数数组, 数据组 [计数器].最高highest)
        temp.数组_加入成员 (“”, 工具_创建JSON数组 (, 临时小数数组))
    .计次循环尾 ()
.如果真结束

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , “日K”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “candlestick”)
.如果 (是否为空 (数据组_JS变量名))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, temp.取代码 ())
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 嵌入JS变量或JS代码 (数据组_JS变量名))
.如果结束

.如果 (是否为空 (绑定x轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 绑定x轴索引)
.如果结束
.如果 (是否为空 (绑定y轴索引))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 绑定y轴索引)
.如果结束
' 阳线颜色
.如果 (是否为空 (阳线颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color”, , 阳线颜色)
.如果结束
' 阴线颜色
.如果 (是否为空 (阴线颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color0”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color0”, , 阴线颜色)
.如果结束
' 阳线描边颜色
.如果 (是否为空 (阳线描边颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.borderColor”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.borderColor”, , 阳线描边颜色)
.如果结束
' 阴线描边颜色
.如果 (是否为空 (阴线描边颜色))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.borderColor0”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.borderColor0”, , 阴线描边颜色)
.如果结束

.如果真 (是否为空 (数据组_JS变量名))
    .计次循环首 (取数组成员数 (MA数组), 计数器)
        eCharts_JSON类.数组_加入成员 (“series”, “{}”)
        索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , “MA” ＋ 到文本 (MA数组 [计数器]))
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “line”)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 工具_计算K线图价格均线MA (数据组, MA数组 [计数器]))
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].smooth”, , , , 真)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.opacity”, , , 0.5)
    .计次循环尾 ()
.如果真结束


.子程序 添加图形数据_词云图, , 公开, 添加词云图。
.参数 词条名称组, 文本型, 数组, 名称组内容与数据组必须一一对应。
.参数 词条数据组, 整数型, 数组, 名称组内容与数据组必须一一对应。
.参数 词条随机颜色, 逻辑型, 可空, 可空，默认开启。
.参数 词条阴影, 逻辑型, 可空, 可空，默认开启
.参数 词条间隔大小, 整数型, 可空, 可空，默认20。
.参数 词条尺寸范围_最小, 整数型, 可空, 可空，默认12。词条随机尺寸的范围最小值。
.参数 词条尺寸范围_最大, 整数型, 可空, 可空，默认50。词条随机尺寸的范围最大值。
.参数 词条旋转角度范围_最小, 整数型, 可空, 可空，默认0（不旋转）。词条随机旋转角度的范围最小值。
.参数 词条旋转角度范围_最大, 整数型, 可空, 可空，默认0（不旋转）。词条随机旋转角度的范围最大值。
.局部变量 索引, 整数型
.局部变量 i, 整数型
.局部变量 次数, 整数型
.局部变量 temp_json, eCharts_JSON类

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “wordCloud”)
.如果 (是否为空 (词条间隔大小))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].gridSize”, , , 20)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].gridSize”, , , 词条间隔大小)
.如果结束
.如果 (是否为空 (词条尺寸范围_最小))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].sizeRange[0]”, , , 12)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].sizeRange[0]”, , , 词条尺寸范围_最小)
.如果结束
.如果 (是否为空 (词条尺寸范围_最大))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].sizeRange[1]”, , , 50)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].sizeRange[1]”, , , 词条尺寸范围_最大)
.如果结束
.如果 (是否为空 (词条旋转角度范围_最小))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].rotationRange[0]”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].rotationRange[0]”, , , 词条旋转角度范围_最小)
.如果结束
.如果 (是否为空 (词条旋转角度范围_最大))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].rotationRange[1]”, , , 0)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].rotationRange[1]”, , , 词条旋转角度范围_最大)
.如果结束
.如果 (取数组成员数 (词条数据组) ＜ 取数组成员数 (词条名称组))
    次数 ＝ 取数组成员数 (词条数据组)
.否则
    次数 ＝ 取数组成员数 (词条名称组)
.如果结束
.如果真 (是否为空 (词条阴影) 或 词条阴影)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].textStyle.emphasis.shadowBlur”, , , 10)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].textStyle.emphasis.shadowColor”, , “#333”)
.如果真结束
置随机数种子 (取小时 (取现行时间 ()) × 取秒 (取现行时间 ()))
.计次循环首 (次数, i)
    temp_json.解析 ()
    temp_json.置新值 (“name”, , 词条名称组 [i])
    temp_json.置新值 (“value”, , , 词条数据组 [i])
    temp_json.置新值 (“textStyle.emphasis.color”, , “red”)
    .如果真 (是否为空 (词条随机颜色) 或 词条随机颜色)
        temp_json.置新值 (“textStyle.normal.color”, , “rgb(” ＋ 到文本 (取随机数 (0, 255)) ＋ “,” ＋ 到文本 (取随机数 (0, 255)) ＋ “,” ＋ 到文本 (取随机数 (0, 255)) ＋ “)”)
    .如果真结束
    eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (索引) ＋ “].data”, temp_json.取代码 ())
.计次循环尾 ()


.子程序 添加图形数据_关系图, , 公开, 【series-graph】，添加关系图。
.参数 关系节点组, 关系节点, 数组
.参数 对应关系组, 对应关系, 数组
.局部变量 索引, 整数型
.局部变量 分类组, 文本型, , "0"
.局部变量 分类编号, 文本型, , "0"
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 是否存在, 逻辑型

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1
eCharts_JSON类.置新值 (“series”, “[]”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “graph”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].layout”, , “force”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, , , 45)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].focusNodeAdjacency”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].roam”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].draggable”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.textStyle.fontSize”, , , 12)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].force.repulsion”, , , 1000)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].edgeSymbolSize[0]”, , , 4)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].edgeSymbolSize[1]”, , , 50)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].edgeLabel.normal.show”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].edgeLabel.normal.textStyle.fontSize”, , , 10)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].edgeLabel.normal.formatter”, , “{c}”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.opacity”, , , 0.9)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.width”, , , 1)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].lineStyle.normal.curveness”, , , 0)
.计次循环首 (取数组成员数 (关系节点组), 计数器1)
    是否存在 ＝ 假
    .计次循环首 (取数组成员数 (分类组), 计数器2)
        .如果真 (分类组 [计数器2] ＝ 关系节点组 [计数器1].节点名称)
            是否存在 ＝ 真
        .如果真结束

    .计次循环尾 ()
    .如果真 (是否存在 ＝ 假)
        加入成员 (分类组, 关系节点组 [计数器1].节点名称)
    .如果真结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分类组), 计数器1)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].categories[” ＋ 到文本 (计数器1 － 1) ＋ “].name”, , 分类组 [计数器1])
.计次循环尾 ()
.计次循环首 (取数组成员数 (关系节点组), 计数器1)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].name”, , 关系节点组 [计数器1].节点名称)
    .如果真 (关系节点组 [计数器1].节点数值 ≠ “”)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].value”, , , 到数值 (关系节点组 [计数器1].节点名称))
    .如果真结束
    .如果真 (关系节点组 [计数器1].节点样式 ≠ “”)
        .判断开始 (关系节点组 [计数器1].节点样式 ＝ “1”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “circle”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “2”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “rect”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “3”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “roundRect”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “4”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “triangle”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “5”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “diamond”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “6”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “pin”)
        .判断 (关系节点组 [计数器1].节点样式 ＝ “7”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , “arrow”)
        .默认
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbol”, , 关系节点组 [计数器1].节点样式)
        .判断结束

    .如果真结束
    .如果 (关系节点组 [计数器1].节点图标大小 ＝ “”)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbolSize”, , , 50)
    .否则
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].symbolSize”, , , 到数值 (关系节点组 [计数器1].节点图标大小))
    .如果结束
    .如果真 (关系节点组 [计数器1].节点是否固定 ＝ “1”)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].fixed”, , , , 真)
    .如果真结束
    .计次循环首 (取数组成员数 (分类组), 计数器2)
        .如果真 (分类组 [计数器2] ＝ 关系节点组 [计数器1].节点名称)
            跳出循环 ()
        .如果真结束

    .计次循环尾 ()
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data[” ＋ 到文本 (计数器1 － 1) ＋ “].category”, , , 计数器2 － 1)
.计次循环尾 ()
.计次循环首 (取数组成员数 (对应关系组), 计数器1)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].links[” ＋ 到文本 (计数器1 － 1) ＋ “].value”, , 对应关系组 [计数器1].关系名称)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].links[” ＋ 到文本 (计数器1 － 1) ＋ “].source”, , , 对应关系组 [计数器1].关系节点成员编号1 － 1)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].links[” ＋ 到文本 (计数器1 － 1) ＋ “].target”, , , 对应关系组 [计数器1].关系节点成员编号2 － 1)
.计次循环尾 ()

.子程序 添加图形数据_树图, , 公开, 【series-tree】，添加树图。
.参数 树图json, eCharts_JSON类, , 数据json必须照固定格式，格式请参考示例。
.参数 展开方向, 整数型, 可空, 【orient】，默认为0（水平右侧展开），1=垂直下方展开
.参数 图形, 文本型, 可空, 【symbol】，【可选常量：#常用符号_***】，默认：圆形circle。除常量中8种图形，同时支持“image://url”格式的图片或图片数据，也支持“path://”开头格式的矢量路径SVG图形。
.参数 标记图形大小, 整数型, 可空, 【symbolSize】，默认=7
.参数 初始展开层级, 整数型, 可空, 【initialTreeDepth】，默认=2，默认只有前2层展开，以后的默认是折叠状态
.参数 左, 文本型, 可空, 【left】，默认为“auto”，组件距离容器左侧的距离。可选“left”、“center”、“right”或百分比“20%”或像素值“20px”。
.参数 右, 文本型, 可空, 【right】，默认为“auto”，组件距离容器右侧的距离。可选百分比“20%”或像素值“20px”。
.参数 上, 文本型, 可空, 【top】，默认为“auto”，组件距离容器上侧的距离。可选“top”、“middle”、“bottom”或百分比“20%”或像素值“20px”。
.参数 下, 文本型, 可空, 【bottom】，默认为“auto”，组件距离容器下侧的距离。可选百分比“20%”或像素值“20px”。
.局部变量 索引, 整数型

eCharts_JSON类.数组_加入成员 (“series”, “{}”)
索引 ＝ eCharts_JSON类.数组_取长度 (“series”) － 1

eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “tree”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, “[” ＋ 树图json.取代码 () ＋ “]”)  ' 数据json必须照固定格式
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].expandAndCollapse”, , , , 真)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].animationDuration”, , , 550)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].animationDurationUpdate”, , , 750)
.如果 (是否为空 (初始展开层级))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].initialTreeDepth”, , , 2)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].initialTreeDepth”, , , 初始展开层级)
.如果结束
.如果 (是否为空 (展开方向) 或 展开方向 ＝ 0)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].orient”, , “horizontal”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].orient”, , “vertical”)
.如果结束
.如果 (是否为空 (图形))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].symbol”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbol”, , 图形)
.如果结束
.如果 (是否为空 (标记图形大小))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, , , 7)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, , , 标记图形大小)
.如果结束
.如果 (是否为空 (上))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].top”, , “12%”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].top”, , 到文本 (上) ＋ “%”)
.如果结束
.如果 (是否为空 (下))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].bottom”, , “12%”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].bottom”, , 到文本 (下) ＋ “%”)
.如果结束
.如果 (是否为空 (左))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].left”, , “12%”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].left”, , 到文本 (左) ＋ “%”)
.如果结束
.如果 (是否为空 (右))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].right”, , “12%”)
.否则
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].right”, , 到文本 (右) ＋ “%”)
.如果结束



.子程序 添加图形数据_地图, 整数型, 公开, 【series-map】，添加一组地图数据。返回当前地图数据索引。
.参数 系列名称, 文本型, 可空, 【name】，用于tooltip的显示，legend的图例筛选。
.参数 数据组, 文本型, 可空, 【data】，json格式地图数据组。
.参数 地图类型, 文本型, 可空, 【map】，使用geo地理坐标系组件设定地图后本参数可省略。
.参数 开启鼠标控制, 逻辑型, 可空, 【roam】，默认假=不开启
.参数 中心位置_经度, 双精度小数型, 可空, 【center】，留空时地图将居中显示，本参数需与‘中心位置_纬度’同时设置。
.参数 中心位置_纬度, 双精度小数型, 可空, 【center】，留空时地图将居中显示，本参数需与‘中心位置_经度’同时设置。
.参数 缩放比例, 双精度小数型, 可空, 【zoom】，默认为1
.参数 缩放比例_最大, 双精度小数型, 可空, 【scaleLimit.max】
.参数 缩放比例_最小, 双精度小数型, 可空, 【scaleLimit.min】
.参数 文本标签_开启逻辑, 整数型, 可空, 【label.show】，【可用常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 文本标签_大小, 双精度小数型, 可空, 【label.normal.fontSize】，默认12
.参数 文本标签_颜色, 文本型, 可空, 【label.normal.color】，默认#fff，支持16进制颜色等。
.参数 文本标签_背景颜色, 文本型, 可空, 【label.normal.backgroundColor】，默认透明“transparent”
.参数 地图区域_颜色, 文本型, 可空, 【itemStyle.normal.areaColor】，默认“#eee”，支持16进制颜色等。
.参数 地图区域_描边颜色, 文本型, 可空, 【itemStyle.normal.borderColor】，默认“#000”，支持16进制颜色等。
.参数 地图区域_描边宽度, 双精度小数型, 可空, 【itemStyle.normal.borderWidth】，默认0
.参数 左, 文本型, 可空, 【left】，默认：“auto”。组件距离容器左侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 右, 文本型, 可空, 【right】，默认：“auto”。组件距离容器右侧的距离。本参数可支持像素值、百分比。
.参数 上, 文本型, 可空, 【top】，默认：“auto”。组件距离容器上侧的距离。本参数可支持像素值、百分比或“top”、“middle”或“bottom”。
.参数 下, 文本型, 可空, 【bottom】，默认：“auto”。组件距离容器底部的距离。本参数可支持像素值、百分比。
.参数 地理坐标系索引, 整数型, 可空, 【geoIndex】，未设置geo组件时map series会生成内部自己专用的geo组件，如果指定了地理坐标系索引时series-map.map以及series-map.itemStyle等配置将使用geo组件中的设置。
.局部变量 索引, 整数型
.局部变量 路径, 文本型
.局部变量 临时文本, 文本型

索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
路径 ＝ “series[” ＋ 到文本 (索引) ＋ “].”
eCharts_JSON类.置新值 (路径 ＋ “type”, , “map”)
' 系列名称
.如果 (是否为空 (系列名称))
    eCharts_JSON类.删除 (路径 ＋ “name”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “name”, , 系列名称)
.如果结束
' 数据组
.如果 (是否为空 (数据组))
    eCharts_JSON类.删除 (路径 ＋ “data”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “data”, 数据组)
.如果结束
' 地图类型
.如果 (是否为空 (地图类型))
    eCharts_JSON类.删除 (路径 ＋ “map”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “map”, , 地图类型)
.如果结束
' 开启鼠标控制
.如果 (是否为空 (开启鼠标控制))
    eCharts_JSON类.删除 (路径 ＋ “roam”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “roam”, , , , 开启鼠标控制)
.如果结束
' 中心位置_经度
' 中心位置_纬度
.如果真 (是否为空 (中心位置_经度) ＝ 假 且 是否为空 (中心位置_纬度) ＝ 假)
    临时文本 ＝ “[” ＋ 到文本 (中心位置_经度) ＋ “,” ＋ 到文本 (中心位置_纬度) ＋ “]”
    eCharts_JSON类.置新值 (路径 ＋ “center”, 临时文本)
.如果真结束
' 缩放比例
.如果 (是否为空 (缩放比例))
    eCharts_JSON类.删除 (路径 ＋ “zoom”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “zoom”, , , 缩放比例)
.如果结束
' 缩放比例_最大
.如果 (是否为空 (缩放比例_最大))
    eCharts_JSON类.删除 (路径 ＋ “scaleLimit.max”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “scaleLimit.max”, , , 缩放比例_最大)
.如果结束
' 缩放比例_最小
.如果 (是否为空 (缩放比例_最小))
    eCharts_JSON类.删除 (路径 ＋ “scaleLimit.min”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “scaleLimit.min”, , , 缩放比例_最小)
.如果结束
' 文本标签_开启逻辑
.如果 (是否为空 (文本标签_开启逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文本标签_开启逻辑 ＝ 0)  ' 关闭文字标签
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文本标签_开启逻辑 ＝ 1)  ' 常开文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文本标签_开启逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 文本标签_大小
.如果 (是否为空 (文本标签_大小))
    eCharts_JSON类.删除 (路径 ＋ “label.normal.fontSize”)
    eCharts_JSON类.删除 (路径 ＋ “label.emphasis.fontSize”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “label.normal.fontSize”, , , 文本标签_大小)
    eCharts_JSON类.置新值 (路径 ＋ “label.emphasis.fontSize”, , , 文本标签_大小)
.如果结束
' 文本标签_颜色
.如果 (是否为空 (文本标签_颜色))
    eCharts_JSON类.删除 (路径 ＋ “label.normal.color”)
    eCharts_JSON类.删除 (路径 ＋ “label.emphasis.color”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “label.normal.color”, , 文本标签_颜色)
    eCharts_JSON类.置新值 (路径 ＋ “label.emphasis.color”, , 文本标签_颜色)
.如果结束
' 文本标签_背景颜色
.如果 (是否为空 (文本标签_背景颜色))
    eCharts_JSON类.删除 (路径 ＋ “label.normal.backgroundColor”)
    eCharts_JSON类.删除 (路径 ＋ “label.emphasis.backgroundColor”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “label.normal.backgroundColor”, , 文本标签_背景颜色)
    eCharts_JSON类.置新值 (路径 ＋ “label.emphasis.backgroundColor”, , 文本标签_背景颜色)
.如果结束
' 地图区域_颜色
.如果 (是否为空 (地图区域_颜色))
    eCharts_JSON类.删除 (路径 ＋ “itemStyle.normal.areaColor”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “itemStyle.normal.areaColor”, , 地图区域_颜色)
.如果结束
' 地图区域_描边颜色
.如果 (是否为空 (地图区域_描边颜色))
    eCharts_JSON类.删除 (路径 ＋ “itemStyle.normal.borderColor”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “itemStyle.normal.borderColor”, , 地图区域_描边颜色)
.如果结束
' 地图区域_描边宽度
.如果 (是否为空 (地图区域_描边宽度))
    eCharts_JSON类.删除 (路径 ＋ “itemStyle.normal.borderWidth”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “itemStyle.normal.borderWidth”, , , 地图区域_描边宽度)
.如果结束
' 左
.如果 (是否为空 (左))
    eCharts_JSON类.删除 (路径 ＋ “left”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “left”, , 左)
.如果结束
' 右
.如果 (是否为空 (右))
    eCharts_JSON类.删除 (路径 ＋ “right”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “right”, , 右)
.如果结束
' 上
.如果 (是否为空 (上))
    eCharts_JSON类.删除 (路径 ＋ “top”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “top”, , 上)
.如果结束
' 下
.如果 (是否为空 (下))
    eCharts_JSON类.删除 (路径 ＋ “bottom”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “bottom”, , 下)
.如果结束
' 地理坐标系索引
.如果 (是否为空 (地理坐标系索引))
    eCharts_JSON类.删除 (路径 ＋ “geoIndex”)
.否则
    eCharts_JSON类.置新值 (路径 ＋ “geoIndex”, , , 地理坐标系索引)
.如果结束
返回 (索引)

.子程序 添加图形数据_特效散点图, 整数型, 公开, 【series-effectScatter】，添加一组带涟漪特效动画的散点（气泡）图。返回当前图形索引。
.参数 系列名称, 文本型, , 【name】，用于tooltip的显示和legend图例筛选。
.参数 数据组, 文本型, , 【data】，json格式二维坐标数组。
.参数 文字标签_显示逻辑, 整数型, 可空, 【label.show】，【可选常量：#文字标签显示逻辑_***】，0=关闭文字标签，1=常开显示文字标签，2=鼠标经过时显示文字标签
.参数 文字标签_显示位置, 文本型, 可空, 【label.normal.position】，【可选常量：#文字标签位置_***】
.参数 文字标签_角度, 双精度小数型, 可空, 【label.normal.rotate】
.参数 文字标签_文本格式器, 文本型, 可空, 【label.normal.formatter】，为空时默认显示原始数值，格式支持字符串模板和js回调函数。例如：“第 {value} 个”。
.参数 文字标签_颜色, 文本型, 可空, 【label.normal.color】，支持16进制颜色，默认：“#ffffff”
.参数 文字标签_大小, 双精度小数型, 可空, 【label.normal.fontSize】，默认12
.参数 文字标签_背景颜色, 文本型, 可空, 【label.normal.backgroundColor】，默认透明“transparent”，支持16进制颜色和rgba颜色，例如“#124a4e”和“rgba(0,255,255,0.6)”，注：rgba颜色0.6为透明度，取值0~1.0
.参数 散点_图形, 文本型, 可空, 【symbol】，【可选常量：#常用符号_***】，默认：圆形circle。除常量中8种图形，同时支持“image://url”格式的图片或图片数据，也支持“path://”开头格式的矢量路径SVG图形。
.参数 散点_颜色, 文本型, 可空, 【itemStyle.color】，默认自适应，16进制颜色，支持透明“transparent”
.参数 散点_阴影颜色, 文本型, 可空, 【itemStyle.shadowColor】，默认为空
.参数 散点_大小, 文本型, 可空, 【symbolSize】，接受双精度小数（转文本），支持js回调函数，数组前两个成员分别表示宽和高，仅一个成员时表示宽高相同，数组其他成员将忽略。
.参数 散点_角度, 双精度小数型, 可空, 【symbolRotate】
.参数 绑定x轴索引, 整数型, 可空, 【xAxisIndex】，留空将自动绑定索引为0的x轴。
.参数 绑定y轴索引, 整数型, 可空, 【yAxisIndex】，留空将自动绑定索引为0的y轴。
.参数 坐标系类型, 文本型, 可空, 【coordinateSystem】，留空默认使用直角坐标系“cartesian2d”，【可选常量：#坐标系类型_**】
.参数 绑定地理坐标系索引, 整数型, 可空, 【geoIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.参数 绑定日历坐标系索引, 整数型, 可空, 【calendarIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.参数 绑定极坐标系索引, 整数型, 可空, 【polarIndex】，请正确设定坐标系类型，唯一坐标系时本参数可省略，多个坐标系存在请填写正确坐标系索引。
.局部变量 索引, 整数型

索引 ＝ eCharts_JSON类.数组_取长度 (“series”)
eCharts_JSON类.置新值 (“series[” ＋ 到文本 (索引) ＋ “].name”, , 系列名称)
置新值 (“series[” ＋ 到文本 (索引) ＋ “].type”, , “effectScatter”)
置新值 (“series[” ＋ 到文本 (索引) ＋ “].data”, 数据组)
.如果 (是否为空 (文字标签_显示逻辑))
    eCharts_JSON类.删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”)
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”)
.否则
    .判断开始 (文字标签_显示逻辑 ＝ 0)  ' 关闭文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 假)
    .判断 (文字标签_显示逻辑 ＝ 1)  ' 常开文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 真)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .判断 (文字标签_显示逻辑 ＝ 2)  ' 鼠标经过时显示文字标签
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.show”, , , , 假)
        置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.emphasis.show”, , , , 真)
    .默认

    .判断结束

.如果结束
' 文字标签_显示位置【label.position】
.如果 (是否为空 (文字标签_显示位置))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.position”, , 文字标签_显示位置)
.如果结束
' 文字标签_角度【label.rotate】
.如果 (是否为空 (文字标签_角度))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.rotate”, , , 文字标签_角度)
.如果结束
' 文字标签_文本格式器【label.formatter】
.如果 (是否为空 (文字标签_文本格式器))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.formatter”, , 文字标签_文本格式器)
.如果结束
' 文字标签_颜色【label.color】
.如果 (是否为空 (文字标签_颜色))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.color”, , 文字标签_颜色)
.如果结束
' 文字标签_大小【label.fontSize】
.如果 (是否为空 (文字标签_大小))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.fontSize”, , , 文字标签_大小)
.如果结束
' 文字标签_背景颜色【label.backgroundColor】
.如果 (是否为空 (文字标签_背景颜色))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].label.normal.backgroundColor”, , 文字标签_背景颜色)
.如果结束
' 散点_图形【symbol】
.如果 (是否为空 (散点_图形))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].symbol”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbol”, , 散点_图形)
.如果结束
' 散点_颜色【itemStyle.color】
.如果 (是否为空 (散点_颜色))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.color”, , 散点_颜色)
.如果结束
' 散点_阴影颜色【itemStyle.shadowColor】
.如果 (是否为空 (散点_阴影颜色))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.shadowColor”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].itemStyle.shadowColor”, , 散点_阴影颜色)
.如果结束
' 散点_大小【symbolSize】
.如果 (是否为空 (散点_大小))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolSize”, 散点_大小)
.如果结束
' 散点_角度【symbolRotate】
.如果 (是否为空 (散点_角度))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].symbolRotate”, , , 散点_角度)
.如果结束
' 绑定X轴索引
.如果 (是否为空 (绑定x轴索引))
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 0)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].xAxisIndex”, , , 绑定x轴索引)
.如果结束
' 绑定Y轴索引
.如果 (是否为空 (绑定y轴索引))
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 0)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].yAxisIndex”, , , 绑定y轴索引)
.如果结束
' 坐标系类型
.如果 (是否为空 (坐标系类型))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].coordinateSystem”, , 坐标系类型)
.如果结束
' 绑定地理坐标系索引【geoIndex】
.如果 (是否为空 (绑定地理坐标系索引))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].geoIndex”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].geoIndex”, , , 绑定地理坐标系索引)
.如果结束
' 绑定日历坐标系索引【calendarIndex】
.如果 (是否为空 (绑定日历坐标系索引))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].calendarIndex”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].calendarIndex”, , , 绑定日历坐标系索引)
.如果结束
' 绑定极坐标系索引
.如果 (是否为空 (绑定极坐标系索引))
    删除 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”)
.否则
    置新值 (“series[” ＋ 到文本 (索引) ＋ “].polarIndex”, , , 绑定极坐标系索引)
.如果结束
返回 (索引)


.子程序 添加标注_线, 整数型, 公开, 【markLine】，添加标注线，多条标注线请重复调用添加。返回当前标注线索引
.参数 图形索引, 整数型, , 索引从0开始。
.参数 起点标注类型, 整数型, 可空, 【data.type】，0：自定义（默认，且终点标注自动失效）；1：最小min；2：最大max；3：平均average
.参数 标注位置, 双精度小数型, 可空, 【data】，类型为0时有效
.参数 终点标注类型, 整数型, 可空, 【data.type】，1：最小min；2：最大max；3：平均average。注意终点标注仅起点标注非自定义时有效。
.局部变量 索引, 整数型
.局部变量 起点类型, 文本型
.局部变量 终点类型, 文本型

.如果 (是否为空 (终点标注类型))
    索引 ＝ eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data”, “{}”) － 1
    .判断开始 (起点标注类型 ＝ 0)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data[” ＋ 到文本 (索引) ＋ “].yAxis”, , , 标注位置)
    .判断 (起点标注类型 ＝ 1)
        起点类型 ＝ “min”
    .判断 (起点标注类型 ＝ 2)
        起点类型 ＝ “max”
    .判断 (起点标注类型 ＝ 3)
        起点类型 ＝ “average”
    .默认

    .判断结束
    .如果真 (起点类型 ≠ “”)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data[” ＋ 到文本 (索引) ＋ “].type”, , 起点类型)
    .如果真结束

.否则
    .如果真 (起点标注类型 ≠ 0)
        索引 ＝ eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data”, “[]”) － 1
        .判断开始 (起点标注类型 ＝ 1)
            起点类型 ＝ “min”
        .判断 (起点标注类型 ＝ 2)
            起点类型 ＝ “max”
        .判断 (起点标注类型 ＝ 3)
            起点类型 ＝ “average”
        .默认

        .判断结束
        .判断开始 (终点标注类型 ＝ 1)
            终点类型 ＝ “min”
        .判断 (终点标注类型 ＝ 2)
            终点类型 ＝ “max”
        .判断 (终点标注类型 ＝ 3)
            终点类型 ＝ “average”
        .默认

        .判断结束
        .如果真 (起点类型 ≠ “”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data[” ＋ 到文本 (索引) ＋ “][0].type”, , 起点类型)
        .如果真结束
        .如果真 (终点类型 ≠ “”)
            eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markLine.data[” ＋ 到文本 (索引) ＋ “][1].type”, , 终点类型)
        .如果真结束

    .如果真结束

.如果结束

返回 (索引)

.子程序 添加标注_点, 整数型, 公开, 【markPoint】，添加标注点，多个标注点请重复调用添加。返回当前标注点索引
.参数 图形索引, 整数型, , 索引从0开始。
.参数 标注类型, 整数型, 可空, 【data.type】，0：自定义（默认，且终点标注自动失效）；1：最小min；2：最大max；3：平均average
.参数 标注点x轴位置, 文本型, 可空, 【data.coord】，类型为0时有效，必须与x轴上的数据对应。
.参数 标注点y轴位置, 双精度小数型, 可空, 【data.coord】，类型为0时有效，可自由指定。
.参数 标注文字, 文本型, 可空, 【data.value】，类型为0时有效，省略将默认显示y轴位置数值。
.参数 标注文字颜色, 文本型, 可空, 【data.label.normal.textStyle.color】
.参数 标注点样式, 整数型, 可空, 【symbol】，默认为：6=大头针。可选：0=无，1=圆，2=矩形，3=圆角矩形，4=三角形，5=菱形，6=大头针，7=箭头
.参数 标注点颜色, 文本型, 可空, 【data.itemStyle.normal.color】，支持16进制颜色，也支持透明“transparent”（设标注点透明时需注意标注文字颜色，文字颜色默认是白色）
.参数 标注点尺寸_宽, 整数型, 可空, 【symbolSize】，默认50，像素
.参数 标注点尺寸_高, 整数型, 可空, 【symbolSize】，默认50，像素
.局部变量 索引, 整数型
.局部变量 类型, 文本型

索引 ＝ eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data”, “{}”) － 1
.判断开始 (标注类型 ＝ 0)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].coord[0]”, , 标注点x轴位置)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].coord[1]”, , , 标注点y轴位置)
    .如果 (是否为空 (标注文字))
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].value”, , 到文本 (标注点y轴位置))
    .否则
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].value”, , 标注文字)
    .如果结束

.判断 (标注类型 ＝ 1)
    类型 ＝ “min”
.判断 (标注类型 ＝ 2)
    类型 ＝ “max”
.判断 (标注类型 ＝ 3)
    类型 ＝ “average”
.默认

.判断结束
.如果真 (类型 ≠ “”)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].type”, , 类型)
.如果真结束
.如果真 (是否为空 (标注点样式) ＝ 假)
    .判断开始 (标注点样式 ＝ 0)  ' 无
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “none”)
    .判断 (标注点样式 ＝ 1)  ' 圆
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “circle”)
    .判断 (标注点样式 ＝ 2)  ' 矩形
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “rect”)
    .判断 (标注点样式 ＝ 3)  ' 圆角矩形
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “roundRect”)
    .判断 (标注点样式 ＝ 4)  ' 三角形
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “triangle”)
    .判断 (标注点样式 ＝ 5)  ' 菱形
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “diamond”)
    .判断 (标注点样式 ＝ 6)  ' 大头针
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “pin”)
    .判断 (标注点样式 ＝ 7)  ' 箭头
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbol”, , “arrow”)
    .默认

    .判断结束

.如果真结束
.如果真 (是否为空 (标注文字颜色) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].label.normal.textStyle.color”, , 标注文字颜色)
.如果真结束
.如果真 (是否为空 (标注点颜色) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.data[” ＋ 到文本 (索引) ＋ “].itemStyle.normal.color”, , 标注点颜色)
.如果真结束
.判断开始 (是否为空 (标注点尺寸_宽) ＝ 假 且 是否为空 (标注点尺寸_高) ＝ 假)
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbolSize”, “[” ＋ 到文本 (标注点尺寸_宽) ＋ “,” ＋ 到文本 (标注点尺寸_高) ＋ “]”)
.判断 (是否为空 (标注点尺寸_宽) ＝ 假 且 是否为空 (标注点尺寸_高))
    eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markPoint.symbolSize”, , , 标注点尺寸_宽)
.默认

.判断结束

返回 (索引)

.子程序 添加标注_区域, 整数型, 公开, 【markArea】，添加标注区域，多个标注区域请重复调用添加。返回当前标注区域索引
.参数 图形索引, 整数型, , 索引从0开始。
.参数 区域起点类型, 整数型, , 【data.type】，0：自定义坐标；1：最小min；2：最大max；3：平均average；4：以x轴为基准；5：以y轴为基准
.参数 区域起点参数1, 文本型, 可空, 【data.coord】，类型1、2、3时无效；类型为0或4时，必须与x轴上的数据对应
.参数 区域起点参数2, 双精度小数型, 可空, 【data.coord】，类型1、2、3时无效；类型为0或5时，为y轴数值（可自由指定）
.参数 区域终点类型, 整数型, , 【data.type】，0：自定义坐标；1：最小min；2：最大max；3：平均average；4：以x轴为基准；5：以y轴为基准。（注意标注区域以x轴或y轴为基准时，终点类型也必须与起点对应相同，例如起点类型为4，终点类型也必须为4）
.参数 区域终点参数1, 文本型, 可空, 【data.coord】，类型1、2、3时无效；类型为0或4时，必须与x轴上的数据对应
.参数 区域终点参数2, 双精度小数型, 可空, 【data.coord】，类型1、2、3时无效；类型为0或5时，为y轴数值（可自由指定）
.局部变量 索引, 整数型
.局部变量 类型, 文本型

索引 ＝ eCharts_JSON类.数组_加入成员 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data”, “[]”) － 1
.如果真 (区域起点类型 ≥ 0 且 区域起点类型 ≤ 5 且 区域终点类型 ≥ 0 且 区域终点类型 ≤ 5)
    .判断开始 (区域起点类型 ＝ 0)  ' 自定义坐标
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].coord[0]”, , 区域起点参数1)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].coord[1]”, , , 区域起点参数2)
    .判断 (区域起点类型 ＝ 1)  ' 最小值
        类型 ＝ “min”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].type”, , 类型)
    .判断 (区域起点类型 ＝ 2)  ' 最大值
        类型 ＝ “max”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].type”, , 类型)
    .判断 (区域起点类型 ＝ 3)  ' 平均值
        类型 ＝ “average”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].type”, , 类型)
    .判断 (区域起点类型 ＝ 4)  ' x轴基准
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].xAxis”, , 区域起点参数1)
    .判断 (区域起点类型 ＝ 5)  ' y轴基准
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][0].yAxis”, , , 区域起点参数2)
    .默认

    .判断结束

    .判断开始 (区域终点类型 ＝ 0)  ' 自定义坐标
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].coord[0]”, , 区域终点参数1)
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].coord[1]”, , , 区域终点参数2)
    .判断 (区域终点类型 ＝ 1)  ' 最小值
        类型 ＝ “min”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].type”, , 类型)
    .判断 (区域终点类型 ＝ 2)  ' 最大值
        类型 ＝ “max”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].type”, , 类型)
    .判断 (区域终点类型 ＝ 3)  ' 平均值
        类型 ＝ “average”
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].type”, , 类型)
    .判断 (区域终点类型 ＝ 4)  ' x轴基准
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].xAxis”, , 区域终点参数1)
    .判断 (区域终点类型 ＝ 5)  ' y轴基准
        eCharts_JSON类.置新值 (“series[” ＋ 到文本 (图形索引) ＋ “].markArea.data[” ＋ 到文本 (索引) ＋ “][1].yAxis”, , , 区域终点参数2)
    .默认

    .判断结束

.如果真结束
返回 (索引)

.子程序 取代码_带JS变量, 文本型, 公开, 如果有使用JS变量或使用时间轴组件，请使用此命令取最终代码。
.局部变量 json, eCharts_JSON类
.局部变量 计数器, 整数型

.如果 (取文本长度 (时间轴_基本配置.取代码 ()) ＜ 4 且 取文本长度 (时间轴_集合配置.取代码 ()) ＜ 4)
    返回 (处理JS代码 (eCharts_JSON类.取代码 ()))
.否则
    .计次循环首 (取数组成员数 (内部变量表), 计数器)
        .判断开始 (内部变量表 [计数器].JS变量名或JS回调函数 ＝ “__baseOption”)
            内部变量表 [计数器].占位符 ＝ #引号 ＋ “__baseOption” ＋ #引号 ＋ “:” ＋ 内部变量表 [计数器].占位符
            内部变量表 [计数器].JS变量名或JS回调函数 ＝ 取文本中间 (eCharts_JSON类.取代码 (), 2, 取文本长度 (eCharts_JSON类.取代码 ()) － 2)
        .判断 (内部变量表 [计数器].JS变量名或JS回调函数 ＝ “__options”)
            内部变量表 [计数器].JS变量名或JS回调函数 ＝ 时间轴_集合配置.取代码 ()
        .默认

        .判断结束

    .计次循环尾 ()
    返回 (处理JS代码 (时间轴_基本配置.取代码 ()))
.如果结束


.子程序 处理JS代码, 文本型, , 将带占位符的原始json对照内部变量表中的内容一一替换。
.参数 带占位符的代码, 文本型
.局部变量 计数器, 整数型
.局部变量 最终代码, 文本型

最终代码 ＝ 带占位符的代码
.计次循环首 (取数组成员数 (内部变量表), 计数器)
    .如果 (寻找文本 (最终代码, #引号 ＋ 内部变量表 [计数器].占位符 ＋ #引号, , 假) ≠ -1)
        最终代码 ＝ 子文本替换 (最终代码, #引号 ＋ 内部变量表 [计数器].占位符 ＋ #引号, 内部变量表 [计数器].JS变量名或JS回调函数, , , 真)
    .否则
        最终代码 ＝ 子文本替换 (最终代码, 内部变量表 [计数器].占位符, 内部变量表 [计数器].JS变量名或JS回调函数, , , 真)
    .如果结束

.计次循环尾 ()
返回 (最终代码)


.子程序 取图形数据, , 公开, 返回所有图形的json格式数据以及对应的索引。
.参数 图形数据json组, 文本型, 参考 可空 数组, 索引组与图形数据json一一对应。
.参数 X轴数据组, 文本型, 参考 可空 数组
.参数 Y轴数据组, 文本型, 参考 可空 数组
.局部变量 计数器, 整数型

清除数组 (图形数据json组)
清除数组 (X轴数据组)
清除数组 (Y轴数据组)
.计次循环首 (eCharts_JSON类.数组_取长度 (“series”), 计数器)
    加入成员 (图形数据json组, eCharts_JSON类.取文本 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].data”))
.计次循环尾 ()
.计次循环首 (eCharts_JSON类.数组_取长度 (“xAxis”), 计数器)
    加入成员 (X轴数据组, eCharts_JSON类.取文本 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”))
.计次循环尾 ()
.计次循环首 (eCharts_JSON类.数组_取长度 (“yAxis”), 计数器)
    加入成员 (Y轴数据组, eCharts_JSON类.取文本 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”))
.计次循环尾 ()

.子程序 取图形数量, 整数型, 公开, 取当前图形对象中图形的数量。

返回 (eCharts_JSON类.数组_取长度 (“series”))


.子程序 JS操作_运行图形配置, 文本型, 公开, 【echartsInstance.setOption()】，返回js代码
.参数 图形配置内容json, 文本型, 可空, 留空将自动调用类内部json。
.局部变量 json, 文本型

.如果真 (是否为空 (图形配置内容json))
    json ＝ Echarts类_图形.取代码_带JS变量 ()
.如果真结束
返回 (全局_当前图形对象属性.名称 ＋ “.setOption(” ＋ json ＋ “);” ＋ 全局_当前图形对象属性.名称 ＋ “.hideLoading();”)

.子程序 JS操作_更新图形数据, 文本型, 公开, 返回js代码。修改后的新数据将自动同步至图形对象。
.参数 图形数据JSON组, 文本型, 可空 数组
.参数 X轴数据JSON组, 文本型, 可空 数组
.参数 Y轴数据JSON组, 文本型, 可空 数组
.局部变量 最终json, eCharts_JSON类
.局部变量 计数器, 整数型

最终json.解析 ()
.计次循环首 (取数组成员数 (图形数据JSON组), 计数器)
    置新值 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].data”, 图形数据JSON组 [计数器])
    最终json.置新值 (“series[” ＋ 到文本 (计数器 － 1) ＋ “].data”, 图形数据JSON组 [计数器])
.计次循环尾 ()
.计次循环首 (取数组成员数 (X轴数据JSON组), 计数器)
    置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”, X轴数据JSON组 [计数器])
    最终json.置新值 (“xAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”, X轴数据JSON组 [计数器])
.计次循环尾 ()
.计次循环首 (取数组成员数 (Y轴数据JSON组), 计数器)
    置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”, Y轴数据JSON组 [计数器])
    最终json.置新值 (“yAxis[” ＋ 到文本 (计数器 － 1) ＋ “].data”, Y轴数据JSON组 [计数器])
.计次循环尾 ()
返回 (全局_当前图形对象属性.名称 ＋ “.setOption(” ＋ 最终json.取代码 () ＋ “);”)

