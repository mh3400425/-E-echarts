.版本 2

.程序集 Echarts类_框架, , 公开
.程序集变量 类成员_json, eCharts_JSON类, , "0"
.程序集变量 类成员_图形主体代码组, 文本型, , "0"

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用



.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用



.子程序 取_图形主体代码, 文本型, 公开, 获取指定序号位置的图形主体代码。
.参数 索引序号, 整数型, 可空, 从0开始。留空将获取全部图形主体代码。指定序号不存在将返回空。
.局部变量 i, 整数型
.局部变量 最终内容, 文本型

.如果 (是否为空 (索引序号))
    .计次循环首 (取_图形主体个数 (), i)
        最终内容 ＝ 最终内容 ＋ 类成员_图形主体代码组 [i]
    .计次循环尾 ()
    返回 (最终内容)

.否则
    .如果 (i ≤ 取_图形主体个数 () － 1 且 i ≥ 0)
        返回 (类成员_图形主体代码组 [索引序号 ＋ 1])
    .否则
        返回 (“”)
    .如果结束

.如果结束



.子程序 取_图形主体个数, 整数型, 公开

返回 (取数组成员数 (类成员_图形主体代码组))

.子程序 生成_最终html页面, 文本型, 公开
.参数 图形主体代码, 文本型, 可空, 留空将自动按顺序取全部图形主体代码，请确保本命令之前已经创建好图形。
.参数 JS代码, 文本型, 可空, 文本js代码。
.参数 CSS代码, 文本型, 可空, 文本css代码。
.参数 引用JS文件, 文本型, 可空, 引用外部JS文件，多个文件用“++”分隔开。例如：“http://www.abc.com/one.js ++ http://www.abc.com/two.js” 或者 “http://www.abc.com/one.js”+ “++” +“http://www.abc.com/two.js”
.参数 引用CSS文件, 文本型, 可空, 引用外部CSS文件，多个文件用“++”分隔开。
.参数 编码, 整数型, 可空, 默认为1（utf8），编码：1=utf8，2=GBK。假如使用IE内核浏览框（浏览器）则建议使用GBK编码，如使用其他内核浏览框（如chrome内核，例如wke、CEF等）则建议使用utf8编码（写出文件时也需要转换文件编码为UTF8）
.局部变量 临时文本, 文本型
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 i, 整数型
.局部变量 临时文本1, 文本型

临时文本 ＝ #HTML_页面初始框架
临时文本 ＝ 子文本替换 (临时文本, “%CSS代码%”, CSS代码, , , 真)
.判断开始 (编码 ＝ 1)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断 (编码 ＝ 2)
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “gbk”, , , 真)
.默认
    临时文本 ＝ 子文本替换 (临时文本, “%编码%”, “utf-8”, , , 真)
.判断结束

.如果 (是否为空 (图形主体代码))
    临时文本 ＝ 子文本替换 (临时文本, “%主体代码%”, 取_图形主体代码 (), , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%主体代码%”, 图形主体代码, , , 真)
.如果结束

.如果真 (是否为空 (JS代码) ＝ 假)
    临时文本 ＝ 子文本替换 (临时文本, “%Echart代码%”, “%Echart代码%</script><script>” ＋ JS代码, , , 真)
.如果真结束

临时文本 ＝ 子文本替换 (临时文本, “%Echart代码%”, 编码转换_Utf8到Ansi (#echarts_min), , , 真)
.如果真 (是否为空 (引用JS文件) ＝ 假)
    .判断开始 (取文本长度 (引用JS文件) ＞ 100 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “function”, , 假) ≠ -1)  ' js源代码
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, “<script>” ＋ 引用JS文件 ＋ “</script></head>”, , , 真)
    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “http”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ＝ -1)  ' 引用单个web端js文件
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 引用JS文件, , , 真), , , 真)
    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “http://”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ≠ -1)  ' 引用多个web端js文件
        临时文本数组 ＝ 分割文本 (引用JS文件, “++”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            .如果 (i ＝ 取数组成员数 (临时文本数组))
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i]
            .否则
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i] ＋ #引号 ＋ “charset ='utf-8'></script><script src=” ＋ #引号
            .如果结束

        .计次循环尾 ()
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 临时文本1, , , 真), , , 真)
    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “file:///”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ＝ -1)  ' 引用单个本地第三方js文件
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用JS文件, “%外部JS文件%”, 引用JS文件, , , 真), , , 真)

    .判断 (取文本长度 (引用JS文件) ＜ 200 且 寻找文本 (引用JS文件, “file:///”, , 假) ≠ -1 且 寻找文本 (引用JS文件, “++”, , 假) ≠ -1)  ' 引用多个本地第三方js文件
        临时文本数组 ＝ 分割文本 (引用JS文件, “++”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            .如果 (i ＝ 取数组成员数 (临时文本数组))
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i]
            .否则
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i] ＋ #引号 ＋ “charset ='utf-8'></script><script src=” ＋ #引号
            .如果结束

        .计次循环尾 ()

    .默认
        信息框 (“引用js文件参数不合法！”, 0, , )
    .判断结束

.如果真结束
清除数组 (临时文本数组)
.如果真 (是否为空 (引用CSS文件) ＝ 假)
    .如果 (寻找文本 (引用CSS文件, “++”, , 假) ＝ -1)  ' 引用单个web端js文件
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 引用CSS文件, , , 真), , , 真)

    .否则
        临时文本数组 ＝ 分割文本 (引用CSS文件, “++”, )
        .计次循环首 (取数组成员数 (临时文本数组), i)
            .如果 (i ＝ 取数组成员数 (临时文本数组))
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i]
            .否则
                临时文本1 ＝ 临时文本1 ＋ 临时文本数组 [i] ＋ #引号 ＋ “><link rel='stylesheet' type='text/css' href=” ＋ #引号
            .如果结束

        .计次循环尾 ()
        临时文本 ＝ 子文本替换 (临时文本, “</head>”, 子文本替换 (#引用CSS文件, “%外部CSS文件%”, 临时文本1, , , 真), , , 真)

    .如果结束

.如果真结束
返回 (临时文本)

.子程序 创建唯一myChart名称
.参数 索引, 整数型, 可空
.局部变量 计数器, 整数型
.局部变量 是否存在, 逻辑型

.如果真 (是否为空 (索引))
    索引 ＝ 0
.如果真结束
.计次循环首 (取数组成员数 (全局_图形对象属性组), 计数器)
    .如果真 (全局_图形对象属性组 [计数器].名称 ＝ “myChart” ＋ 到文本 (索引) 或 全局_图形对象属性组 [计数器].divID ＝ “mydiv” ＋ 到文本 (索引))
        创建唯一myChart名称 (索引 ＋ 1)
        返回 ()
    .如果真结束

.计次循环尾 ()
.如果真 (全局_当前图形对象属性.名称 ＝ “”)
    全局_当前图形对象属性.名称 ＝ “myChart” ＋ 到文本 (索引)
.如果真结束
.如果真 (全局_当前图形对象属性.divID ＝ “”)
    全局_当前图形对象属性.divID ＝ “mydiv” ＋ 到文本 (索引)
.如果真结束
加入成员 (全局_图形对象属性组, 全局_当前图形对象属性)

.子程序 创建_图形主体, 整数型, 公开, 创建一个包含了div容器的echarts图形对象，返回当前图形对象的索引序号，多图形时请重复调用。
.参数 宽度, 文本型, 可空, 例：300px/100%，宽度和高度参数省略默认将开启图形尺寸自适应。注意多图形布局时不支持自适应请手动填写尺寸。
.参数 高度, 文本型, 可空, 例：300px/100%，宽度和高度参数省略默认将开启图形尺寸自适应。注意多图形布局时不支持自适应请手动填写尺寸。
.参数 图形div块id, 文本型, 可空, ID，默认：container1 ，方便使用css布局，多图形时必须指定不同id。
.参数 图形div块class, 文本型, 可空, class，留空则无，多图形布局时用，单图形可无视。
.参数 图形对象名称, 文本型, 可空, 默认：myChart ，注意：同个页面显示多个图形且需要用js操作数据，则这个名称必须不能重复，不需要js操作数据的请无视。
.参数 配置信息json, 文本型, 可空, 留空时将创建空白图形，可使用js后期加载。
.参数 是否要显示loading等待, 逻辑型, 可空, 默认：假。数据比较多加载慢时可设置显示loading，数据使用js后期加载。（注：此功能不阻塞数据加载，仅为看起来好看）
.参数 使用主题, 文本型, 可空, 留空将使用默认主题。可选常量“主题_”开头的6套官方主题，也支持通过官网在线构建主题：http://echarts.baidu.com/theme-builder/ （复制导入生成的js版本主题代码即可）。
.参数 渲染器, 文本型, 可空, 默认：canvas。可选canvas/svg。（SVG渲染器在移动端或者环境稍差时效果可能更好，数据量很大较多交互时可以选用CANVAS渲染器，但不绝对，请根据情况自行测试。）
.参数 开启图形尺寸自适应, 逻辑型, 可空, 默认真=开启。注意：仅适用于单图形，图形将填满整个浏览框，手动设置上边宽高尺寸后本参数将自动关闭。
.局部变量 临时文本, 文本型
.局部变量 图形尺寸自适应代码, 文本型
.局部变量 主题名, 文本型
.局部变量 x, 整数型

全局_当前图形对象属性.名称 ＝ “”
全局_当前图形对象属性.divID ＝ “”
.如果真 (是否为空 (宽度) 或 是否为空 (高度))
    开启图形尺寸自适应 ＝ 真
.如果真结束
.如果真 (是否为空 (图形div块id) 或 删首尾空 (图形div块id) ＝ “”)
    创建唯一myChart名称 ()
    图形div块id ＝ 全局_当前图形对象属性.divID
.如果真结束
.如果真 (是否为空 (图形对象名称) 或 删首尾空 (图形对象名称) ＝ “”)
    图形对象名称 ＝ 全局_当前图形对象属性.名称
.如果真结束

临时文本 ＝ #HTML_折线图
.如果 (是否为空 (使用主题) ＝ 假)
    .如果 (取文本长度 (使用主题) ＞ 10)
        临时文本 ＝ “<script>” ＋ 使用主题 ＋ “</script>” ＋ 临时文本
        x ＝ 寻找文本 (使用主题, “registerTheme('”, , 假) ＋ 15
        主题名 ＝ 取文本中间 (使用主题, x, 寻找文本 (使用主题, “',”, x, 假) － x)
        临时文本 ＝ 子文本替换 (临时文本, “%主题名%”, “'” ＋ 主题名 ＋ “'”, , , 真)

    .否则
        临时文本 ＝ 子文本替换 (临时文本, “%主题名%”, “null”, , , 真)
    .如果结束

.否则
    临时文本 ＝ 子文本替换 (临时文本, “%主题名%”, “null”, , , 真)
.如果结束

.如果 (是否为空 (图形div块class))
    临时文本 ＝ 子文本替换 (临时文本, “%class名称%”, “”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%class名称%”, 图形div块class, , , 真)
.如果结束

.如果 (是否为空 (渲染器) 或 渲染器 ＝ “”)
    临时文本 ＝ 子文本替换 (临时文本, “%渲染器%”, “canvas”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%渲染器%”, 渲染器, , , 真)
.如果结束

.如果 (是否为空 (宽度) ＝ 假 且 是否为空 (高度) ＝ 假)
    临时文本 ＝ 子文本替换 (临时文本, “%高度宽度%”, “height:” ＋ 到文本 (高度) ＋ “;width:” ＋ 到文本 (宽度), , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%高度宽度%”, “”, , , 真)
.如果结束

临时文本 ＝ 子文本替换 (临时文本, “%折线图div名称%”, 图形div块id, , , 真)
' %折线图对象名称%
临时文本 ＝ 子文本替换 (临时文本, “%折线图对象名称%”, 图形对象名称, , , 真)
.如果 (是否为空 (配置信息json))
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, #Echart空白配置, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%配置信息%”, 配置信息json, , , 真)
.如果结束
.如果 (是否要显示loading等待)
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, 图形对象名称 ＋ “.showLoading();”, , , 真)
.否则
    临时文本 ＝ 子文本替换 (临时文本, “%是否要显示loading%”, “”, , , 真)
.如果结束

.如果真 (是否为空 (宽度) 且 是否为空 (高度) 且 (是否为空 (开启图形尺寸自适应) 或 开启图形尺寸自适应))
    图形尺寸自适应代码 ＝ #常用JS代码_图形大小自适应
    图形尺寸自适应代码 ＝ 子文本替换 (图形尺寸自适应代码, “%图形DIV名称%”, 图形div块id, , , 真)
    图形尺寸自适应代码 ＝ 子文本替换 (图形尺寸自适应代码, “%图形对象名称%”, 图形对象名称, , , 真)
    临时文本 ＝ 取文本左边 (临时文本, 取文本长度 (临时文本) － 9)
    临时文本 ＝ 临时文本 ＋ 图形尺寸自适应代码 ＋ “</script>”
.如果真结束

加入成员 (类成员_图形主体代码组, 临时文本)

返回 (取数组成员数 (类成员_图形主体代码组) － 1)

.子程序 创建_DIV容器, 文本型, 公开, 创建并返回一个div容器。
.参数 内容innerHTML, 文本型, 可空, 内容可以为图形主体代码，也可以为其他容器（嵌套），也可以为其他文本html代码。
.参数 ID, 文本型, 可空, CSS选择器ID，用于一对一控制其位置或样式，所以不要有重复。
.参数 class, 文本型, 可空, CSS选择器class，用于批量控制位置或样式，同一作用及效果类型div的class可重复。
.参数 内联style, 文本型, 可空, 内联css，优先级将高于最终html页面中css代码。
.局部变量 id文本, 文本型
.局部变量 class文本, 文本型
.局部变量 style文本, 文本型

.如果真 (是否为空 (ID) ＝ 假)
    id文本 ＝ “ id='” ＋ ID ＋ “' ”
.如果真结束
.如果真 (是否为空 (class) ＝ 假)
    class文本 ＝ “ class='” ＋ class ＋ “' ”
.如果真结束
.如果真 (是否为空 (内联style) ＝ 假)
    style文本 ＝ “ style='” ＋ 内联style ＋ “' ”
.如果真结束
返回 (“<div” ＋ id文本 ＋ class文本 ＋ style文本 ＋ “>” ＋ 内容innerHTML ＋ “</div>”)


.子程序 创建_自定义html容器, 文本型, 公开, 创建并返回一个自定义容器，如<span></span>等等。
.参数 标签名称, 文本型, , 例如span、input、p等等。
.参数 内容innerHTML, 文本型, 可空, innerHTML，可以嵌套html代码。
.参数 ID, 文本型, 可空, CSS选择器ID，用于一对一控制其位置或样式，所以不要有重复。
.参数 class, 文本型, 可空, CSS选择器class，用于批量控制位置或样式，同一作用及效果类型div的class可重复。
.参数 内联style, 文本型, 可空, 内联css，优先级将高于最终html页面中css代码。
.参数 其他属性, 文本型, 可空, 其他自定义属性。例如：<input type='checkbox'>等等
.局部变量 ID文本, 文本型
.局部变量 class文本, 文本型
.局部变量 其他属性文本, 文本型
.局部变量 innerHTML文本, 文本型
.局部变量 style文本, 文本型

.如果真 (是否为空 (ID) ＝ 假)
    ID文本 ＝ “ id='” ＋ ID ＋ “' ”
.如果真结束
.如果真 (是否为空 (class) ＝ 假)
    class文本 ＝ “ class='” ＋ class ＋ “' ”
.如果真结束
.如果真 (是否为空 (内联style) ＝ 假)
    style文本 ＝ “style='” ＋ 内联style ＋ “' ”
.如果真结束
返回 (“<” ＋ 标签名称 ＋ “ ” ＋ ID文本 ＋ class文本 ＋ 其他属性文本 ＋ style文本 ＋ “>” ＋ 内容innerHTML ＋ “</” ＋ 标签名称 ＋ “>”)

