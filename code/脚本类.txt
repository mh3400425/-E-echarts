.版本 2

.程序集 脚本类
.程序集变量 脚本对象, 对象
.程序集变量 错误代码, 对象

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

CoInitialize (0)
.如果真 (脚本对象.创建 (“ScriptControl”, ))
    错误代码 ＝ 脚本对象.读对象型属性 (“Error”, )
    语言 (“JScript”)
.如果真结束


.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用

脚本对象.清除 ()
CoUninitialize ()

.子程序 取错误代码, 文本型
.局部变量 错误信息, 文本型

错误信息 ＝ “【第” ＋ 到文本 (错误代码.读数值属性 (“Line”, )) ＋ “ 行，第” ＋ 到文本 (错误代码.读数值属性 (“Column”, )) ＋ “列 错误】【代码：” ＋ 到文本 (错误代码.读数值属性 (“Number”, )) ＋ “】【源：” ＋ 错误代码.读文本属性 (“Source”, ) ＋ “】【描述：” ＋ 错误代码.读文本属性 (“Description”, ) ＋ “】【语句：” ＋ 错误代码.读文本属性 (“Text”, ) ＋ “】”
返回 (错误信息)

.子程序 语言, 文本型, 公开
.参数 脚本语言, 文本型, 可空, JScript,VBScript 留空则取出语言

.如果真 (是否为空 (脚本语言) ＝ 假)
    .如果真 (脚本语言 ≠ “JScript”)
        脚本语言 ＝ “VBScript”
    .如果真结束
    脚本对象.写属性 (“Language”, 脚本语言)
.如果真结束
返回 (脚本对象.读文本属性 (“Language”, ))

.子程序 超时, 整数型, 公开, 设置或返回时间（毫秒），此时间后用户可选择中止脚本代码的执行或允许代码继续执行。
.参数 新超时值, 整数型, 可空, 默认为-1，执行无超时

.如果真 (是否为空 (新超时值))
    新超时值 ＝ -1
.如果真结束
脚本对象.写属性 (“Timeout”, 新超时值)
返回 (脚本对象.读数值属性 (“Timeout”, ))

.子程序 状态, 整数型
.参数 新状态值, 整数型, 可空, 参数值为以下值之一： 0、Initialized； 1、Connected

.如果真 (是否为空 (新状态值) ＝ 假)
    脚本对象.写属性 (“State”, 新状态值)
.如果真结束
返回 (脚本对象.读数值属性 (“State”, ))

.子程序 计算表达式, 文本型, 公开
.参数 表达式, 文本型

返回 (脚本对象.通用方法 (“Eval”, 表达式).取文本 ())

.子程序 执行, 整数型, 公开
.参数 语句, 文本型

返回 (脚本对象.数值方法 (“ExecuteStatement”, 语句))

.子程序 运行, 文本型, 公开, 运行失败会自动输出错误文本
.参数 过程名, 文本型
.参数 参数1, 文本型, 可空
.参数 参数2, 文本型, 可空
.参数 参数3, 文本型, 可空
.参数 参数4, 文本型, 可空
.参数 参数5, 文本型, 可空
.局部变量 str, 文本型

str ＝ 脚本对象.通用方法 (“Run”, 过程名, 参数1, 参数2, 参数3, 参数4, 参数5).取文本 ()
.如果真 (str ＝ “”)
    输出调试文本 (取错误代码 ())
.如果真结束
返回 (str)

.子程序 重置, 整数型, 公开

返回 (脚本对象.数值方法 (“Reset”, ))

.子程序 添加代码, 整数型, 公开
.参数 代码, 文本型

返回 (脚本对象.数值方法 (“AddCode”, 代码))

.子程序 Eval, 文本型, 公开, 解密经过加密后的JS文本，形如：Eval（，，，）
.参数 eval文本, 文本型, , 经过eval加密后的JS内容
.局部变量 脚本, 脚本类
.局部变量 str, 文本型

脚本.执行 (#Eval)
str ＝ 脚本.运行 (“uncode”, eval文本, , , , )
返回 (str)

.子程序 格式化, 文本型, 公开, 格式化JS脚本
.参数 js代码, 文本型, , 需要加密\解密的源码
.参数 压缩模式, 整数型, 可空, 0为格式化代码,1为压缩代码. 注:如果为1,则第三参数无效
.参数 分割方法, 整数型, 可空, 0为经典js代码分割方法,1为微软标准js代码分割方法
.局部变量 js, 脚本类

js.执行 (#JS清晰化)
.如果真 (是否为空 (压缩模式))
    压缩模式 ＝ 0
.如果真结束
.如果真 (是否为空 (分割方法))
    分割方法 ＝ 1
.如果真结束
返回 (js.运行i (“go”, js代码, 压缩模式, 分割方法))

.子程序 运行i, 文本型, 公开
.参数 过程名, 文本型
.参数 参数1, 文本型, 可空
.参数 参数2, 整数型, 可空
.参数 参数3, 整数型, 可空
.参数 参数4, 文本型, 可空
.参数 参数5, 文本型, 可空

返回 (脚本对象.通用方法 (“Run”, 过程名, 参数1, 参数2, 参数3, 参数4, 参数5).取文本 ())
