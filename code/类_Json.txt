.版本 2

.程序集 类_Json, , 公开
.程序集变量 对象, 对象
.程序集变量 dataName, 文本型, , , 需要调用时的名字

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

dataName ＝ “da”
初始化 ()

.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用

对象.清除 ()
CoUninitialize ()

.子程序 初始化, 逻辑型
.局部变量 Ret, 逻辑型

CoInitialize (0)
Ret ＝ 对象.创建 (“MSScriptControl.ScriptControl”, )
.判断开始 (Ret)
    对象.写属性 (“Language”, “JavaScript”)

.默认

    Ret ＝ 对象.创建 (“ScriptControl”, )
    .如果真 (Ret)
        对象.写属性 (“Language”, “JScript”)
    .如果真结束

.判断结束
.如果真 (Ret)
    对象.数值方法 (“AddCode”, #js2)
    对象.数值方法 (“Eval”, “var ” ＋ dataName ＋ “={}”)
.如果真结束
返回 (Ret)

.子程序 解析, 逻辑型, 公开
.参数 数据文本, 文本型, , json的文本数据

.如果真 (初始化 () ＝ 假)
    输出调试文本 (“Json创建对象失败！”)
    返回 (假)
.如果真结束
对象.数值方法 (“Eval”, “var ” ＋ dataName ＋ “=null”)
对象.数值方法 (“AddCode”, “var ” ＋ dataName ＋ “=eval(” ＋ 数据文本 ＋ “)”)
返回 (对象.逻辑方法 (“Eval”, “null !=” ＋ dataName))

.子程序 取数据文本, 文本型, 公开

返回 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ dataName ＋ “)”))

.子程序 清除, , 公开

对象.方法 (“Eval”, dataName ＋ “={}”)

.子程序 置属性, , 公开
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型
.参数 为对象, 逻辑型, 可空, 属性解析为json对象,数组

.如果真 (为对象)
    值 ＝ 选择 (值 ＝ “”, “{}”, 值)
    对象.方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “= eval(” ＋ 值 ＋ “)”)
    返回 ()
.如果真结束
对象.方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “='” ＋ 值 ＋ “'”)

.子程序 置属性对象, , 公开, 属性解析为json对象,数组
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型

对象.方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “= eval(” ＋ 值 ＋ “)”)

.子程序 置属性数值, , 公开
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 双精度小数型

对象.方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “=” ＋ 到文本 (值) ＋ “”)

.子程序 取属性数值, 双精度小数型, 公开
.参数 名字, 文本型, , 支持a.b.c[0]

返回 (对象.数值方法 (“Eval”, dataName ＋ “.” ＋ 名字))

.子程序 取属性对象, 文本型, , 返回对象文本
.参数 名字, 文本型, , 支持a.b.c[0]

' 返回 (对象.文本方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “.toJSONString()”))
' “JSON.stringify(” ＋ dataName ＋ “)”
返回 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ dataName ＋ “.” ＋ 名字 ＋ “)”))

.子程序 取通用属性, 文本型, 公开, 返回文本
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b
.参数 为对象, 逻辑型, 可空, 为真解析属性为 数值,json{},不然有转义"\"
.局部变量 a, 文本型

.如果真 (取文本左边 (名字, 1) ≠ “[”)
    a ＝ “.”
.如果真结束
.如果真 (为对象)
    返回 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ dataName ＋ a ＋ 名字 ＋ “)”))
.如果真结束
返回 (对象.文本方法 (“Eval”, dataName ＋ a ＋ 名字))

.子程序 取属性, 类_Json, 公开
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b
.局部变量 临时, 类_Json
.局部变量 a, 文本型

.如果真 (取文本左边 (名字, 1) ≠ “[”)
    a ＝ “.”
.如果真结束
临时.解析 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ dataName ＋ a ＋ 名字 ＋ “)”))
返回 (临时)

.子程序 成员数, 整数型, 公开
.参数 名字, 文本型, 可空, 支持a.b.c,根目录为空

.如果 (名字 ≠ “”)
    名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    名字 ＝ dataName
.如果结束
返回 (对象.数值方法 (“Eval”, “get__count(” ＋ 名字 ＋ “)”))

.子程序 加成员, , 公开
.参数 成员值, 文本型, , 对象
.参数 名字, 文本型, 可空, 支持a.b.c
.参数 为对象, 逻辑型, 可空, 数值,json节点
.局部变量 a, 文本型

.如果 (名字 ≠ “”)
    名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    名字 ＝ dataName
.如果结束
.如果真 (为对象 ＝ 假)
    a ＝ “'”
.如果真结束
对象.方法 (“Eval”, “if (Object.prototype.toString.call(” ＋ 名字 ＋ “) != '[object Array]') { ” ＋ 名字 ＋ “=new Array();} ” ＋ 名字 ＋ “.push(” ＋ a ＋ 成员值 ＋ a ＋ “)”)

.子程序 取成员, 类_Json, 公开
.参数 索引, 整数型
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点
.局部变量 临时, 类_Json
.局部变量 _名字, 文本型

.如果 (名字 ≠ “”)
    _名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    _名字 ＝ dataName
.如果结束
临时.解析 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ _名字 ＋ “[” ＋ 到文本 (索引) ＋ “])”))
返回 (临时)

.子程序 取成员文本, 文本型, 公开
.参数 索引, 整数型, , 支持a.b.c
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点
.参数 为对象, 逻辑型, 可空, 对象为真,否则返回obj,数值,json节点
.局部变量 _名字, 文本型

.如果 (名字 ≠ “”)
    _名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    _名字 ＝ dataName
.如果结束
.如果真 (为对象)
    返回 (对象.文本方法 (“Eval”, “JSON.stringify(” ＋ _名字 ＋ “[” ＋ 到文本 (索引) ＋ “])”))
.如果真结束
返回 (对象.文本方法 (“Eval”, _名字 ＋ “[” ＋ 到文本 (索引) ＋ “]”))

.子程序 置成员, , 公开
.参数 索引, 整数型, , 支持a.b.c
.参数 成员值, 文本型
.参数 为对象, 逻辑型, 可空, 数值,json节点
.局部变量 a, 文本型

.如果真 (为对象 ＝ 假)
    a ＝ “'”
.如果真结束
对象.方法 (“Eval”, dataName ＋ “[” ＋ 到文本 (索引) ＋ “]=” ＋ a ＋ 成员值 ＋ a)

.子程序 删成员, , 公开
.参数 索引, 整数型, , 支持a.b.c

对象.方法 (“Eval”, dataName ＋ “.splice(” ＋ 到文本 (索引) ＋ “,1)”)


.子程序 置类型, , 公开
.参数 值, 整数型, , 0空,4对象,5数组

.如果真 (值 ＝ 0)
    对象.数值方法 (“Eval”, “var ” ＋ dataName ＋ “={}”)
    返回 ()
.如果真结束
.如果真 (值 ＝ 4)
    对象.数值方法 (“Eval”, “var ” ＋ dataName ＋ “={}”)
    返回 ()
.如果真结束
.如果真 (值 ＝ 5)
    对象.数值方法 (“Eval”, “var ” ＋ dataName ＋ “=new Array()”)
    返回 ()
.如果真结束


.子程序 赋值, , 公开
.参数 值, 文本型
.参数 为对象, 逻辑型, 可空, 数值,json节点
.局部变量 a, 文本型

.如果真 (为对象 ＝ 假)
    a ＝ “'”
.如果真结束
对象.逻辑方法 (“Eval”, dataName ＋ “=” ＋ a ＋ 值 ＋ a)

.子程序 属性是否存在, 逻辑型, 公开
.参数 名字, 文本型, , 支持a.b.c

返回 (对象.逻辑方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “ !=null”))


.子程序 取所有属性名, , 公开
.参数 属性名数组, 文本型, 参考 数组
.参数 名字, 文本型, 可空, a.b,空为根节点
.局部变量 obj, 文本型
.局部变量 _名字, 文本型

.如果 (名字 ≠ “”)
    _名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    _名字 ＝ dataName
.如果结束
obj ＝ 对象.文本方法 (“Eval”, “var ary=''; for (var key in ” ＋ _名字 ＋ “) {ary=ary+ key+','; }”)
对象.通用方法 (“Eval”, “ary=null”)
输出调试文本 (obj)
属性名数组 ＝ 分割文本 (obj, “,”, )


' var jsons = { name: "1111", age: 18 };
' "for (var key in jsons){alert(key);alert(jsons[key]);}"


.子程序 取类型, 整数型, 公开, 空=0，数=2，对象=4，数组=5，文本=6
.参数 名字, 文本型, 可空
.局部变量 l, 文本型
.局部变量 _名字, 文本型

.如果 (名字 ≠ “”)
    _名字 ＝ dataName ＋ “.” ＋ 名字
.否则
    _名字 ＝ dataName
.如果结束
.如果真 (对象.逻辑方法 (“Eval”, 名字 ＋ “ !=null”) ＝ 假)
    返回 (0)
.如果真结束
l ＝ 对象.文本方法 (“Eval”, “Object.prototype.toString.call(” ＋ _名字 ＋ “) ”)
' 输出调试文本 (l)

.判断开始 (l ＝ “[object String]”)
    返回 (6)
.判断 (l ＝ “[object Object]”)
    返回 (4)
.判断 (l ＝ “[object Number]”)
    返回 (2)
.判断 (l ＝ “[object Array]”)
    返回 (5)

.默认

.判断结束
返回 (4)
