.版本 2
.支持库 HtmlView

.程序集 工具

.子程序 编码转换_Unicode到Utf8, 字节集, 公开
.参数 Unicode字节集, 字节集
.局部变量 utf8_len, 整数型
.局部变量 unicode_len, , , , word
.局部变量 uft8, 字节集

unicode_len ＝ 取字节集长度 (Unicode字节集) ÷ 2
utf8_len ＝ WideCharToMultiByte (65001, 0, Unicode字节集, unicode_len, uft8, 0, 0, 假)
uft8 ＝ 取空白字节集 (utf8_len)
WideCharToMultiByte (65001, 0, Unicode字节集, -1, uft8, utf8_len, 0, 假)
返回 (uft8)

.子程序 编码转换_Ansi到Utf8, 字节集, 公开
.参数 ansi文本, 文本型
.局部变量 局_临时, 字节集

局_临时 ＝ 编码转换_Ansi到Unicode (ansi文本)
返回 (编码转换_Unicode到Utf8 (局_临时))

.子程序 编码转换_Ansi到Unicode, 字节集, 公开, 将Ansi码转换为Unicode码；成功返回转换后的字节集；
.参数 Ansi, 文本型, , 欲转换的Ansi文本
.参数 非标准Unicode编码, 逻辑型, 可空, 默认为假，为标准Unicode编码
.局部变量 数据2, 字节集
.局部变量 长度, 整数型

.如果真 (Ansi ＝ “”)
    返回 ({  })
.如果真结束
长度 ＝ MultiByteToWideChar (936, 0, Ansi, -1, {  }, 0)
数据2 ＝ 取空白字节集 (长度 × 2)
MultiByteToWideChar (936, 0, Ansi, -1, 数据2, 长度 × 2)
.如果真 (非标准Unicode编码)
    数据2 ＝ 取字节集左边 (数据2, 取字节集长度 (数据2) － 2)
.如果真结束
返回 (数据2)

.子程序 编码转换_Utf8到Ansi, 文本型, 公开
.参数 utf8字节集, 字节集
.局部变量 ll
.局部变量 Length
.局部变量 Unicode, 字节集
.局部变量 unicode_len
.局部变量 ansi_len, 整数型
.局部变量 ansi, 字节集

.如果真 (utf8字节集 ＝ {  })
    返回 (“”)
.如果真结束
ll ＝ 取字节集长度 (utf8字节集)
Length ＝ MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, {  }, 0)
Unicode ＝ 取空白字节集 (Length × 2)
MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, Unicode, Length × 2)

unicode_len ＝ 取字节集长度 (Unicode) ÷ 2
ansi_len ＝ WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, 0, 0, 假)
ansi ＝ 取空白字节集 (ansi_len)
WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, ansi_len, 0, 假)
返回 (取字节集数据 (ansi, #文本型, ))

.子程序 编码转换_Utf8到Unicode, 字节集, 公开
.参数 utf8字节集, 字节集
.局部变量 length, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集

length ＝ _Utf8转Unicode (65001, 0, utf8字节集, -1, {  }, 0)
Unicode字节集 ＝ 取空白字节集 (length × 2)
_Utf8转Unicode (65001, 0, utf8字节集, -1, Unicode字节集, length × 2)
返回 (Unicode字节集)

.子程序 编码转换_文件路径到URL, 文本型, 公开, 普通文件路径转换为file:///开头的url路径
.参数 文件路径, 文本型
.局部变量 结果文本, 文本型
.局部变量 字节集, 字节集
.局部变量 计次, 整数型
.局部变量 temp, 文本型

文件路径 ＝ 子文本替换 (文件路径, “\”, “/”, , , 真)
字节集 ＝ 编码转换_Ansi到Utf8 (文件路径)
.计次循环首 (取字节集长度 (字节集) － 1, 计次)
    temp ＝ 取十六进制文本 (字节集 [计次])
    .如果真 (取文本长度 (temp) ＜ 2)
        temp ＝ “0” ＋ temp
    .如果真结束

    .判断开始 (字节集 [计次] ＞ 32 且 字节集 [计次] ＜ 126)
        结果文本 ＝ 结果文本 ＋ 字符 (字节集 [计次])
    .默认
        结果文本 ＝ 结果文本 ＋ “%” ＋ temp
    .判断结束

.计次循环尾 ()
返回 (“file:///” ＋ 结果文本)


.子程序 工具_计算K线图价格均线MA, 文本型, 公开, 返回json格式数组，易语言代码计算ma均线
.参数 数据组, K线数据格式, 数组
.参数 天数, 整数型
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 计数器3, 双精度小数型
.局部变量 结果数组, 双精度小数型, , "0"
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 临时文本, 文本型

.计次循环首 (取数组成员数 (数据组), 计数器1)
    .如果真 (计数器1 ＜ 天数 ＋ 1)
        加入成员 (临时文本数组, “-”)
        到循环尾 ()
    .如果真结束
    计数器3 ＝ 0
    .计次循环首 (天数, 计数器2)
        计数器3 ＝ 计数器3 ＋ 数据组 [计数器1 － 计数器2 ＋ 1].收盘close
    .计次循环尾 ()
    加入成员 (结果数组, 计数器3 ÷ 天数)
.计次循环尾 ()
临时文本 ＝ 工具_创建JSON数组 (临时文本数组)
临时文本 ＝ 取文本左边 (临时文本, 取文本长度 (临时文本) － 1) ＋ “,” ＋ 取文本右边 (工具_创建JSON数组 (, 结果数组), 取文本长度 (工具_创建JSON数组 (, 结果数组)) － 1)
返回 (临时文本)

.子程序 工具_创建JSON数组, 文本型, 公开, 将易语言数组转换为符合json语法的文本格式json数组。
.参数 文本数组, 文本型, 可空 数组
.参数 小数数组, 双精度小数型, 可空 数组
.参数 整数数组, 整数型, 可空 数组
.参数 强制文本数组, 文本型, 可空 数组, 已经将数值型数组转换为文本数组的（内容已经加过双引号的）请使用这里，例如：Y轴数据类型里的数据组。
.局部变量 计数器, 整数型
.局部变量 最终结果, 文本型

.判断开始 (是否为空 (文本数组) ＝ 假)
    .计次循环首 (取数组成员数 (文本数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ #引号 ＋ 文本数组 [计数器] ＋ #引号
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ #引号 ＋ 文本数组 [计数器] ＋ #引号
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (整数数组) ＝ 假)
    .计次循环首 (取数组成员数 (整数数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 到文本 (整数数组 [计数器])
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 到文本 (整数数组 [计数器])
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (小数数组) ＝ 假)
    .计次循环首 (取数组成员数 (小数数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 到文本 (小数数组 [计数器])
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 到文本 (小数数组 [计数器])
        .如果结束

    .计次循环尾 ()
.判断 (是否为空 (强制文本数组) ＝ 假)
    .计次循环首 (取数组成员数 (强制文本数组), 计数器)
        .如果 (计数器 ＝ 1)
            最终结果 ＝ 强制文本数组 [计数器]
        .否则
            最终结果 ＝ 最终结果 ＋ “,” ＋ 强制文本数组 [计数器]
        .如果结束

    .计次循环尾 ()
.默认

.判断结束
返回 (“[” ＋ 最终结果 ＋ “]”)

.子程序 工具_将多行js代码转换为单行, 文本型, 公开
.参数 内容, 文本型

内容 ＝ 子文本替换 (内容, #换行符, , , , 真)
内容 ＝ 子文本替换 (内容, “ ”, , , , 真)
返回 (内容)

.子程序 工具_进制转换, 文本型, 公开, 可以将从二进制到三十六进制的数值随意进行转换(返回转换后的文本)
.参数 被转换文本, 文本型, , 欲被转换的文本(不可以转换负数以及小数)
.参数 被转换进制, 整数型, , 被转换文本的进制(2-36之间)
.参数 转换的进制, 整数型, , 要转换到的进制(2-36之间)
.局部变量 欲转换文本, 文本型
.局部变量 临时文本, 文本型
.局部变量 临时数值, 长整数型
.局部变量 计次变量, 整数型

.如果真 (被转换进制 ＜ 2 或 转换的进制 ＜ 2 或 被转换进制 ＞ 36 或 转换的进制 ＞ 36)  ' 判断两个“进制系数”是否正确
    输出调试文本 (“参数错误-进制只能在2-36之间”)
    返回 (“”)
.如果真结束
被转换文本 ＝ 到大写 (到半角 (被转换文本))  ' 规范参数
' 本源码来自易语言资源网(www.5A5X.com)
.计次循环首 (取文本长度 (被转换文本), 计次变量)
    临时文本 ＝ 取文本中间 (被转换文本, 计次变量, 1)
    .如果真 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假) ＝ -1)
        临时文本 ＝ “参数错误-” ＋ 被转换文本 ＋ “不是一个有效的” ＋ 取文本左边 (数值到金额 (被转换进制, 真), 取文本长度 (数值到金额 (被转换进制, 真)) － 4) ＋ “进制数！”
        跳出循环 ()
    .如果真结束
    .如果真 (计次变量 ＝ 取文本长度 (被转换文本))
        临时文本 ＝ “”
    .如果真结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.计次循环尾 ()
.如果真 (临时文本 ≠ “”)
    输出调试文本 (临时文本)
    返回 (“”)
.如果真结束
' 以上为数据处理代码
.如果真 (被转换进制 ＝ 转换的进制)
    返回 (被转换文本)
.如果真结束
.计次循环首 (取文本长度 (被转换文本), 计次变量)  ' 整数转换开始
    临时数值 ＝ (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量, 1), , 真) － 1) × 求次方 (被转换进制, 取文本长度 (被转换文本) － 计次变量) ＋ 临时数值
.计次循环尾 ()
' 本源码来自易语言资源网(www.5A5X.com)
.判断循环首 (临时数值 ＞ 转换的进制 － 1)
    欲转换文本 ＝ 取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 到数值 (到文本 (临时数值 ％ 转换的进制)) ＋ 1, 1) ＋ 欲转换文本
    临时数值 ＝ 取整 (临时数值 ÷ 转换的进制)
.判断循环尾 ()
' 本源码来自易语言资源网(www.5A5X.com)
欲转换文本 ＝ 取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 临时数值 ＋ 1, 1) ＋ 欲转换文本  ' 整数转换结束
返回 (欲转换文本)

.子程序 工具_超文本浏览框_执行JS代码, , 公开, 为超文本浏览框执行js代码，做你想做的任何事。（注：因IE浏览器限制，某些命令或代码可能会执行失败，希望更好兼容性的请使用wke、miniblink或cef）
.参数 浏览框, 超文本浏览框
.参数 js代码, 文本型

浏览框.地址 ＝ 工具_将多行js代码转换为单行 (“javascript:” ＋ js代码)

.子程序 工具_超文本浏览框_动态异步更新数据, , 公开, 无需刷新整个页面动态异步更新指定图形数据。（注：因IE浏览器限制，某些命令或代码可能会执行失败，希望更好兼容性的请使用wke、miniblink或cef）
.参数 浏览框, 超文本浏览框
.参数 图形对象名称, 文本型, , 图形对象名称。
.参数 图形配置内容json, 文本型, , 图形主体配置json。


浏览框.地址 ＝ 工具_将多行js代码转换为单行 (“javascript:” ＋ 图形对象名称 ＋ “.setOption(” ＋ 图形配置内容json ＋ “)”)




.子程序 工具_创建默认要关闭的图例组, 文本型, , 返回json文本格式的待关闭的图例组代码。
.参数 要关闭的图例组, 文本型, 数组
.局部变量 i, 整数型
.局部变量 最终内容, 文本型

最终内容 ＝ “{”
.计次循环首 (取数组成员数 (要关闭的图例组), i)
    .如果真 (i ≠ 1)
        最终内容 ＝ 最终内容 ＋ “,”
    .如果真结束
    最终内容 ＝ 最终内容 ＋ “'” ＋ 要关闭的图例组 [i] ＋ “':false”
.计次循环尾 ()
最终内容 ＝ 最终内容 ＋ “}”
返回 (最终内容)

.子程序 工具_创建散点图坐标数据组, 文本型, 公开, 返回json文本格式的散点坐标数据组。
.参数 x坐标数据组, 双精度小数型, 数组, 请确保X和Y坐标数组成员数一样，否则将仅取成员数少的数组做坐标。
.参数 y坐标数据组, 双精度小数型, 数组, 请确保X和Y坐标数组成员数一样，否则将仅取成员数少的数组做坐标。
.局部变量 计数器1, 整数型
.局部变量 计数器2, 整数型
.局部变量 文本结果, 文本型

计数器1 ＝ 取数组成员数 (x坐标数据组)
.如果真 (取数组成员数 (y坐标数据组) ＜ 计数器1)
    计数器1 ＝ 取数组成员数 (y坐标数据组)
.如果真结束

文本结果 ＝ “[”
.计次循环首 (计数器1, 计数器2)
    .如果真 (计数器2 ≠ 1)
        文本结果 ＝ 文本结果 ＋ “,”
    .如果真结束
    文本结果 ＝ 文本结果 ＋ “[” ＋ 到文本 (x坐标数据组 [计数器2]) ＋ “,” ＋ 到文本 (y坐标数据组 [计数器2]) ＋ “]”
.计次循环尾 ()
文本结果 ＝ 文本结果 ＋ “]”
返回 (文本结果)
